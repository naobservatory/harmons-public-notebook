{
  "hash": "29024eb73abe53a1c8b4a6bde535b96a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Workflow of Thijssen et al. (2023)\"\nsubtitle: \"Pooled plasma from Iran (DNA + RNA)\"\nauthor: \"Harmon Bhasin\"\ndate: 2024-07-22\nformat:\n  html:\n    toc: true # table of contents\n    toc-title: \"Table of contents\" # table of contents title\n    number-sections: true # number sections\n    number-depth: 3 # number depth to show in table of contents\n    toc-location: right # table of contents location\n    page-layout: full # full page layout\n    code-fold: true # Keep option to fold code (i.e. show or hide it; default: hide)\n    code-tools: true # Code menu in the header of your document that provides various tools for readers to interact with the source code\n    code-link: true # Enables hyper-linking of functions within code blocks to their online documentation\n    df-print: paged # print data frame\n    fig-format: svg\n    other-links:\n      - text: Paper\n        href: https://doi.org/10.3390/v15071425\n      - text: Data\n        href: https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA983534\n    code-links:\n      - text: Code for this post\n        icon: file-code\n        href: https://github.com/naobservatory/harmons-public-notebook/blob/main/notebooks/2024-07-22-thijssen.qmd\neditor: \n  visual: true\n  render-on-save: true\ncomments:\n  hypothesis: true # hypothesis\nexecute: \n  freeze: auto\n  cache: true\ntitle-block-banner: \"#de2d26\"\n---\n\n\n\n\n\n\n\n\nThis is another potential study of [this series](https://data.securebio.org/harmons-public-notebook/notebooks/2024-07-08_cebria-mendoza.html). In this post, I analyze [Thijssen 2023](https://doi.org/10.3390/v15071425), a dataset with 20 pooled samples from 100 healthy individuals in Iran.\n\n*This notebook uses the MGS Workflow v2.2.1 (note that this is old).*\n\n# The raw data\n\n## About\n\n[This dataset](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA983534) comprises 20 samples, each derived from plasma pools of 5 people from Iran. In total, 100 healthy individuals contributed to these pools. For each pooled sample, a combined DNA and RNA library preparation was performed, resulting in a single sequencing output that captures both nucleic acid types. This approach provides comprehensive genetic information but precludes separate analysis of DNA and RNA from individual samples.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import libraries and extract metadata from sample names\nlibraries <- read_csv(libraries_path, show_col_types = FALSE)\nmeta_data <- read_csv('/Users/harmonbhasin/work/securebio/nao-harmon/thijssen2023/preprocessing/SraRunTable.txt') %>%\n  select('Library Name', Run) %>% rename(sample = Run, library = 'Library Name')\nlibraries <- libraries %>%\n  left_join(meta_data, by = 'sample') %>%\n  select(sample, library=library.y) %>% \n  filter(library != 'PCL21') %>%\n  mutate(library = factor(library, levels = c(paste0('PCL', 1:20))))\nlibraries\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"sample\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"library\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"SRR24991051\",\"2\":\"PCL16\"},{\"1\":\"SRR24991062\",\"2\":\"PCL15\"},{\"1\":\"SRR24991071\",\"2\":\"PCL18\"},{\"1\":\"SRR24991073\",\"2\":\"PCL17\"},{\"1\":\"SRR24991082\",\"2\":\"PCL14\"},{\"1\":\"SRR24991093\",\"2\":\"PCL13\"},{\"1\":\"SRR24991104\",\"2\":\"PCL12\"},{\"1\":\"SRR24991114\",\"2\":\"PCL9\"},{\"1\":\"SRR24991115\",\"2\":\"PCL11\"},{\"1\":\"SRR24991116\",\"2\":\"PCL8\"},{\"1\":\"SRR24991117\",\"2\":\"PCL7\"},{\"1\":\"SRR24991118\",\"2\":\"PCL6\"},{\"1\":\"SRR24991119\",\"2\":\"PCL5\"},{\"1\":\"SRR24991120\",\"2\":\"PCL4\"},{\"1\":\"SRR24991121\",\"2\":\"PCL3\"},{\"1\":\"SRR24991123\",\"2\":\"PCL20\"},{\"1\":\"SRR24991124\",\"2\":\"PCL2\"},{\"1\":\"SRR24991125\",\"2\":\"PCL19\"},{\"1\":\"SRR24991126\",\"2\":\"PCL10\"},{\"1\":\"SRR24991127\",\"2\":\"PCL1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n### Sample + library preparation \n\nParaphrased from the [paper](https://www.mdpi.com/1999-4915/15/7/1425):\n\n> Study was conducted from 2017-2018 in the Boushehr Province, Iran. Participants were recruited in one of the five transfusion clinics located in Boushehr. Seven milliliters of blood were collected from each individual during blood transfusion or donation. Immediately after collection, plasma was separated from the samples and stored at −70 °C. \n> \n> Initially, the samples were centrifuged and 100 µL of the supernatant was pooled with five samples per pool. The pooled plasma samples were subjected to an adapted version of the NetoVIR protocol for viral particle enrichment and metagenomic sequencing ([more information can be found here](https://www.mdpi.com/1999-4915/15/7/1425#B20-viruses-15-01425)). Pooled plasma samples were centrifuged for 3 min at 17,000× g and filtered through 0.8 µm polyether sulphone filters. To remove free-floating nucleic acids, the filtered samples were subjected to a nuclease treatment with a cocktail of 1 µL micrococcal nuclease and 2 µL benzonase for 2 h at 37 °C. Both viral DNA and RNA were extracted and randomly amplified (including primary step of reverse transcription) with the Whole Transcriptome Amplification 2 kit for 20 cycles. \n> \n> The amplification product was purified with the MSB SPIN PCRAPACE kit and prepared for sequencing by using the Nextera XT kit. DNA products were quantified with the Qubit fluorometer, and the High-Sensitivity DNA kit for the Bioanalyzer 2100 was used to determine the average library fragment size. Samples were pooled in equimolar ratios, and paired-end sequencing (2 × 150 bp) was performed on a NextSeq 500 Illumina platform with an average of 10 million reads per sample.\n\n## Quality control metrics\n\n\n\n\n\n\n\n\n\nIn total, these 20 samples contained ~116M read pairs. The samples had 1.3M - 11.1M (mean ~5.8M) read pairs each. \n\nThe number of reads looks pretty good, although a few samples have a much lower number of reads. The total number of base pairs also looks reasonable, matching the trends of the number of reads. The duplication rate is low. Adapter content is quite high for nextera-transposase-sequence ([library contamination](https://www.biostars.org/p/119774/)).\n\nAs we'd expect, we see higher quality Q scores near the beginning of the read and a gradual decline towards the end of the read, however all positions seem to have a Q score of 35 which means that our reads are \\~99.97% accurate. When looking at the Q score over all sequences, we can see a sharp peak around 35, which corresponds to the previous plot, indicating high read quality. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare data\nbasic_stats_raw_metrics <- basic_stats_raw %>%\n  select(library,\n         `# Read pairs` = n_read_pairs,\n         `Total base pairs\\n(approx)` = n_bases_approx,\n         `% Duplicates\\n(FASTQC)` = percent_duplicates) %>%\n  pivot_longer(-library, names_to = \"metric\", values_to = \"value\") %>%\n  mutate(metric = fct_inorder(metric)) \n\n# Set up plot templates\n\ng_basic <- ggplot(basic_stats_raw_metrics, aes(x = library, y = value)) +\n  geom_col(position = \"dodge\") +\n  scale_x_discrete() +\n  scale_y_continuous(expand = c(0, 0)) +\n  expand_limits(y = c(0, 100)) +\n  facet_grid(metric ~ ., scales = \"free\", space = \"free_x\", switch = \"y\") +\n  theme_kit + theme(\n    axis.title.y = element_blank(),\n    strip.text.y = element_text(face = \"plain\")\n  )\ng_basic\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-basic-stats-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up plotting templates\ng_qual_raw <- ggplot(mapping=aes(linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters_raw <- g_qual_raw + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats_raw) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,NA),\n                     breaks = seq(0,100,10), expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0)) +\n  facet_grid(.~adapter)\ng_adapters_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-raw-quality-1.svg)\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base_raw <- g_qual_raw +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats_raw) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0))\ng_quality_base_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-raw-quality-2.svg)\n:::\n\n```{.r .cell-code}\ng_quality_seq_raw <- g_qual_raw +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats_raw) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0))\ng_quality_seq_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-raw-quality-3.svg)\n:::\n:::\n\n\n\n\n# Preprocessing\n\n## Summary\n\nThe average fraction of reads at each stage in the preprocessing pipeline is shown in the following table. Adapter trimming & filtering doesn't lose too many reads. Deduplication loses us about 30% of reads on average, then ribodepletion only loses as about 0.7% on average.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# TODO: Group by pool size as well\n# Count read losses\nn_reads_rel <- basic_stats %>% \n  select(sample, stage, percent_duplicates, n_read_pairs) %>%\n  group_by(sample) %>% \n  arrange(sample, stage) %>%\n  mutate(p_reads_retained = n_read_pairs / lag(n_read_pairs),\n         p_reads_lost = 1 - p_reads_retained,\n         p_reads_retained_abs = n_read_pairs / n_read_pairs[1],\n         p_reads_lost_abs = 1-p_reads_retained_abs,\n         p_reads_lost_abs_marginal = p_reads_lost_abs - lag(p_reads_lost_abs))\nn_reads_rel_display <- n_reads_rel %>% \n  rename(Stage=stage) %>% \n  group_by(Stage) %>% \n  summarize(`% Total Reads Lost (Cumulative)` = paste0(round(min(p_reads_lost_abs*100),1), \"-\", round(max(p_reads_lost_abs*100),1), \" (mean \", round(mean(p_reads_lost_abs*100),1), \")\"),\n            `% Total Reads Lost (Marginal)` = paste0(round(min(p_reads_lost_abs_marginal*100),1), \"-\", round(max(p_reads_lost_abs_marginal*100),1), \" (mean \", round(mean(p_reads_lost_abs_marginal*100),1), \")\"), .groups=\"drop\") %>% \n  filter(Stage != \"raw_concat\") %>%\n  mutate(Stage = Stage %>% as.numeric %>% factor(labels=c(\"Trimming & filtering\", \"Deduplication\", \"Initial ribodepletion\", \"Secondary ribodepletion\")))\nn_reads_rel_display\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Stage\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Cumulative)\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Marginal)\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Trimming & filtering\",\"2\":\"0.8-1.8 (mean 1.2)\",\"3\":\"0.8-1.8 (mean 1.2)\"},{\"1\":\"Deduplication\",\"2\":\"18.8-45.3 (mean 31.7)\",\"3\":\"17.9-44.4 (mean 30.6)\"},{\"1\":\"Initial ribodepletion\",\"2\":\"19-46.4 (mean 32.2)\",\"3\":\"0-1 (mean 0.4)\"},{\"1\":\"Secondary ribodepletion\",\"2\":\"19-46.7 (mean 32.5)\",\"3\":\"0-0.7 (mean 0.3)\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Quality control metrics\n\nAdapter trimming gets rid of nextera_transposase_sequenece and poly_g, although there is still a bit of poly_a adapter contamination ([overivew of fastqc adapters](https://github.com/s-andrews/FastQC/blob/master/Configuration/adapter_list.txt)). Not sure how to interpret the poly_a contamination, but it's not that high so I'm not going to worry about it for now. Q score remain the same during read cleaning when looking at the positions, with the end of the read actually improving in score. Q scores across all sequences look pretty much the same throughout cleaning.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_qual <- ggplot(mapping=aes(linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters <- g_qual + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,20),\n                     breaks = seq(0,50,10), expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~adapter)\ng_adapters\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-quality-1.svg)\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base <- g_qual +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~.)\ng_quality_base\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-quality-2.svg)\n:::\n\n```{.r .cell-code}\ng_quality_seq <- g_qual +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0)) +\n  facet_grid(stage~., scales = \"free_y\")\ng_quality_seq\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-quality-3.svg)\n:::\n:::\n\n\n\n\nThese plots below show the trends from above in each sample. All samples tend to follow similar trends for deduplication, with a large decrease in read length post adapter trimming. Ribosomal reads were quite low, near 1% for every sample.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_stage_trace <- ggplot(basic_stats, aes(x=stage, group=sample)) +\n  theme_kit\n\n# Plot reads over preprocessing\ng_reads_stages <- g_stage_trace +\n  geom_line(aes(y=n_read_pairs)) +\n  scale_y_continuous(\"# Read pairs\", expand=c(0,0), limits=c(0,NA))\ng_reads_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/preproc-figures-1.svg)\n:::\n\n```{.r .cell-code}\n# Plot relative read losses during preprocessing\ng_reads_rel <- ggplot(n_reads_rel, \n                      aes(x=stage, group=sample)) +\n  geom_line(aes(y=p_reads_lost_abs_marginal)) +\n  scale_y_continuous(\"% Total Reads Lost\", expand=c(0,0), \n                     labels = function(x) x*100) +\n  theme_kit\ng_reads_rel\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/preproc-figures-2.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstage_dup <- basic_stats %>% group_by(stage) %>% \n  summarize(dmin = min(percent_duplicates), dmax=max(percent_duplicates),\n            dmean=mean(percent_duplicates), .groups = \"drop\")\n\ng_dup_stages <- g_stage_trace +\n  geom_line(aes(y=percent_duplicates)) +\n  scale_y_continuous(\"% Duplicates\", limits=c(0,NA), expand=c(0,0))\ng_dup_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/preproc-dedup-1.svg)\n:::\n\n```{.r .cell-code}\ng_readlen_stages <- g_stage_trace + geom_line(aes(y=mean_seq_len)) +\n  scale_y_continuous(\"Mean read length (nt)\", expand=c(0,0), limits=c(0,NA))\ng_readlen_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/preproc-dedup-2.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate reads lost during ribodepletion (approximation for % ribosomal reads)\nreads_ribo <- n_reads_rel %>% \n  filter(stage %in% c(\"dedup\", \"ribo_secondary\")) %>% \n  group_by(sample) %>% \n  summarize(p_reads_ribo=1-n_read_pairs[2]/n_read_pairs[1], .groups = \"drop\") %>%\n  inner_join(libraries, by = 'sample')\nreads_ribo_summ <- reads_ribo %>%\n  group_by(sample) %>%\n  summarize(min=min(p_reads_ribo), max=max(p_reads_ribo),\n            mean=mean(p_reads_ribo), .groups = \"drop\") %>%\n  inner_join(libraries, by = 'sample')\ng_reads_ribo <- ggplot(reads_ribo, \n                       aes(x=library, y=p_reads_ribo)) +\n  geom_point() + \n  scale_y_continuous(name=\"Approx % ribosomal reads\", limits=c(0,1),\n                     breaks=seq(0,1,0.2), expand=c(0,0), labels = function(y) y*100)+\n  theme_kit\ng_reads_ribo\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/ribo-frac-1.svg)\n:::\n:::\n\n\n\n\n# Taxonomic composition\n\n## High-level composition\n\nTo assess the high-level composition of the reads, I ran the ribodepleted files through Kraken2 and summarized the results with Bracken.\n\nThe groups listed below were created by Will:\n\n* Filtered (removed during cleaning)\n* Duplicate (removed during deduplication)\n* Ribosomal (removed during ribodepletion)\n* Unassigned (non-ribosomal reads that were not assigned to any taxon by Kraken/Bracken)\n* Bacterial (non-ribosomal reads assigned to the Bacteria domain by Kraken/Bracken)\n* Archaeal (non-ribosomal reads assigned to the Archaea domain by Kraken/Bracken)\n* Viral (non-ribosomal reads assigned to the Viruses domain by Kraken/Bracken)\n* Human (non-ribosomal reads assigned to the Eukarya domain by Kraken/Bracken)\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare plotting templates\ng_comp_base <- ggplot(mapping=aes(x=library, y=p_reads, fill=classification)) +\n  scale_x_discrete(name=\"Plasma pool\") +\n  theme_kit + \n  theme(plot.title = element_text(hjust=0, face=\"plain\", size=rel(1.5)))\nscale_y_pc_reads <- purrr::partial(scale_y_continuous, name = \"% Reads\",\n                                   expand = c(0,0), labels = function(y) y*100)\ngeom_comp <- purrr::partial(geom_col, position = \"stack\", width = 1)\n\n# Define a color palette for the classification\nclassification_colors <- brewer.pal(8, \"Accent\")\nnames(classification_colors) <- c(\"Filtered\", \"Duplicate\", \"Ribosomal\", \"Unassigned\", \"Bacterial\", \"Archaeal\", \"Viral\", \"Human\")\nscale_fill_classification <- function() {\n  scale_fill_manual(values = classification_colors, name = \"Classification\")\n}\n\n# Plot overall composition\ng_comp <- g_comp_base + geom_comp(data = comp) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_classification() + \n  ggtitle(\"Read composition (all reads, all groups)\")\ng_comp\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-composition-all-1.svg)\n:::\n\n```{.r .cell-code}\ng_comp_assigned <- g_comp_base + \n  geom_comp(data = comp_assigned) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_classification() + \n  ggtitle(\"Read composition (assigned reads, all groups)\")\ng_comp_assigned\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-composition-all-2.svg)\n:::\n:::\n\n\n\n\n## Total viral content\n\nTotal viral fraction average $2.36 \\times 10^{-4}$ across samples. As a fraction of assigned (rather than total) reads, this jumped to $3.19 \\times 10^{-3}$:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_reads_viral_all <- comp %>% filter(classification == \"Viral\") %>%\n  mutate(read_group = \"All reads\")\np_reads_viral_assigned <- comp_assigned %>% filter(classification == \"Viral\") %>%\n  mutate(read_group = \"Classified reads\")\np_reads_viral <- bind_rows(p_reads_viral_all, p_reads_viral_assigned)\n\n# Plot\ng_viral <- ggplot(p_reads_viral, aes(x=library, y=p_reads, color = read_group, group = library)) +\n  geom_point(size = 5) +\n  geom_line(color = 'black') +\n  scale_x_discrete(name=\"Plasma pool\") +\n  scale_y_log10(name=\"Viral read fraction\", labels = label_log(digits=2), limits = c(1e-6, 1e-2)) +\n  theme_kit + \n  coord_flip()\n\ng_viral\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/p-viral-1.svg)\n:::\n:::\n\n\n\n\n## Taxonomic composition of viruses\n\nThe two dominant viruses we see are Anellovirdae and Phycodnaviridae. The threshold for the label \"other\" are the set of families that make up less than 5% composition in all samples.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmajor_threshold <- 0.05\n\n# Identify major viral families\nviral_families_major_tab <- viral_families %>% \n  group_by(name, taxid) %>%\n  summarize(p_reads_viral_max = max(p_reads_viral), .groups=\"drop\") %>%\n  filter(p_reads_viral_max >= major_threshold)\nviral_families_major_list <- viral_families_major_tab %>% pull(name)\nviral_families_major <- viral_families %>% \n  filter(name %in% viral_families_major_list) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_minor <- viral_families_major %>% \n  group_by(sample) %>%\n  summarize(p_reads_viral_major = sum(p_reads_viral), .groups = \"drop\") %>%\n  mutate(name = \"Other\", taxid=NA, p_reads_viral = 1-p_reads_viral_major) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_display <- viral_families_major %>% \n  bind_rows(viral_families_minor) %>%\n  arrange(desc(p_reads_viral)) %>% \n  mutate(name = factor(name, levels=c(viral_families_major_list, \"Other\"))) %>%\n  rename(p_reads = p_reads_viral, classification=name) %>%\n  inner_join(libraries, by='sample')\n\n# Plot\ng_families <- g_comp_base + \n  geom_comp(data=viral_families_display) +\n  scale_y_continuous(name=\"% Viral Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_brewer(palette = 'Accent')\ng_families\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/viral-family-composition-1.svg)\n:::\n:::\n\n\n\n\n# Human-infecting virus reads\n\n## Overall relative abundance\n\nI calculated the relative abundance of human-infecting viruses in two ways:\n\n-   First, as the total number of deduplicated human-virus reads in each sample, divided by the number of raw reads (\"All reads\"). This results in a viral fraction of $1.64 \\times 10^{-4}$ across all samples\n\n-   Second, as a fraction of preprocessed (cleaned, deduplicated, computationally ribodepleted) reads (\"Preprocessed reads\"). This results in a viral fraction of $2.42 \\times 10^{-4}$ across all samples.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get raw read counts\nread_counts_raw <- filter(basic_stats_raw) %>%\n  select(sample, n_reads_raw = n_read_pairs)\nread_counts_preproc <- basic_stats %>% filter(stage == \"ribo_initial\") %>%\n  select(sample, n_reads_preproc = n_read_pairs)\n\n# Get HV read counts\nread_counts_hv <- mrg_hv %>% filter(hv_status) %>% \n  group_by(sample) %>% \n  count(name=\"n_reads_hv\")\nread_counts <- read_counts_raw %>%\n  left_join(read_counts_hv, by=c(\"sample\")) %>%\n  mutate(n_reads_hv = replace_na(n_reads_hv, 0)) %>%\n  left_join(read_counts_preproc, by=c(\"sample\")) %>%\n  inner_join(libraries, by=c(\"sample\")) %>%\n  select(sample, n_reads_raw, n_reads_preproc, n_reads_hv) %>%\n  mutate(n_samples = 1,\n         p_reads_total = n_reads_hv/n_reads_raw,\n         p_reads_preproc = n_reads_hv/n_reads_preproc)\nread_counts_long <- read_counts %>%\n  pivot_longer(starts_with(\"p_reads\"), names_to=\"read_group\", values_to=\"p_reads\") %>%\n  mutate(read_group = ifelse(read_group == \"p_reads_total\", \"All reads\", \"Preprocessed reads\"))\n\n# Combine for display\nread_counts_agg <- read_counts %>%\n  mutate(p_reads_total = n_reads_hv/n_reads_raw,\n         p_reads_preproc = n_reads_hv/n_reads_preproc) %>%\n  inner_join(libraries, by=c(\"sample\"))\nread_counts_agg_long <- read_counts_agg %>%\n  pivot_longer(starts_with(\"p_reads\"), names_to=\"read_group\", values_to=\"p_reads\") %>%\n  mutate(read_group = ifelse(read_group == \"p_reads_total\", \"All reads (HV)\", \"Preprocessed reads (HV)\")) \n\n# Visualize\ng_read_counts <- ggplot(read_counts_agg_long, aes(x=library, y=p_reads, color = read_group, group = library)) +\n  geom_point(size = 5) +\n  geom_line(color = 'black') +\n  scale_y_log10(name = \"Unique human-viral read fraction\", labels = label_log(digits=2), limits = c(1e-6, 1e-2)) +\n  theme_kit + \n  coord_flip()\ng_read_counts\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/count-hv-reads-1.svg)\n:::\n:::\n\n\n\n\n\n\n## Overall taxonomy and composition\n\nComposition of HV reads was changed from when looking at all viral reads. The two dominant viruses we see are Anellovirdae and Microviridae (bacteriophage). The threshold for the label \"other\" are the set of families that make up less than 5% composition in all samples.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthreshold_major_family <- 0.05\n\n# Count reads for each human-viral family\nhv_family_counts <- hv_reads_family %>% \n  group_by(sample, name, taxid) %>%\n  count(name = \"n_reads_hv\") %>%\n  group_by(sample) %>%\n  mutate(p_reads_hv = n_reads_hv/sum(n_reads_hv))\n\n# Identify high-ranking families and group others\nhv_family_major_tab <- hv_family_counts %>% group_by(name) %>% \n  filter(p_reads_hv == max(p_reads_hv)) %>% filter(row_number() == 1) %>%\n  arrange(desc(p_reads_hv)) %>% filter(p_reads_hv > threshold_major_family)\nhv_family_counts_major <- hv_family_counts %>%\n  mutate(name_display = ifelse(name %in% hv_family_major_tab$name, name, \"Other\")) %>%\n  group_by(sample, name_display) %>%\n  summarize(n_reads_hv = sum(n_reads_hv), p_reads_hv = sum(p_reads_hv), \n            .groups=\"drop\") %>%\n  mutate(name_display = factor(name_display, \n                               levels = c(hv_family_major_tab$name, \"Other\")))\nhv_family_counts_display <- hv_family_counts_major %>%\n  rename(p_reads = p_reads_hv, classification = name_display) %>%\n  inner_join(libraries, by = 'sample')\n\n# Plot\ng_hv_family <- g_comp_base + \n  geom_col(data=hv_family_counts_display, position = \"stack\", width=1) +\n  scale_y_continuous(name=\"% HV Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_brewer(palette = 'Accent', name = \"Viral family\") +\n  labs(title=\"Family composition of human-viral reads\") +\n  guides(fill=guide_legend(ncol=4)) +\n  theme(plot.title = element_text(size=rel(1.4), hjust=0, face=\"plain\"))\ng_hv_family\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/hv-family-1.svg)\n:::\n\n```{.r .cell-code}\n# Get most prominent families for text\nhv_family_collate <- hv_family_counts %>%\n  group_by(name, taxid) %>% \n  summarize(n_reads_tot = sum(n_reads_hv),\n            p_reads_max = max(p_reads_hv), .groups=\"drop\") %>% \n  arrange(desc(n_reads_tot))\nhv_family_collate %>%\n select(name,taxid, n_reads_tot) %>%\n rename(\n  'family' = 'name',\n  '# of total reads' = 'n_reads_tot',\n)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"family\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"taxid\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"# of total reads\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Anelloviridae\",\"2\":\"687329\",\"3\":\"12804\"},{\"1\":\"Microviridae\",\"2\":\"10841\",\"3\":\"5194\"},{\"1\":\"Sedoreoviridae\",\"2\":\"2946186\",\"3\":\"278\"},{\"1\":\"Parvoviridae\",\"2\":\"10780\",\"3\":\"266\"},{\"1\":\"Adenoviridae\",\"2\":\"10508\",\"3\":\"104\"},{\"1\":\"Polyomaviridae\",\"2\":\"151341\",\"3\":\"95\"},{\"1\":\"Papillomaviridae\",\"2\":\"151340\",\"3\":\"16\"},{\"1\":\"Intestiviridae\",\"2\":\"2942964\",\"3\":\"4\"},{\"1\":\"Picornaviridae\",\"2\":\"12058\",\"3\":\"4\"},{\"1\":\"Caliciviridae\",\"2\":\"11974\",\"3\":\"3\"},{\"1\":\"Coronaviridae\",\"2\":\"11118\",\"3\":\"3\"},{\"1\":\"Poxviridae\",\"2\":\"10240\",\"3\":\"3\"},{\"1\":\"Inoviridae\",\"2\":\"10860\",\"3\":\"2\"},{\"1\":\"Hudisavirus sp.\",\"2\":\"2021738\",\"3\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Analyzing specific families\n\nWe now investigate the composition of specific families that had more than 5 viral reads. In investigating individual viral families, to avoid distortions from a few rare reads, I restricted myself to samples where that family made up at least 1% of human-viral reads:\n\n\n\n\n\n\n\n\n\n### Anelloviridae (Number of reads: 12,804)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Anelloviridae\nplot_viral_family_histogram(taxid_chosen=687329)\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-anelloviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Anelloviridae\nplot_viral_family_composition(taxid_chosen=687329, threshold_major_species = 0.01)\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-anelloviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n### Microviridae (Number of reads: 5,194)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Microviridae\nplot_viral_family_histogram(taxid_chosen=10841)\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-microviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Microviridae\nplot_viral_family_composition(taxid_chosen=10841, threshold_major_species = 0.01)\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-microviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n### Sedreoviridae (Number of reads: 278)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sedreoviridae\nplot_viral_family_histogram(taxid_chosen=2946186)\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-sedreoviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sedreoviridae\nplot_viral_family_composition(taxid_chosen=2946186, threshold_major_species = 0.01)\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-sedreoviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n### Parvoviridae (Number of reads: 266) \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Parvoviridae\nplot_viral_family_histogram(taxid_chosen=10780)\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-parvoviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Parvoviridae\nplot_viral_family_composition(taxid_chosen=10780, threshold_major_species = 0.01)\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-parvoviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n### Adenoviridae (Number of reads: 104) \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adenoviridae\nplot_viral_family_histogram(taxid_chosen=10508)\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-adenoviridae-histogram-1.svg)\n:::\n:::\n\n\n\n\nNone of these reads made up more than 1% of the total reads of any sample.\n\n### Polyomaviridae (Number of reads: 95) \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Polyomaviridae\nplot_viral_family_histogram(taxid_chosen=151341)\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-polyomaviridae-histogram-1.svg)\n:::\n:::\n\n\n\n\nNone of these reads made up more than 1% of the total reads of any sample.\n\n### Papillomaviridae (Number of reads: 16) \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Polyomaviridae\nplot_viral_family_histogram(taxid_chosen=151340)\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-papillomaviridae-histogram-1.svg)\n:::\n:::\n\n\n\n\nNone of these reads made up more than 1% of the total reads of any sample.\n\n## Relative abundance of pathogenic viruses of interest\n\n\n\n\n\n\n\n\n\n\n\nEach dot represents a sample, colored by viral family. The x-axis shows the relative abundance of human-infecting viruses, and the y-axis shows the species.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_family <- result %>% select(species, family) %>% rename('name' = 'species')\n\nplay <- hv_species_counts %>% \n  ungroup() %>%\n  inner_join(libraries, by = 'sample') %>%\n  inner_join(species_family, by = 'name') %>%\n  mutate(name = ifelse(name == \"Severe acute respiratory syndrome-related coronavirus\", \"SARS-related coronavirus\", name)) %>%\n  filter(family %in% c(\"Sedoreoviridae\", \"Parvoviridae\", \"Adenoviridae\", \"Papillomaviridae\", \"Polyomaviridae\", \"Coronaviridae\", \"Caliciviridae\", \"Picornaviridae\")) \n\nadjusted_play <- play %>% \n  group_by(name) %>%\n  mutate(virus_prevalence_num = n_distinct(sample)/n_distinct(libraries),\n         total_reads_hv = sum(n_reads_hv)) %>%\n  ungroup() %>%\n  mutate(name = fct_reorder(name, virus_prevalence_num, .desc=TRUE)) %>% \n  select(name, ra_reads_hv, family, virus_prevalence_num, total_reads_hv, n_reads_hv)\n\npal <- c(brewer.pal(8, 'Dark2'),brewer.pal(8, 'Accent'))\n\n#, labels = label_log(digits=2)\n\nra_dot <- ggplot(adjusted_play, aes(x = ra_reads_hv, y=name)) +\n  geom_quasirandom(orientation = 'y', aes(color = family)) +\n  scale_color_manual(values = pal) + \n    scale_x_log10(\n    \"Relative abundance human virus reads\",\n    labels=label_log(digits=3)\n  ) +\n  labs(y =  \"\",\n       color = 'Viral family') + \n  guides(color = guide_legend(ncol=2)) +\n  theme_light() + \n    theme(\n    axis.text.y = element_text(size = 10),\n    axis.text.x = element_text(size = 12),\n    axis.ticks.y = element_blank(),axis.line = element_line(colour = \"black\"),\n    axis.title.x = element_text(size = 14),    \n    legend.text = element_text(size = 10),\n    legend.title = element_text(size = 10, face=\"bold\"),\n    #legend.position = 'bottom',\n    legend.position = c(1, 1),  # Move legend to top right\n    legend.justification = c(1, 1),  # Align legend to top right\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.background = element_blank())\nra_dot\n```\n\n::: {.cell-output-display}\n![](2024-07-22-thijssen_files/figure-html/plot-pathogenic-viruses-1.svg)\n:::\n\n```{.r .cell-code}\n#  geom_text(aes(label = total_reads_hv, y = name), \n#            x = 1e-9, hjust = 0, vjust = 0.5, size = 3, \n#            check_overlap = TRUE)\n```\n:::\n\n\n\n\nI can then take all of the viruses that we found and look up what they're responsible for and whether they're dangerous.\n\n| Virus Name                                            | Common Name                                   | Pathogenic Potential                                                            |\n|-------------------------------------------------------|-----------------------------------------------|---------------------------------------------------------------------------------|\n| Rotavirus A                                           | Rotavirus                                     | High, causes severe diarrhea in children                                        |\n| Enterovirus C                                         | Includes poliovirus and some coxsackieviruses | High, can cause various diseases including polio                                |\n| Severe acute respiratory syndrome-related coronavirus | SARS coronavirus                              | High, causes severe respiratory illness                                         |\n| Sapporo virus                                         | Sapporo virus or Sapovirus                    | Moderate, causes gastroenteritis                                                |\n| Human mastadenovirus F                                | Adenovirus F                                  | Moderate, can cause gastroenteritis                                             |\n| Alphapolyomavirus quintihominis                       | Not widely known                              | Low, but some polyomaviruses can cause disease in immunocompromised individuals |\n| Alphapapillomavirus 4                                 | Human papillomavirus (HPV) type 4             | Low to moderate, can cause warts                                                |\n\nNone of these viruses are too suprising to see other than the Severe acute respiratory syndrome-related coronavirus, which when BLASTED, comes up as SARS-CoV-2. We believe that this is due to contamination with the COVID-19 pandemic since these samples were taken pre-pandemic.\n\n## Relative abundance assuming perfect human read removal\n\n\n\n\n\n\n\n\nAssuming we're able to perfectly remove all human reads, the average relative abundance of known human infecting virus is $1.87 \\times 10^{-4}$.\n\n# Conclusion\nThere were some interesting takeways from this analysis:\n\n1. Contamination with SARS-Cov-2 seems to be a common occurence and should be accounted for when interpretting these results.\n2. Gasterointestinal diseases are picked up in plasma.\n3. Sexually transmitted infections are picked up in plasma.\n4. We pick up a decent amount of baceriophage (i.e. Microviridae).\n5. A lot of the Microviridae and Anelloviridae are largely uncharacterized (denoted by the family name followed by the abbreviation \"sp.\").\n\n# Appendix\n\n## Human-infecting virus families, genera, and species\n\nTo get a good overview of families, genera, and species, we can look at a Sankey plot where the magnitude of relative abundance, averaged over all samples, is shown in parentheses.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to create links\ncreate_links <- function(data) {\n  family_to_genus <- data %>%\n    filter(!is.na(genus)) %>%\n    group_by(family, genus) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = family, target = genus)\n  \n  genus_to_species <- data %>%\n    group_by(genus, species) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = genus, target = species)\n\n  family_to_species <- data %>%\n    filter(is.na(genus)) %>%\n    group_by(family, species) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = family, target = species)\n\n  bind_rows(family_to_genus, genus_to_species, family_to_species) %>%\n    filter(!is.na(source))\n}\n\n# Function to create nodes\ncreate_nodes <- function(links) {\n  data.frame(\n    name = c(links$source, links$target) %>% unique()\n  )\n}\n\n# Function to prepare data for Sankey diagram\nprepare_sankey_data <- function(links, nodes) {\n  links$IDsource <- match(links$source, nodes$name) - 1\n  links$IDtarget <- match(links$target, nodes$name) - 1\n  list(links = links, nodes = nodes)\n}\n\n# Function to create Sankey plot\ncreate_sankey_plot <- function(sankey_data) {\n  sankeyNetwork(\n    Links = sankey_data$links, \n    Nodes = sankey_data$nodes,\n    Source = \"IDsource\", \n    Target = \"IDtarget\",\n    Value = \"value\", \n    NodeID = \"name\",\n    sinksRight = TRUE,\n    nodeWidth = 25,\n    fontSize = 14,\n  )\n}\n\nsave_sankey_as_png <- function(sankey_plot, width = 1000, height = 800) {\n  # Save the plot as an HTML file\n  saveWidget(sankey_plot, sprintf('%s/sankey.html',data_dir))\n}\n\nformat_scientific <- function(x, digits=2) {\n  sapply(x, function(val) {\n    if (is.na(val) || abs(val) < 1e-15) {\n      return(\"0\")\n    } else {\n      exponent <- floor(log10(abs(val)))\n      coef <- val / 10^exponent\n      #return(sprintf(\"%.1f × 10^%d\", round(coef, digits), exponent))\n      # May or may not be smart, just keeping magnitude\n      return(sprintf(\"10^%d\", exponent))\n    }\n  })\n}\n\ndata <- result %>% \n  mutate(across(c(genus_n_reads_tot, genus_ra_reads_tot), ~replace_na(., 0)),\n         genus = ifelse(is.na(genus), \"Unknown Genus\", genus)) %>%\n  mutate(\n  species = paste0(species, sprintf(' (%s)', format_scientific(species_ra_reads_tot))),\n  genus = paste0(genus, sprintf(' (%s)', format_scientific(genus_ra_reads_tot))),\n  family = paste0(family, sprintf(' (%s)', format_scientific(family_ra_reads_tot)))\n)\nlinks <- as.data.frame(create_links(data))\nnodes <- create_nodes(links)\nsankey_data <- prepare_sankey_data(links, nodes)\nsankey <- create_sankey_plot(sankey_data)\n\nsankey\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-6c96f1f596e7e621474b\" style=\"width:100%;height:1462px;\" class=\"sankeyNetwork html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6c96f1f596e7e621474b\">{\"x\":{\"links\":{\"source\":[0,1,1,1,1,2,3,4,5,6,7,8,9,9,10,10,10,11,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,18,19,19,19,19,19,19,19,19,19,20,21,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,27,28,29,30,31,31,31,31,31,31,31,31,31],\"target\":[27,16,19,25,31,30,18,26,21,31,31,14,17,23,20,22,24,15,28,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],\"value\":[1,23,9,13,4,1,1,2,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},\"nodes\":{\"name\":[\"Adenoviridae (10^-6)\",\"Anelloviridae (10^-4)\",\"Caliciviridae (10^-7)\",\"Coronaviridae (10^-7)\",\"Inoviridae (10^-7)\",\"Intestiviridae (10^-7)\",\"Microviridae (10^-5)\",\"NA (0)\",\"Papillomaviridae (10^-6)\",\"Parvoviridae (10^-6)\",\"Picornaviridae (10^-7)\",\"Polyomaviridae (10^-6)\",\"Poxviridae (10^-7)\",\"Sedoreoviridae (10^-6)\",\"Alphapapillomavirus (10^-6)\",\"Alphapolyomavirus (10^-6)\",\"Alphatorquevirus (10^-6)\",\"Ambidensovirus (10^-7)\",\"Betacoronavirus (10^-7)\",\"Betatorquevirus (10^-7)\",\"Cardiovirus (10^-7)\",\"Carjivirus (10^-7)\",\"Cosavirus (10^-7)\",\"Dependoparvovirus (10^-5)\",\"Enterovirus (10^-7)\",\"Gammatorquevirus (10^-6)\",\"Inovirus (10^-7)\",\"Mastadenovirus (10^-6)\",\"Orthopoxvirus (10^-7)\",\"Rotavirus (10^-6)\",\"Sapovirus (10^-7)\",\"Unknown Genus (0)\",\"Alphapapillomavirus 4 (10^-6)\",\"Alphapolyomavirus quintihominis (10^-6)\",\"Alphatorquevirus homin1 (10^-6)\",\"Alphatorquevirus homin10 (10^-6)\",\"Alphatorquevirus homin13 (10^-6)\",\"Alphatorquevirus homin15 (10^-7)\",\"Alphatorquevirus homin17 (10^-7)\",\"Alphatorquevirus homin18 (10^-6)\",\"Alphatorquevirus homin19 (10^-6)\",\"Alphatorquevirus homin20 (10^-6)\",\"Alphatorquevirus homin21 (10^-7)\",\"Alphatorquevirus homin24 (10^-7)\",\"Alphatorquevirus homin29 (10^-7)\",\"Alphatorquevirus homin3 (10^-6)\",\"Alphatorquevirus homin5 (10^-7)\",\"Alphatorquevirus homin6 (10^-6)\",\"Alphatorquevirus homin7 (10^-7)\",\"Alphatorquevirus homin9 (10^-7)\",\"Torque teno virus 11 (10^-7)\",\"Torque teno virus 12 (10^-6)\",\"Torque teno virus 16 (10^-7)\",\"Torque teno virus 22 (10^-6)\",\"Torque teno virus 27 (10^-6)\",\"Torque teno virus 28 (10^-7)\",\"Torque teno virus 8 (10^-8)\",\"Ambidensovirus sp. (10^-7)\",\"Severe acute respiratory syndrome-related coronavirus (10^-7)\",\"Betatorquevirus homini1 (10^-7)\",\"Betatorquevirus homini10 (10^-7)\",\"Betatorquevirus homini12 (10^-7)\",\"Betatorquevirus homini26 (10^-7)\",\"Betatorquevirus homini5 (10^-7)\",\"Betatorquevirus homini6 (10^-7)\",\"Betatorquevirus homini7 (10^-7)\",\"Betatorquevirus homini8 (10^-7)\",\"TTV-like mini virus (10^-7)\",\"Cardiovirus D (10^-7)\",\"CrAssphage ZA (10^-7)\",\"Cosavirus A (10^-7)\",\"Dependoparvovirus primate1 (10^-5)\",\"Enterovirus C (10^-7)\",\"Gammatorquevirus homidi1 (10^-7)\",\"Gammatorquevirus homidi10 (10^-7)\",\"Gammatorquevirus homidi11 (10^-6)\",\"Gammatorquevirus homidi12 (10^-7)\",\"Gammatorquevirus homidi13 (10^-7)\",\"Gammatorquevirus homidi14 (10^-7)\",\"Gammatorquevirus homidi2 (10^-7)\",\"Gammatorquevirus homidi3 (10^-6)\",\"Gammatorquevirus homidi4 (10^-7)\",\"Gammatorquevirus homidi6 (10^-7)\",\"Gammatorquevirus homidi7 (10^-7)\",\"Gammatorquevirus homidi8 (10^-6)\",\"Gammatorquevirus homidi9 (10^-7)\",\"Inovirus D_HF3_19 (10^-7)\",\"Inovirus D_HF5_49 (10^-7)\",\"Human mastadenovirus F (10^-6)\",\"Vaccinia virus (10^-7)\",\"Rotavirus A (10^-6)\",\"Sapporo virus (10^-7)\",\"Anelloviridae sp. (10^-5)\",\"Gokushovirus WZ-2015a (10^-7)\",\"Hudisavirus sp. (10^-7)\",\"Human gut gokushovirus (10^-6)\",\"Micro Torque teno virus (10^-7)\",\"Microviridae sp. (10^-5)\",\"Microvirus sp. (10^-6)\",\"Small anellovirus (10^-7)\",\"Torque teno virus (10^-6)\"],\"group\":[\"Adenoviridae (10^-6)\",\"Anelloviridae (10^-4)\",\"Caliciviridae (10^-7)\",\"Coronaviridae (10^-7)\",\"Inoviridae (10^-7)\",\"Intestiviridae (10^-7)\",\"Microviridae (10^-5)\",\"NA (0)\",\"Papillomaviridae (10^-6)\",\"Parvoviridae (10^-6)\",\"Picornaviridae (10^-7)\",\"Polyomaviridae (10^-6)\",\"Poxviridae (10^-7)\",\"Sedoreoviridae (10^-6)\",\"Alphapapillomavirus (10^-6)\",\"Alphapolyomavirus (10^-6)\",\"Alphatorquevirus (10^-6)\",\"Ambidensovirus (10^-7)\",\"Betacoronavirus (10^-7)\",\"Betatorquevirus (10^-7)\",\"Cardiovirus (10^-7)\",\"Carjivirus (10^-7)\",\"Cosavirus (10^-7)\",\"Dependoparvovirus (10^-5)\",\"Enterovirus (10^-7)\",\"Gammatorquevirus (10^-6)\",\"Inovirus (10^-7)\",\"Mastadenovirus (10^-6)\",\"Orthopoxvirus (10^-7)\",\"Rotavirus (10^-6)\",\"Sapovirus (10^-7)\",\"Unknown Genus (0)\",\"Alphapapillomavirus 4 (10^-6)\",\"Alphapolyomavirus quintihominis (10^-6)\",\"Alphatorquevirus homin1 (10^-6)\",\"Alphatorquevirus homin10 (10^-6)\",\"Alphatorquevirus homin13 (10^-6)\",\"Alphatorquevirus homin15 (10^-7)\",\"Alphatorquevirus homin17 (10^-7)\",\"Alphatorquevirus homin18 (10^-6)\",\"Alphatorquevirus homin19 (10^-6)\",\"Alphatorquevirus homin20 (10^-6)\",\"Alphatorquevirus homin21 (10^-7)\",\"Alphatorquevirus homin24 (10^-7)\",\"Alphatorquevirus homin29 (10^-7)\",\"Alphatorquevirus homin3 (10^-6)\",\"Alphatorquevirus homin5 (10^-7)\",\"Alphatorquevirus homin6 (10^-6)\",\"Alphatorquevirus homin7 (10^-7)\",\"Alphatorquevirus homin9 (10^-7)\",\"Torque teno virus 11 (10^-7)\",\"Torque teno virus 12 (10^-6)\",\"Torque teno virus 16 (10^-7)\",\"Torque teno virus 22 (10^-6)\",\"Torque teno virus 27 (10^-6)\",\"Torque teno virus 28 (10^-7)\",\"Torque teno virus 8 (10^-8)\",\"Ambidensovirus sp. (10^-7)\",\"Severe acute respiratory syndrome-related coronavirus (10^-7)\",\"Betatorquevirus homini1 (10^-7)\",\"Betatorquevirus homini10 (10^-7)\",\"Betatorquevirus homini12 (10^-7)\",\"Betatorquevirus homini26 (10^-7)\",\"Betatorquevirus homini5 (10^-7)\",\"Betatorquevirus homini6 (10^-7)\",\"Betatorquevirus homini7 (10^-7)\",\"Betatorquevirus homini8 (10^-7)\",\"TTV-like mini virus (10^-7)\",\"Cardiovirus D (10^-7)\",\"CrAssphage ZA (10^-7)\",\"Cosavirus A (10^-7)\",\"Dependoparvovirus primate1 (10^-5)\",\"Enterovirus C (10^-7)\",\"Gammatorquevirus homidi1 (10^-7)\",\"Gammatorquevirus homidi10 (10^-7)\",\"Gammatorquevirus homidi11 (10^-6)\",\"Gammatorquevirus homidi12 (10^-7)\",\"Gammatorquevirus homidi13 (10^-7)\",\"Gammatorquevirus homidi14 (10^-7)\",\"Gammatorquevirus homidi2 (10^-7)\",\"Gammatorquevirus homidi3 (10^-6)\",\"Gammatorquevirus homidi4 (10^-7)\",\"Gammatorquevirus homidi6 (10^-7)\",\"Gammatorquevirus homidi7 (10^-7)\",\"Gammatorquevirus homidi8 (10^-6)\",\"Gammatorquevirus homidi9 (10^-7)\",\"Inovirus D_HF3_19 (10^-7)\",\"Inovirus D_HF5_49 (10^-7)\",\"Human mastadenovirus F (10^-6)\",\"Vaccinia virus (10^-7)\",\"Rotavirus A (10^-6)\",\"Sapporo virus (10^-7)\",\"Anelloviridae sp. (10^-5)\",\"Gokushovirus WZ-2015a (10^-7)\",\"Hudisavirus sp. (10^-7)\",\"Human gut gokushovirus (10^-6)\",\"Micro Torque teno virus (10^-7)\",\"Microviridae sp. (10^-5)\",\"Microvirus sp. (10^-6)\",\"Small anellovirus (10^-7)\",\"Torque teno virus (10^-6)\"]},\"options\":{\"NodeID\":\"name\",\"NodeGroup\":\"name\",\"LinkGroup\":null,\"colourScale\":\"d3.scaleOrdinal(d3.schemeCategory20);\",\"fontSize\":14,\"fontFamily\":null,\"nodeWidth\":25,\"nodePadding\":10,\"units\":\"\",\"margin\":{\"top\":null,\"right\":null,\"bottom\":null,\"left\":null},\"iterations\":32,\"sinksRight\":true}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/d3-4.5.0/d3.min.js\"></script>\n<script src=\"../site_libs/sankey-1/sankey.js\"></script>\n<script src=\"../site_libs/sankeyNetwork-binding-0.4/sankeyNetwork.js\"></script>\n<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}