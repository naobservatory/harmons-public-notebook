{
  "hash": "e59633e6e26c302f28ab6b1e2c69cafa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Workflow of Mengyi et al. (2023)\"\nsubtitle: \"Pooled plasma from China (DNA)\"\nauthor: \"Harmon Bhasin\"\ndate: 2024-07-23\nformat:\n  html:\n    toc: true # table of contents\n    toc-title: \"Table of contents\" # table of contents title\n    number-sections: true # number sections\n    number-depth: 3 # number depth to show in table of contents\n    toc-location: right # table of contents location\n    page-layout: full # full page layout\n    code-fold: true # Keep option to fold code (i.e. show or hide it; default: hide)\n    code-tools: true # Code menu in the header of your document that provides various tools for readers to interact with the source code\n    code-link: true # Enables hyper-linking of functions within code blocks to their online documentation\n    df-print: paged # print data frame\n    fig-format: svg\n    other-links:\n      - text: Paper\n        href: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10372899/\n      - text: Data\n        href: https://bigd.big.ac.cn/gsa/browse/CRA006191\n    code-links:\n      - text: Code for this post\n        icon: file-code\n        href: https://github.com/naobservatory/harmons-public-notebook/blob/main/notebooks/2024-07-23-mengyi.qmd\neditor:\n  visual: true # visual editor\n  render-on-save: true # render on save\ncomments:\n  hypothesis: true # hypothesis\nexecute: \n  freeze: auto\n  cache: true\ntitle-block-banner: \"#de2d26\"\n---\n\n\n\n\n\n\n\n\n\n\nThis one of the studies that we hope to discuss in [our third blog post](https://naobservatory.org/blog/exploring-blood-biosurveillance-part1), which will cover the metagenomic analysis of whole blood/plasma. In this notebook, I analyze [Mengyi 2023](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10372899/), a dataset from China with 201 pools of **plasma**, where each pool contains 160 samples (we don't know whether 1 sample = 1 donation) from 7 different locations, for a total of 10,720 samples. \n\n*I'd like to thank Lenni for giving me feedback on the notebook, Will for providing me with a boilerplate rmarkdown file, and Simon for giving me feedback on my figures. This notebook uses the MGS Workflow v2.2.1 (note that this is old).*\n\n# Raw data\n\n## About \n\n[This dataset](https://bigd.big.ac.cn/gsa/browse/CRA006191) from China has 201 pools of plasma, where each pool contains 160 samples from 7 different locations between 2012-2018, for a total of 10,720 samples. This paper did not discuss the number of individuals that contributed to the samples, but we're going to attempt to contact the authors to get this information (this shouldn't hold up any further analysis, but would be good to have this information). They did DNA-sequencing for each pool, with Illumina HiSeq 4500, producing 2x150 bp reads.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import libraries and extract metadata from sample names\nlibraries <- read_csv(libraries_path, show_col_types = FALSE)\nmetadata <- read_tsv(sprintf('%s/metadata.tsv', data_dir), show_col_types = FALSE) %>%\n  select('sample'=`Library`, `library`=`Sample title`, 'Geographic location') %>%\n  mutate('location' = str_split(`Geographic location`, \":\", simplify = TRUE)[, ncol(str_split(`Geographic location`, \":\", simplify = TRUE))])\nlibraries <- libraries %>%\n  left_join(metadata, by = 'sample') %>%\n  select(sample, library=library.y, location) %>%\n  mutate(library = factor(library))\n\nlibraries %>% group_by(location) %>% summarize(n_pools = n())\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"location\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n_pools\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Chongqing\",\"2\":\"21\"},{\"1\":\"Dehong,Mangshi\",\"2\":\"15\"},{\"1\":\"Guangxi,Liuzhou\",\"2\":\"30\"},{\"1\":\"Heilongjiang,Mudanjiang\",\"2\":\"39\"},{\"1\":\"Jiangsu,Nanjing\",\"2\":\"36\"},{\"1\":\"Sichuan,Mianyang\",\"2\":\"30\"},{\"1\":\"Xinjiang,Urumqi\",\"2\":\"30\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n### Sample + library preparation\nThe following excerpt from the paper describes the sample and library preparation process. It's crucial to note that while blood samples were initially collected from volunteers, these samples were converted to plasma through ultracentrifugation prior to sequencing:\n\n> From January 1, 2012, to December 31, 2018, a total of 10,720 blood samples of 10 ml each were randomly selected from voluntary blood donors in 7 regions. The blood samples taken from various places were mixed in units of 160 (each 100 μl) for ultracentrifugation (32,000 rpm, 120 min, maximum centrifugal radius of 91.9 mm). Afterward, we rinsed and resuspended the precipitate with 500 μl PBS.\n>\n> The pooled suspensions were subjected to extraction of total DNA using QIAamp® DNA Blood mini Kit (QIAGEN Cat. NO.160019269, Frankfurt, Germany), DNA concentration was measured by Equalbit® 1 × dsDNA HS Assay Kit (Vazyme Cat. NO. 7E302K9, Nanjing, China).\n>\n> The metagenomic library was constructed using KAPA HyperPlus Kit (KAPA Cat. NO. 0000097583, Boston, USA) with dual-indexed Adapters (KAPA Cat. NO. 0000093370, Boston, USA), the DNA was fragmented to 250 bp approximately by the enzyme at 37 °C for 20 min, after end repair and A-tailing, adapter ligation, post-ligation cleanup, library amplification, and post-amplification cleanup, the library was constructed.\n>\n> Agilent 2100 Bioanalyzer (Agilent Technologies, Beijing, China) was used for library quality control, and qualified DNA library was sent to the Novogene company to sequence in HiSeq 4500.\n\n## Quality control metrics\n\n\n\n\n\n\n\n\n\n\nThese 201 samples contained 3.4B read pairs. The samples had 8.2M - 30.1M (mean 17.1M) read pairs each. The number of read pairs and total bases look relatively evenly distributed across the locations. The duplication rate is also quite low, around ~10%. Adapter content is low. As we'd expect, we see higher quality Q scores near the beginning of the read and a gradual decline towards the end of the read, however all positions seem to have a Q score of 35 which means that our reads are \\~99.97% accurate. When looking at the Q score over all sequences, we can see a sharp peak after 35, which closely follows the previous plot, indicating high read quality.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare data\nbasic_stats_raw_metrics <- basic_stats_raw %>%\n  select(library,\n         location,\n         `# Read pairs` = n_read_pairs,\n         `Total base pairs\\n(approx)` = n_bases_approx,\n         `% Duplicates\\n(FASTQC)` = percent_duplicates) %>%\n  pivot_longer(-(library:location), names_to = \"metric\", values_to = \"value\") %>%\n  mutate(metric = fct_inorder(metric)) \n\n# Set up plot templates\n\ng_basic <- ggplot(basic_stats_raw_metrics, aes(x = library, y = value, fill=location)) +\n  geom_col(position = \"dodge\") +\n  scale_x_discrete() +\n  scale_fill_brewer(palette = \"Dark2\") +\n  scale_y_continuous(expand = c(0, 0)) +\n  expand_limits(y = c(0, 100)) +\n  facet_grid(metric ~ ., scales = \"free\", space = \"free_x\", switch = \"y\") +\n  theme_kit + theme(\n    axis.title.y = element_blank(),\n    strip.text.y = element_text(face = \"plain\"),\n    axis.text.x = element_blank()\n  )\ng_basic\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-basic-stats-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up plotting templates\ng_qual_raw <- ggplot(mapping=aes(color = location, linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  scale_color_brewer(palette = \"Dark2\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters_raw <- g_qual_raw + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats_raw) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,5),\n                     expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0)) +\n  facet_grid(.~adapter)\ng_adapters_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-raw-quality-1.svg)\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base_raw <- g_qual_raw +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats_raw) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0))\ng_quality_base_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-raw-quality-2.svg)\n:::\n\n```{.r .cell-code}\ng_quality_seq_raw <- g_qual_raw +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats_raw) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0))\ng_quality_seq_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-raw-quality-3.svg)\n:::\n:::\n\n\n\n\n# Preprocessing\n\n## Summary\n\nThe average fraction of reads at each stage in the preprocessing pipeline is shown in the following table. Reads lost during trimming and filtering approximately matches what we'd expect based on the raw adapter content. Deduplication loses us about 10% of reads which matched the amount of estimated duplicated reads by QC. Low ribodepletion is observed which makes sense because they only sequenced DNA.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# TODO: Group by pool size as well\n# Count read losses\nn_reads_rel <- basic_stats %>% \n  select(sample,location, stage, percent_duplicates, n_read_pairs) %>%\n  group_by(sample) %>% \n  arrange(sample, stage) %>%\n  mutate(p_reads_retained = n_read_pairs / lag(n_read_pairs),\n         p_reads_lost = 1 - p_reads_retained,\n         p_reads_retained_abs = n_read_pairs / n_read_pairs[1],\n         p_reads_lost_abs = 1-p_reads_retained_abs,\n         p_reads_lost_abs_marginal = p_reads_lost_abs - lag(p_reads_lost_abs))\nn_reads_rel_display <- n_reads_rel %>% \n  rename(Stage=stage) %>% \n  group_by(Stage) %>% \n  summarize(`% Total Reads Lost (Cumulative)` = paste0(round(min(p_reads_lost_abs*100),1), \"-\", round(max(p_reads_lost_abs*100),1), \" (mean \", round(mean(p_reads_lost_abs*100),1), \")\"),\n            `% Total Reads Lost (Marginal)` = paste0(round(min(p_reads_lost_abs_marginal*100),1), \"-\", round(max(p_reads_lost_abs_marginal*100),1), \" (mean \", round(mean(p_reads_lost_abs_marginal*100),1), \")\"), .groups=\"drop\") %>% \n  filter(Stage != \"raw_concat\") %>%\n  mutate(Stage = Stage %>% as.numeric %>% factor(labels=c(\"Trimming & filtering\", \"Deduplication\", \"Initial ribodepletion\", \"Secondary ribodepletion\")))\nn_reads_rel_display\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Stage\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Cumulative)\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Marginal)\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Trimming & filtering\",\"2\":\"0.9-3.4 (mean 1.8)\",\"3\":\"0.9-3.4 (mean 1.8)\"},{\"1\":\"Deduplication\",\"2\":\"10.9-24.5 (mean 15.2)\",\"3\":\"9.3-23.6 (mean 13.5)\"},{\"1\":\"Initial ribodepletion\",\"2\":\"11-24.5 (mean 15.3)\",\"3\":\"0-0.1 (mean 0.1)\"},{\"1\":\"Secondary ribodepletion\",\"2\":\"11-24.5 (mean 15.3)\",\"3\":\"0-0.1 (mean 0)\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Quality control metrics\n\nTrimming and cleaning gets rid of the Illumina adapter as well as polyg, and we see a decrease in polya. Q score remain the same during read cleaning when looking at the positions, with the end of the read actually improving in score. Q scores across all sequences look pretty much the same throughout cleaning.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_qual <- ggplot(mapping=aes(color = location, linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  scale_color_brewer(palette = \"Dark2\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters <- g_qual + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,5),\n                     expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~adapter)\ng_adapters\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-quality-1.svg)\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base <- g_qual +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~.)\ng_quality_base\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-quality-2.svg)\n:::\n\n```{.r .cell-code}\ng_quality_seq <- g_qual +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0)) +\n  facet_grid(stage~., scales = \"free_y\")\ng_quality_seq\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-quality-3.svg)\n:::\n:::\n\n\n\n\nNumber of read pairs look reasonable, same with a large portion being lost during deduplication. At the end of deduplication it seems that only 5% of reads are duplicates which doesn't seem too bad. Mean read length stays around 150 bp which is pretty good.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_stage_trace <- ggplot(basic_stats, aes(x=stage, group=sample, color = location)) +\n  theme_kit +\n  scale_color_brewer(palette = \"Dark2\")\n# Plot reads over preprocessing\ng_reads_stages <- g_stage_trace +\n  geom_line(aes(y=n_read_pairs)) +\n  scale_y_continuous(\"# Read pairs\", expand=c(0,0), limits=c(0,NA))\ng_reads_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/preproc-figures-1.svg)\n:::\n\n```{.r .cell-code}\n# Plot relative read losses during preprocessing\ng_reads_rel <- ggplot(n_reads_rel, \n                      aes(x=stage, group=sample, color = location)) +\n  geom_line(aes(y=p_reads_lost_abs_marginal)) +\n  scale_y_continuous(\"% Total Reads Lost\", expand=c(0,0), \n                     labels = function(x) x*100) +\n  scale_color_brewer(palette = \"Dark2\") +\n  theme_kit\ng_reads_rel\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/preproc-figures-2.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstage_dup <- basic_stats %>% group_by(stage) %>% \n  summarize(dmin = min(percent_duplicates), dmax=max(percent_duplicates),\n            dmean=mean(percent_duplicates), .groups = \"drop\")\n\ng_dup_stages <- g_stage_trace +\n  geom_line(aes(y=percent_duplicates)) +\n  scale_y_continuous(\"% Duplicates\", limits=c(0,NA), expand=c(0,0))\ng_dup_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/preproc-dedup-1.svg)\n:::\n:::\n\n::: {.cell .caption-margin}\n\n```{.r .cell-code}\ng_readlen_stages <- g_stage_trace + geom_line(aes(y=mean_seq_len)) +\n  scale_y_continuous(\"Mean read length (nt)\", expand=c(0,0), limits=c(0,NA))\ng_readlen_stages\n```\n\n::: {.cell-output-display}\n![Reminder that this data is 2x150 bp.](2024-07-23-mengyi_files/figure-html/preproc-mean-readlen-1.svg)\n:::\n:::\n\n\n\n\n# Taxonomic composition\n\n## High-level composition\n\nTo assess the high-level composition of the reads, I ran the files through Kraken2 and summarized the results with Bracken.\n\nThe groups listed below were created by Will:\n\n* Filtered (removed during cleaning)\n* Duplicate (removed during deduplication)\n* Ribosomal (removed during ribodepletion)\n* Unassigned (non-ribosomal reads that were not assigned to any taxon by Kraken/Bracken)\n* Bacterial (non-ribosomal reads assigned to the Bacteria domain by Kraken/Bracken)\n* Archaeal (non-ribosomal reads assigned to the Archaea domain by Kraken/Bracken)\n* Viral (non-ribosomal reads assigned to the Viruses domain by Kraken/Bracken)\n* Human (non-ribosomal reads assigned to the Eukarya domain by Kraken/Bracken)\n\nHuman reads make up a large proportion of all reads at 82% total composition, whereas viruses only account for 0.01% of all reads.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclassifications <- c(\"Filtered\", \"Duplicate\", \"Ribosomal\", \"Unassigned\",\n                     \"Bacterial\", \"Archaeal\", \"Viral\", \"Human\")\n\n# Import composition data\ntax_final_dir <- file.path(results_dir, \"taxonomy_final\")\ncomp <- read_tsv(sprintf(\"%s/taxonomic_composition.tsv.gz\", tax_final_dir)) %>% \n  inner_join(libraries, by='sample')\n\ncomp_minor <- comp %>% \n  filter(classification %in% c(\"Archaeal\", \"Viral\", \"Human\", \"Other\"))\ncomp_assigned <- comp %>%\n  filter(! classification %in% c(\"Filtered\", \"Duplicate\", \n                                 \"Ribosomal\", \"Unassigned\")) %>%\n  group_by(sample) %>%\n  mutate(p_reads = n_reads/sum(n_reads))\ncomp_assigned_minor <- comp_assigned %>% \n  filter(classification %in% c(\"Archaeal\", \"Viral\", \"Human\", \"Other\"))\n\n# Summarize composition\nread_comp_summ <- comp %>% \n  group_by(classification) %>%\n  summarize(n_reads = sum(n_reads), .groups = \"drop_last\") %>%\n  mutate(n_reads = replace_na(n_reads,0),\n         p_reads = n_reads/sum(n_reads),\n         pc_reads = p_reads*100) %>%\n  mutate(classification = factor(classification, levels=classifications)) %>%\n  select(classification, n_reads, pc_reads) %>%\n  rename(`# of reads` = n_reads, \"% of reads\" = pc_reads) %>%\n  mutate(`% of reads` = sprintf(\"%.2f\", `% of reads`))\nread_comp_summ\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"classification\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"# of reads\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"% of reads\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Archaeal\",\"2\":\"27877\",\"3\":\"0.00\"},{\"1\":\"Bacterial\",\"2\":\"7731190\",\"3\":\"0.22\"},{\"1\":\"Duplicate\",\"2\":\"468108063\",\"3\":\"13.62\"},{\"1\":\"Filtered\",\"2\":\"59464986\",\"3\":\"1.73\"},{\"1\":\"Human\",\"2\":\"2858732231\",\"3\":\"83.19\"},{\"1\":\"Ribosomal\",\"2\":\"3032786\",\"3\":\"0.09\"},{\"1\":\"Unassigned\",\"2\":\"38835019\",\"3\":\"1.13\"},{\"1\":\"Viral\",\"2\":\"378247\",\"3\":\"0.01\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare plotting templates\ng_comp_base <- ggplot(mapping=aes(x=library, y=p_reads, fill=classification)) +\n  scale_x_discrete(name=\"Plasma pool\") +\n  theme_kit + \n  theme(plot.title = element_text(hjust=0, face=\"plain\", size=rel(1.5)),\n        axis.text.x = element_blank())\n\nscale_y_pc_reads <- purrr::partial(scale_y_continuous, name = \"% Reads\",\n                                   expand = c(0,0), labels = function(y) y*100)\ngeom_comp <- purrr::partial(geom_col, position = \"stack\", width = 1)\n\n# Define a color palette for the classification\nclassification_colors <- brewer.pal(8, \"Accent\")\nnames(classification_colors) <- c(\"Filtered\", \"Duplicate\", \"Ribosomal\", \"Unassigned\", \"Bacterial\", \"Archaeal\", \"Viral\", \"Human\")\nscale_fill_classification <- function() {\n  scale_fill_manual(values = classification_colors, name = \"Classification\")\n}\n\n# Plot overall composition\ng_comp <- g_comp_base + geom_comp(data = comp) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_classification() + \n  ggtitle(\"Read composition (all reads, all groups)\")\ng_comp\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-composition-all-1.svg)\n:::\n\n```{.r .cell-code}\n# Create a faceted plot of composition by location\n#g_comp_by_location <- g_comp_base +\n#  geom_comp(data = comp) +\n#  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n#  scale_fill_classification() +\n#  facet_wrap(~ location, scales = \"free_x\", ncol = 2) +\n#  theme(axis.text.x = element_blank(),  # Remove x-axis labels\n#        axis.ticks.x = element_blank()) +  # Remove x-axis ticks\n#  ggtitle(\"Read composition (all reads, all groups)\")\n\n# Display the plot\n#g_comp_by_location\n\n# Repeat for classified reads only\ng_comp_assigned <- g_comp_base + \n  geom_comp(data = comp_assigned) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_classification() + \n  ggtitle(\"Read composition (assigned reads, all groups)\")\ng_comp_assigned\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-composition-all-2.svg)\n:::\n\n```{.r .cell-code}\n# Plot composition of minor components\n#g_comp_minor <- g_comp_base + \n#  geom_comp(data=comp_minor) +\n#  scale_y_pc_reads() +\n#  scale_fill_classification() + \n#  ggtitle(\"Read composition (all reads, minor groups)\")\n#g_comp_minor\n#g_comp_assigned_minor <- g_comp_base + \n#  geom_comp(data=comp_assigned_minor) +\n#  scale_y_pc_reads() +\n#  scale_fill_classification() + \n#  ggtitle(\"Read composition (assigned reads, minor groups)\")\n#g_comp_assigned_minor\n```\n:::\n\n\n\n\n## Total viral content\n\nTotal viral fraction average $1.03 \\times 10^{-4}$ across samples. As a fraction of assigned (rather than total) reads, this jumped to $1.28 \\times 10^{-4}$. The increase in viral fraction from assigned reads to total reads was constant across all samples, however, we can see that the viral fractions differed by location. Note that one of the pools from \"Heilongjiang,Mudanjiang\" had no viral reads.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#p_reads_viral_all <- comp %>% filter(classification == \"Viral\") %>%\n#  mutate(read_group = \"All reads\")\np_reads_viral_assigned <- comp_assigned %>% filter(classification == \"Viral\") %>%\n  mutate(read_group = \"Classified reads\")\n#p_reads_viral <- bind_rows(p_reads_viral_all, p_reads_viral_assigned)\n\nlocation_viral <- comp_assigned %>% filter(classification == \"Viral\" ) %>% group_by(location) \n\n# Plot\n# g_viral <- ggplot(p_reads_viral, aes(x=p_reads, y=library, color=location, shape=read_group)) +\n#   geom_point() +\n#   scale_y_discrete(name=\"Plasma pool\") +\n#   scale_x_log10(name=\"Viral read fraction\") +\n#   scale_color_brewer(palette = \"Dark2\") +\n#   #facet_grid(.~read_group, scales = \"free\") +\n#   guides(color=guide_legend(nrow=2), shape=guide_legend(nrow=2),\n#          linetype=guide_legend(nrow=2)) +\n#   theme_kit\n\n#ggplot(location_viral, aes(x=p_reads, y=location, color = location)) +\n#  geom_quasirandom(size=2) +\n#  scale_x_log10(name=\"Viral read fraction\", labels = label_log(digits=2)) +\n#  scale_y_discrete(name=\"Location\") +\n#  scale_color_brewer(palette = \"Dark2\") +\n#  theme_light() + \n#    theme(\n#    axis.text.y = element_text(size = 8),\n#    axis.text.x = element_text(size = 14),\n#    axis.ticks.y = element_blank(),\n#    axis.line = element_line(colour = \"black\"),\n#    axis.title.x = element_text(size = 15),    \n#    axis.title.y = element_text(size = 15),  \n#    legend.text = element_text(size = 13),\n#    legend.title = element_text(size = 16),\n#    legend.position = c(1, 1),  # Move legend to top right\n##    legend.justification = c(1, 1),  # Align legend to top right\n#    panel.grid.minor = element_blank(),\n#    panel.border = element_blank(),\n#    panel.background = element_blank())\n\n# Calculate the number of samples per location\nlocation_counts <- location_viral %>%\n  group_by(location) %>%\n  summarise(count = n()) %>%\n  mutate(label = paste0(location, \" (n=\", count, \")\"))\n\n# Create a named vector for easy mapping\nlocation_labels <- setNames(location_counts$label, location_counts$location)\n\ng_viral <- ggplot(location_viral, aes(x=location, y=p_reads, fill=location)) +\n  geom_violin(trim=FALSE) +\n  geom_boxplot(width=0.1, fill=\"white\", color=\"black\", outlier.shape=NA) +\n  geom_jitter(width=0.1, size=0.5, alpha=0.5) +\n  scale_y_log10(name=\"Viral read fraction\", labels = label_log(digits=2)) +\n  scale_x_discrete(name=\"Location\", labels = location_labels) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  labs(title=\"Total viral fraction based on assigned reads over all locations\") +\n  theme_light() + \n  theme(\n    axis.text.y = element_text(size = 12),\n    axis.text.x = element_text(size = 12, angle = 45, hjust = 1),\n    axis.title.x = element_text(size = 15),    \n    axis.title.y = element_text(size = 15),  \n    legend.position = \"none\",\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.background = element_blank()\n  ) +\n  theme_kit +\n  coord_flip()  # This flips the coordinates to make the plot horizontal\n\ng_viral\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/p-viral-scatter-1.svg)\n:::\n:::\n\n\n\n\n## Taxonomic composition of viruses\n\nThe threshold for the label \"other\" are the set of families that make up less than 20% composition in all samples (the only reason I did this was because there were too many matches). We can see that other makes up a big portion of the viral composition. Outside of the \"other\" label, Hepadnaviridae makes up the largest portion of the viral composition.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmajor_threshold <- 0.20\n\n# Identify major viral families\nviral_families_major_tab <- viral_families %>% \n  group_by(name, taxid) %>%\n  summarize(p_reads_viral_max = max(p_reads_viral), .groups=\"drop\") %>%\n  filter(p_reads_viral_max >= major_threshold)\nviral_families_major_list <- viral_families_major_tab %>% pull(name)\nviral_families_major <- viral_families %>% \n  filter(name %in% viral_families_major_list) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_minor <- viral_families_major %>% \n  group_by(sample) %>%\n  summarize(p_reads_viral_major = sum(p_reads_viral), .groups = \"drop\") %>%\n  mutate(name = \"Other\", taxid=NA, p_reads_viral = 1-p_reads_viral_major) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_display <- viral_families_major %>% \n  bind_rows(viral_families_minor) %>%\n  arrange(desc(p_reads_viral)) %>% \n  mutate(name = factor(name, levels=c(viral_families_major_list, \"Other\"))) %>%\n  rename(p_reads = p_reads_viral, classification=name) %>%\n  inner_join(libraries, by='sample')\n\n# Create a custom color palette with up to 20 colors\ncustom_palette <- c(\n  brewer.pal(12, \"Paired\"),\n  brewer.pal(12, \"Set3\")\n)\n\nn_classifications <- length(unique(viral_families_display$classification)) - 1\n\ncustom_palette_with_black <- c(\n  custom_palette[1:n_classifications],\n  \"black\"\n)\n\n# Create a new color palette with black for \"Other\"\ncustom_palette_with_black <- c(\n  custom_palette[1:n_classifications],\n  \"black\"\n)\n\n# Plot\ng_families <- g_comp_base + \n  geom_comp(data=viral_families_display) +\n  scale_y_continuous(name=\"% Viral Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_manual(values = custom_palette_with_black) +\n  facet_wrap(~ location, scales = \"free_x\", ncol = 2) \ng_families\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/viral-family-composition-1.svg)\n:::\n:::\n\n\n\n\n# Human-infecting virus reads\n\n## Overall relative abundance\n\nI calculated the relative abundance of human-infecting viruses in two ways:\n\n-   First, as the total number of deduplicated human-virus reads in each sample, divided by the number of raw reads (\"All reads\"). This results in a viral fraction of $9.84 \\times 10^{-5}$ across all samples.\n\n-   Second, as a fraction of preprocessed (cleaned, deduplicated, computationally ribodepleted) reads (\"Preprocessed reads\"). This results in a viral fraction of $1.18 \\times 10^{-4}$ across all samples.\n\nNote that 10 of the pools had no viral reads: 5 from \"Heilongjiang, Mudanjiang\", 4 from \"Jiangsu, Nanjing\", and 1 from \"Xinjiang, Urmqi\".\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get raw read counts\nread_counts_raw <- filter(basic_stats_raw) %>%\n  select(sample, n_reads_raw = n_read_pairs)\nread_counts_preproc <- basic_stats %>% filter(stage == \"ribo_initial\") %>%\n  select(sample, n_reads_preproc = n_read_pairs)\n\n# Get HV read counts\nread_counts_hv <- mrg_hv %>% filter(hv_status) %>% \n  group_by(sample) %>% \n  count(name=\"n_reads_hv\")\nread_counts <- read_counts_raw %>%\n  left_join(read_counts_hv, by=c(\"sample\")) %>%\n  mutate(n_reads_hv = replace_na(n_reads_hv, 0)) %>%\n  left_join(read_counts_preproc, by=c(\"sample\")) %>%\n  inner_join(libraries, by=c(\"sample\")) %>%\n  select(sample, n_reads_raw, n_reads_preproc, n_reads_hv) %>%\n  mutate(n_samples = 1,\n         p_reads_total = n_reads_hv/n_reads_raw,\n         p_reads_preproc = n_reads_hv/n_reads_preproc)\nread_counts_long <- read_counts %>%\n  pivot_longer(starts_with(\"p_reads\"), names_to=\"read_group\", values_to=\"p_reads\") %>%\n  mutate(read_group = ifelse(read_group == \"p_reads_total\", \"All reads\", \"Preprocessed reads\"))\n\n# Combine for display\nread_counts_agg <- read_counts %>%\n  mutate(p_reads_total = n_reads_hv/n_reads_raw,\n         p_reads_preproc = n_reads_hv/n_reads_preproc) %>%\n  inner_join(libraries, by=c(\"sample\"))\nread_counts_agg_long <- read_counts_agg %>%\n  pivot_longer(starts_with(\"p_reads\"), names_to=\"read_group\", values_to=\"p_reads\") %>%\n  mutate(read_group = ifelse(read_group == \"p_reads_total\", \"All reads\", \"Preprocessed reads\")) \n\n# Visualize\n#g_read_counts <- ggplot(read_counts_agg_long, aes(x=library, y=p_reads)) +\n#  geom_point() +\n#  scale_y_log10(name = \"Unique human-viral read fraction\") +\n#  facet_grid(.~read_group, scales = \"free\") +\n#  theme_kit\n#g_read_counts\n\n#g_viral <- ggplot(read_counts_agg_long, aes(x=p_reads, y=library, color=location, shape=read_group)) +\n#  geom_point() +\n#  scale_y_discrete(name=\"Plasma pool\") +\n#  scale_x_log10(name=\"Viral read fraction\") +\n#  scale_color_brewer(palette = \"Dark2\") +\n#  facet_grid(.~read_group, scales = \"free\") +\n#  guides(color=guide_legend(nrow=2), shape=guide_legend(nrow=2),\n#         linetype=guide_legend(nrow=2)) +\n#  theme_kit\n#g_viral\n\nhv_location <- read_counts_agg_long %>% filter(read_group == \"Preprocessed reads\" ) %>% group_by(location) \n\nhv_location_counts <- hv_location %>%\n  group_by(location) %>%\n  summarise(count = n()) %>%\n  mutate(label = paste0(location, \" (n=\", count, \")\"))\n\n  # Create a named vector for easy mapping\nlocation_labels <- setNames(hv_location_counts$label, hv_location_counts$location)\n\n# Create a named vector for easy mapping\n# Plot\n# g_viral <- ggplot(p_reads_viral, aes(x=p_reads, y=library, color=location, shape=read_group)) +\n#   geom_point() +\n#   scale_y_discrete(name=\"Plasma pool\") +\n#   scale_x_log10(name=\"Viral read fraction\") +\n#   scale_color_brewer(palette = \"Dark2\") +\n#   #facet_grid(.~read_group, scales = \"free\") +\n#   guides(color=guide_legend(nrow=2), shape=guide_legend(nrow=2),\n#          linetype=guide_legend(nrow=2)) +\n#   theme_kit\n\n#ggplot(location_viral, aes(x=p_reads, y=location, color = location)) +\n#  geom_quasirandom(size=2) +\n#  scale_x_log10(name=\"Viral read fraction\", labels = label_log(digits=2)) +\n#  scale_y_discrete(name=\"Location\") +\n#  scale_color_brewer(palette = \"Dark2\") +\n#  theme_light() + \n#    theme(\n#    axis.text.y = element_text(size = 8),\n#    axis.text.x = element_text(size = 14),\n#    axis.ticks.y = element_blank(),\n#    axis.line = element_line(colour = \"black\"),\n#    axis.title.x = element_text(size = 15),    \n#    axis.title.y = element_text(size = 15),  \n#    legend.text = element_text(size = 13),\n#    legend.title = element_text(size = 16),\n#    legend.position = c(1, 1),  # Move legend to top right\n##    legend.justification = c(1, 1),  # Align legend to top right\n#    panel.grid.minor = element_blank(),\n#    panel.border = element_blank(),\n#    panel.background = element_blank())\n\ng_viral <- ggplot(hv_location, aes(x=location, y=p_reads, fill=location)) +\n  geom_violin(trim=FALSE) +\n  geom_boxplot(width=0.1, fill=\"white\", color=\"black\", outlier.shape=NA) +\n  geom_jitter(width=0.1, size=0.5, alpha=0.5) +\n  scale_y_log10(name=\"Viral read fraction\", labels = label_log(digits=2)) +\n  scale_x_discrete(name=\"Location\", labels = location_labels) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  theme_light() + \n  theme(\n    axis.text.y = element_text(size = 12),\n    axis.text.x = element_text(size = 12, angle = 45, hjust = 1),\n    axis.title.x = element_text(size = 15),    \n    axis.title.y = element_text(size = 15),  \n    legend.position = \"none\",\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.background = element_blank()\n  ) +\n  theme_kit +\n  coord_flip()  # This flips the coordinates to make the plot horizontal\n\ng_viral\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/count-hv-reads-1.svg)\n:::\n:::\n\n\n\n\n## Overall taxonomy and composition\n\nThe two dominant viruses we see are Anellovirdae and Hepadnaviridae, with Parvoviridae . The threshold for the label \"other\" are the set of families that make up less than 5% composition in all samples.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthreshold_major_family <- 0.05\n\n# Count reads for each human-viral family\nhv_family_counts <- hv_reads_family %>% \n  group_by(sample, name, taxid) %>%\n  count(name = \"n_reads_hv\") %>%\n  group_by(sample) %>%\n  mutate(p_reads_hv = n_reads_hv/sum(n_reads_hv))\n\n# Identify high-ranking families and group others\nhv_family_major_tab <- hv_family_counts %>% group_by(name) %>% \n  filter(p_reads_hv == max(p_reads_hv)) %>% filter(row_number() == 1) %>%\n  arrange(desc(p_reads_hv)) %>% filter(p_reads_hv > threshold_major_family)\nhv_family_counts_major <- hv_family_counts %>%\n  mutate(name_display = ifelse(name %in% hv_family_major_tab$name, name, \"Other\")) %>%\n  group_by(sample, name_display) %>%\n  summarize(n_reads_hv = sum(n_reads_hv), p_reads_hv = sum(p_reads_hv), \n            .groups=\"drop\") %>%\n  mutate(name_display = factor(name_display, \n                               levels = c(hv_family_major_tab$name, \"Other\")))\nhv_family_counts_display <- hv_family_counts_major %>%\n  rename(p_reads = p_reads_hv, classification = name_display) %>%\n  inner_join(libraries, by = 'sample')\n\n# Plot\ng_hv_family <- g_comp_base + \n  geom_col(data=hv_family_counts_display, position = \"stack\", width=1) +\n  scale_y_continuous(name=\"% HV Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_brewer(palette = \"Set1\", name = \"Viral family\") +\n\n  labs(title=\"Family composition of human-viral reads\") +\n  guides(fill=guide_legend(ncol=4)) +\n  theme(plot.title = element_text(size=rel(1.4), hjust=0, face=\"plain\")) +  \n  facet_wrap(~ location, scales = \"free_x\", ncol = 2) \ng_hv_family\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/hv-family-1.svg)\n:::\n\n```{.r .cell-code}\n# Get most prominent families for text\nhv_family_collate <- hv_family_counts %>%\n  group_by(name, taxid) %>% \n  summarize(n_reads_tot = sum(n_reads_hv),\n            p_reads_max = max(p_reads_hv), .groups=\"drop\") %>% \n  arrange(desc(n_reads_tot))\ndisplay_hv_family_collate <- hv_family_collate %>%\n  select(name, n_reads_tot) %>%\n  rename(`Family` = name, `Total number of reads` = n_reads_tot)\ndisplay_hv_family_collate\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Family\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Total number of reads\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Hepadnaviridae\",\"2\":\"339427\"},{\"1\":\"Parvoviridae\",\"2\":\"17401\"},{\"1\":\"Anelloviridae\",\"2\":\"3001\"},{\"1\":\"Orthoherpesviridae\",\"2\":\"298\"},{\"1\":\"Retroviridae\",\"2\":\"115\"},{\"1\":\"Microviridae\",\"2\":\"61\"},{\"1\":\"Adenoviridae\",\"2\":\"28\"},{\"1\":\"Coronaviridae\",\"2\":\"2\"},{\"1\":\"Poxviridae\",\"2\":\"2\"},{\"1\":\"Caudovirus D_HF5_3\",\"2\":\"1\"},{\"1\":\"Flaviviridae\",\"2\":\"1\"},{\"1\":\"Papillomaviridae\",\"2\":\"1\"},{\"1\":\"Paramyxoviridae\",\"2\":\"1\"},{\"1\":\"Polyomaviridae\",\"2\":\"1\"},{\"1\":\"Rhabdoviridae\",\"2\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n## Analyzing specific families\n\nWe now investigate the composition of specific families that had more than 5 viral reads. In investigating individual viral families, to avoid distortions from a few rare reads, I restricted myself to samples where that family made up at least 10% of human-viral reads:\n\n\n\n\n\n\n\n\n\n### Hepadnaviridae (Number of reads: 339,427)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hepadnaviridae\nplot_viral_family_histogram(taxid_chosen=10404)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-hepadnaviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hepadnaviridae\nplot_viral_family_composition(taxid_chosen=10404, threshold_major_species = 0.1)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-hepadnaviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n### Parvoviridae (Number of reads: 17,401)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Parvoviridae\nplot_viral_family_histogram(taxid_chosen=10780)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-parvoviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Parvoviridae\nplot_viral_family_composition(taxid_chosen=10780, threshold_major_species = 0.1)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-parvoviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n### Anelloviridae (Number of reads: 3001)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Anelloviridae\nplot_viral_family_histogram(taxid_chosen=687329)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-anelloviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Anelloviridae\nplot_viral_family_composition(taxid_chosen=687329, threshold_major_species = 0.1)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-anelloviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n### Orthoherpesviridae (Number of reads: 298)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Orthoherpesviridae\nplot_viral_family_histogram(taxid_chosen=3044472)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-orthoherpesviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Orthoherpesviridae\nplot_viral_family_composition(taxid_chosen=3044472, threshold_major_species = 0.1)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-orthoherpesviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n### Retroviridae (Number of reads: 115)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retroviridae\nplot_viral_family_histogram(taxid_chosen=11632)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-retroviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retroviridae\nplot_viral_family_composition(taxid_chosen=11632, threshold_major_species = 0.1)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-retroviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n### Microviridae (Number of reads: 61)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Microviridae\nplot_viral_family_histogram(taxid_chosen=10841)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-microviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Microviridae\nplot_viral_family_composition(taxid_chosen=10841, threshold_major_species = 0.1)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-microviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n### Adenoviridae (Number of reads: 28)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adenoviridae\nplot_viral_family_histogram(taxid_chosen=10508)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-adenoviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adenoviridae\nplot_viral_family_composition(taxid_chosen=10508, threshold_major_species = 0.1)\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-adenoviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n## Relative abundance of pathogenic viruses of interest\n\n\n\n\n\n\n\n\n\n\n\nEach dot represents a sample, colored by viral family. The x-axis shows the relative abundance of human-infecting viruses, and the y-axis shows the species.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_family <- result %>% select(species, family) %>% rename('name' = 'species')\n\nplay <- hv_species_counts %>% \n  ungroup() %>%\n  inner_join(libraries, by = 'sample') %>%\n  inner_join(species_family, by = 'name') %>%\n  mutate(name = ifelse(name == \"Severe acute respiratory syndrome-related coronavirus\", \"SARS-related coronavirus\", name)) %>%\n  filter(!(family %in% c(\"Anelloviridae\", NA, \"Microviridae\", \"Rhabdoviridae\"))) \n\nadjusted_play <- play %>% \n  group_by(name) %>%\n  mutate(virus_prevalence_num = n_distinct(sample)/n_distinct(libraries),\n         total_reads_hv = sum(n_reads_hv)) %>%\n  ungroup() %>%\n  mutate(name = fct_reorder(name, virus_prevalence_num, .desc=TRUE)) %>% \n  select(name, ra_reads_hv, family, location, virus_prevalence_num, total_reads_hv, n_reads_hv)\n\npal <- c(brewer.pal(8, 'Dark2'),brewer.pal(8, 'Accent'))\n\n#, labels = label_log(digits=2)\n\nra_dot <- ggplot(adjusted_play, aes(x = ra_reads_hv, y=name)) +\n  geom_quasirandom(orientation = 'y', aes(color = family)) +\n  scale_color_manual(values = pal) + \n    scale_x_log10(\n    \"Relative abundance human virus reads\",\n    labels=label_log(digits=3)\n  ) +\n  labs(y =  \"\",\n       color = 'Viral family') + \n  guides(color = guide_legend(ncol=2)) +\n  theme_light() + \n    theme(\n    axis.text.y = element_text(size = 10),\n    axis.text.x = element_text(size = 12),\n    axis.ticks.y = element_blank(),axis.line = element_line(colour = \"black\"),\n    axis.title.x = element_text(size = 14),    \n    legend.text = element_text(size = 10),\n    legend.title = element_text(size = 10, face=\"bold\"),\n    legend.position = 'bottom',\n    #legend.position = c(1, 1),  # Move legend to top right\n    #legend.justification = c(1, 1),  # Align legend to top right\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.background = element_blank())\nra_dot\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-pathogenic-viruses-1.svg)\n:::\n\n```{.r .cell-code}\n#  geom_text(aes(label = total_reads_hv, y = name), \n#            x = 1e-9, hjust = 0, vjust = 0.5, size = 3, \n#            check_overlap = TRUE)\n```\n:::\n\n\n\n\n\nWe can ask Claude to analyze the pathogenicity of these viruses  along with their popular names.\n\n\n| Scientific Name | Popular/Well-known Name | Pathogenicity to Humans |\n|-----------------|-------------------------|-------------------------|\n| Human immunodeficiency virus 1 | HIV-1 | Very High |\n| SARS-related coronavirus | SARS-CoV | High |\n| Hepatitis B virus | HBV | High |\n| Hepacivirus hominis | Hepatitis C virus (HCV) | High |\n| Simplexvirus humanalpha1 | Herpes simplex virus 1 (HSV-1) | Moderate to High |\n| Cytomegalovirus humanbeta5 | Human cytomegalovirus (HCMV) | Moderate to High |\n| Lymphocryptovirus humangamma4 | Epstein-Barr virus (EBV) | Moderate |\n| Human mastadenovirus C | Adenovirus C | Moderate |\n| Human mastadenovirus F | Adenovirus F | Moderate |\n| Roseolovirus humanbeta6a | Human herpesvirus 6A (HHV-6A) | Low to Moderate |\n| Roseolovirus humanbeta6b | Human herpesvirus 6B (HHV-6B) | Low to Moderate |\n| Roseolovirus humanbeta7 | Human herpesvirus 7 (HHV-7) | Low to Moderate |\n| Rhadinovirus humangamma8 | Kaposi's sarcoma-associated herpesvirus (KSHV) | Low to Moderate |\n| Molluscum contagiosum virus | MCV | Low |\n| Erythroparvovirus primate1 | Parvovirus B19 | Low |\n| Human erythrovirus V9 | Erythrovirus V9 | Low |\n| Alphapapillomavirus 4 | Human papillomavirus 4 (HPV-4) | Low |\n| Betapolyomavirus hominis | Human polyomavirus | Low |\n| Dependoparvovirus primate1 | Adeno-associated virus (AAV) | Very Low |\n| Murine leukemia virus | MLV | Very Low (not a human pathogen) |\n| Murine leukemia-related retroviruses | MLV-related viruses | Very Low (not typical human pathogens) |\n\nWe get a variety of pathogenic viruses, none of which are a suprise to see in plasma (other than SARS-CoV which we determined was contamination [on twist](https://twist.com/a/197793/ch/619193/t/6323010/)).\n\n## Relative abundance assuming perfect human read removal\n\n\n\n\n\n\n\n\nAssuming we're able to perfectly remove all human reads, the average relative abundance of known human infecting virus is $5.37 \\times 10^{-4}$.\n\n# Conclusion\n\nThere were some interesting takeways from this analysis:\n\n1. Human read fraction remains quite high in plasma if special sample preparation/library preparation is not taken (see [here](https://pubmed.ncbi.nlm.nih.gov/33767340/)).\n2. There is a lot of Anelloviridae in blood, including that which has not been classified by species.\n3. Pathogenic viruses such as HIV and HBV, and even latent viruses like Herpes are picked up by plasma MGS\n4. Respiratory viruses are also picked up by plasma MGS (SARS), but not as much as other viruses.\n\n*We do note that we've analyzed other datasets and it seems that having a large catchment is crucial, as we'd expect, for picking up these more rare, pathogenic viruses*. Using this data, we can also look at China's HIV/HBV reported incidence to do a P2RA/swab sampling type analysis. We plan to do more analysis on this data, but wanted to share some preliminary results.\n\n\n# Appendix\n\n## Human-infecting virus families, genera, and species\n\nTo get a good overview of families, genera, and species, we can look at a Sankey plot where the magnitude of relative abundance, averaged over all samples, is shown in parentheses.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to create links\ncreate_links <- function(data) {\n  family_to_genus <- data %>%\n    filter(!is.na(genus)) %>%\n    group_by(family, genus) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = family, target = genus)\n  \n  genus_to_species <- data %>%\n    group_by(genus, species) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = genus, target = species)\n\n  family_to_species <- data %>%\n    filter(is.na(genus)) %>%\n    group_by(family, species) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = family, target = species)\n\n  bind_rows(family_to_genus, genus_to_species, family_to_species) %>%\n    filter(!is.na(source))\n}\n\n# Function to create nodes\ncreate_nodes <- function(links) {\n  data.frame(\n    name = c(links$source, links$target) %>% unique()\n  )\n}\n\n# Function to prepare data for Sankey diagram\nprepare_sankey_data <- function(links, nodes) {\n  links$IDsource <- match(links$source, nodes$name) - 1\n  links$IDtarget <- match(links$target, nodes$name) - 1\n  list(links = links, nodes = nodes)\n}\n\n# Function to create Sankey plot\ncreate_sankey_plot <- function(sankey_data) {\n  sankeyNetwork(\n    Links = sankey_data$links, \n    Nodes = sankey_data$nodes,\n    Source = \"IDsource\", \n    Target = \"IDtarget\",\n    Value = \"value\", \n    NodeID = \"name\",\n    sinksRight = TRUE,\n    nodeWidth = 25,\n    fontSize = 14,\n  )\n}\n\nsave_sankey_as_png <- function(sankey_plot, width = 1000, height = 800) {\n  # Save the plot as an HTML file\n  saveWidget(sankey_plot, sprintf('%s/sankey.html',data_dir))\n}\n\nformat_scientific <- function(x, digits=2) {\n  sapply(x, function(val) {\n    if (is.na(val) || abs(val) < 1e-15) {\n      return(\"0\")\n    } else {\n      exponent <- floor(log10(abs(val)))\n      coef <- val / 10^exponent\n      #return(sprintf(\"%.1f × 10^%d\", round(coef, digits), exponent))\n      # May or may not be smart, just keeping magnitude\n      return(sprintf(\"10^%d\", exponent))\n    }\n  })\n}\n\ndata <- result %>% \n  mutate(across(c(genus_n_reads_tot, genus_ra_reads_tot), ~replace_na(., 0)),\n         genus = ifelse(is.na(genus), \"Unknown Genus\", genus)) %>%\n  mutate(\n  species = paste0(species, sprintf(' (%s)', format_scientific(species_ra_reads_tot))),\n  genus = paste0(genus, sprintf(' (%s)', format_scientific(genus_ra_reads_tot))),\n  family = paste0(family, sprintf(' (%s)', format_scientific(family_ra_reads_tot)))\n)\nlinks <- as.data.frame(create_links(data))\nnodes <- create_nodes(links)\nsankey_data <- prepare_sankey_data(links, nodes)\nsankey <- create_sankey_plot(sankey_data)\n\nsankey\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-ac1f7e7e5c990ca74b39\" style=\"width:100%;height:1462px;\" class=\"sankeyNetwork html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ac1f7e7e5c990ca74b39\">{\"x\":{\"links\":{\"source\":[0,1,1,1,1,2,3,4,5,6,7,7,7,7,7,8,9,10,10,11,12,13,13,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,18,19,19,19,19,19,20,21,22,22,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,26,26,27,28,28,29,30,31,32,33,33,33,34,35,35,35,35,35,35,35,35,35,35,36],\"target\":[28,16,19,24,35,17,25,30,35,35,20,27,32,33,34,15,31,21,22,18,29,23,26,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111],\"value\":[2,22,5,14,4,1,1,1,4,1,1,1,1,3,1,1,1,1,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},\"nodes\":{\"name\":[\"Adenoviridae (10^-7)\",\"Anelloviridae (10^-6)\",\"Coronaviridae (10^-8)\",\"Flaviviridae (10^-8)\",\"Hepadnaviridae (10^-4)\",\"Microviridae (10^-7)\",\"NA (0)\",\"Orthoherpesviridae (10^-7)\",\"Papillomaviridae (10^-8)\",\"Paramyxoviridae (10^-8)\",\"Parvoviridae (10^-5)\",\"Polyomaviridae (10^-8)\",\"Poxviridae (10^-8)\",\"Retroviridae (10^-7)\",\"Rhabdoviridae (10^-8)\",\"Alphapapillomavirus (10^-8)\",\"Alphatorquevirus (10^-7)\",\"Betacoronavirus (10^-8)\",\"Betapolyomavirus (10^-8)\",\"Betatorquevirus (10^-8)\",\"Cytomegalovirus (10^-8)\",\"Dependoparvovirus (10^-8)\",\"Erythroparvovirus (10^-5)\",\"Gammaretrovirus (10^-8)\",\"Gammatorquevirus (10^-7)\",\"Hepacivirus (10^-8)\",\"Lentivirus (10^-7)\",\"Lymphocryptovirus (10^-7)\",\"Mastadenovirus (10^-7)\",\"Molluscipoxvirus (10^-8)\",\"Orthohepadnavirus (10^-4)\",\"Orthorubulavirus (10^-8)\",\"Rhadinovirus (10^-8)\",\"Roseolovirus (10^-7)\",\"Simplexvirus (10^-7)\",\"Unknown Genus (0)\",\"Vesiculovirus (10^-8)\",\"Alphapapillomavirus 4 (10^-8)\",\"Alphatorquevirus homin1 (10^-8)\",\"Alphatorquevirus homin10 (10^-7)\",\"Alphatorquevirus homin13 (10^-8)\",\"Alphatorquevirus homin15 (10^-8)\",\"Alphatorquevirus homin17 (10^-8)\",\"Alphatorquevirus homin18 (10^-8)\",\"Alphatorquevirus homin19 (10^-8)\",\"Alphatorquevirus homin20 (10^-8)\",\"Alphatorquevirus homin21 (10^-8)\",\"Alphatorquevirus homin24 (10^-8)\",\"Alphatorquevirus homin29 (10^-8)\",\"Alphatorquevirus homin3 (10^-8)\",\"Alphatorquevirus homin5 (10^-8)\",\"Alphatorquevirus homin7 (10^-8)\",\"Alphatorquevirus homin9 (10^-7)\",\"Torque teno virus 11 (10^-8)\",\"Torque teno virus 12 (10^-8)\",\"Torque teno virus 16 (10^-8)\",\"Torque teno virus 22 (10^-8)\",\"Torque teno virus 27 (10^-8)\",\"Torque teno virus 28 (10^-8)\",\"Torque teno virus 8 (10^-8)\",\"Severe acute respiratory syndrome-related coronavirus (10^-8)\",\"Betapolyomavirus hominis (10^-8)\",\"Betatorquevirus homini1 (10^-8)\",\"Betatorquevirus homini5 (10^-8)\",\"Betatorquevirus homini6 (10^-8)\",\"Betatorquevirus homini7 (10^-8)\",\"TTV-like mini virus (10^-8)\",\"Cytomegalovirus humanbeta5 (10^-8)\",\"Dependoparvovirus primate1 (10^-8)\",\"Erythroparvovirus primate1 (10^-5)\",\"Human erythrovirus V9 (10^-7)\",\"Murine leukemia virus (10^-8)\",\"Murine leukemia-related retroviruses (10^-8)\",\"Gammatorquevirus homidi1 (10^-8)\",\"Gammatorquevirus homidi10 (10^-8)\",\"Gammatorquevirus homidi11 (10^-8)\",\"Gammatorquevirus homidi12 (10^-8)\",\"Gammatorquevirus homidi13 (10^-8)\",\"Gammatorquevirus homidi14 (10^-8)\",\"Gammatorquevirus homidi2 (10^-8)\",\"Gammatorquevirus homidi3 (10^-8)\",\"Gammatorquevirus homidi4 (10^-8)\",\"Gammatorquevirus homidi5 (10^-8)\",\"Gammatorquevirus homidi6 (10^-8)\",\"Gammatorquevirus homidi7 (10^-8)\",\"Gammatorquevirus homidi8 (10^-7)\",\"Gammatorquevirus homidi9 (10^-8)\",\"Hepacivirus hominis (10^-8)\",\"Human immunodeficiency virus (10^-8)\",\"Human immunodeficiency virus 1 (10^-7)\",\"Lymphocryptovirus humangamma4 (10^-7)\",\"Human mastadenovirus C (10^-7)\",\"Human mastadenovirus F (10^-7)\",\"Molluscum contagiosum virus (10^-8)\",\"Hepatitis B virus (10^-4)\",\"Orthorubulavirus mammalis (10^-8)\",\"Rhadinovirus humangamma8 (10^-8)\",\"Roseolovirus humanbeta6a (10^-7)\",\"Roseolovirus humanbeta6b (10^-7)\",\"Roseolovirus humanbeta7 (10^-8)\",\"Simplexvirus humanalpha1 (10^-7)\",\"Anelloviridae sp. (10^-7)\",\"Caudovirus D_HF5_3 (10^-8)\",\"Gokushovirus WZ-2015a (10^-8)\",\"Human endogenous retrovirus K (10^-8)\",\"Human gut gokushovirus (10^-8)\",\"Micro Torque teno virus (10^-8)\",\"Microviridae sp. (10^-7)\",\"Microvirus sp. (10^-8)\",\"Small anellovirus (10^-8)\",\"Torque teno virus (10^-7)\",\"Vesiculovirus indiana (10^-8)\"],\"group\":[\"Adenoviridae (10^-7)\",\"Anelloviridae (10^-6)\",\"Coronaviridae (10^-8)\",\"Flaviviridae (10^-8)\",\"Hepadnaviridae (10^-4)\",\"Microviridae (10^-7)\",\"NA (0)\",\"Orthoherpesviridae (10^-7)\",\"Papillomaviridae (10^-8)\",\"Paramyxoviridae (10^-8)\",\"Parvoviridae (10^-5)\",\"Polyomaviridae (10^-8)\",\"Poxviridae (10^-8)\",\"Retroviridae (10^-7)\",\"Rhabdoviridae (10^-8)\",\"Alphapapillomavirus (10^-8)\",\"Alphatorquevirus (10^-7)\",\"Betacoronavirus (10^-8)\",\"Betapolyomavirus (10^-8)\",\"Betatorquevirus (10^-8)\",\"Cytomegalovirus (10^-8)\",\"Dependoparvovirus (10^-8)\",\"Erythroparvovirus (10^-5)\",\"Gammaretrovirus (10^-8)\",\"Gammatorquevirus (10^-7)\",\"Hepacivirus (10^-8)\",\"Lentivirus (10^-7)\",\"Lymphocryptovirus (10^-7)\",\"Mastadenovirus (10^-7)\",\"Molluscipoxvirus (10^-8)\",\"Orthohepadnavirus (10^-4)\",\"Orthorubulavirus (10^-8)\",\"Rhadinovirus (10^-8)\",\"Roseolovirus (10^-7)\",\"Simplexvirus (10^-7)\",\"Unknown Genus (0)\",\"Vesiculovirus (10^-8)\",\"Alphapapillomavirus 4 (10^-8)\",\"Alphatorquevirus homin1 (10^-8)\",\"Alphatorquevirus homin10 (10^-7)\",\"Alphatorquevirus homin13 (10^-8)\",\"Alphatorquevirus homin15 (10^-8)\",\"Alphatorquevirus homin17 (10^-8)\",\"Alphatorquevirus homin18 (10^-8)\",\"Alphatorquevirus homin19 (10^-8)\",\"Alphatorquevirus homin20 (10^-8)\",\"Alphatorquevirus homin21 (10^-8)\",\"Alphatorquevirus homin24 (10^-8)\",\"Alphatorquevirus homin29 (10^-8)\",\"Alphatorquevirus homin3 (10^-8)\",\"Alphatorquevirus homin5 (10^-8)\",\"Alphatorquevirus homin7 (10^-8)\",\"Alphatorquevirus homin9 (10^-7)\",\"Torque teno virus 11 (10^-8)\",\"Torque teno virus 12 (10^-8)\",\"Torque teno virus 16 (10^-8)\",\"Torque teno virus 22 (10^-8)\",\"Torque teno virus 27 (10^-8)\",\"Torque teno virus 28 (10^-8)\",\"Torque teno virus 8 (10^-8)\",\"Severe acute respiratory syndrome-related coronavirus (10^-8)\",\"Betapolyomavirus hominis (10^-8)\",\"Betatorquevirus homini1 (10^-8)\",\"Betatorquevirus homini5 (10^-8)\",\"Betatorquevirus homini6 (10^-8)\",\"Betatorquevirus homini7 (10^-8)\",\"TTV-like mini virus (10^-8)\",\"Cytomegalovirus humanbeta5 (10^-8)\",\"Dependoparvovirus primate1 (10^-8)\",\"Erythroparvovirus primate1 (10^-5)\",\"Human erythrovirus V9 (10^-7)\",\"Murine leukemia virus (10^-8)\",\"Murine leukemia-related retroviruses (10^-8)\",\"Gammatorquevirus homidi1 (10^-8)\",\"Gammatorquevirus homidi10 (10^-8)\",\"Gammatorquevirus homidi11 (10^-8)\",\"Gammatorquevirus homidi12 (10^-8)\",\"Gammatorquevirus homidi13 (10^-8)\",\"Gammatorquevirus homidi14 (10^-8)\",\"Gammatorquevirus homidi2 (10^-8)\",\"Gammatorquevirus homidi3 (10^-8)\",\"Gammatorquevirus homidi4 (10^-8)\",\"Gammatorquevirus homidi5 (10^-8)\",\"Gammatorquevirus homidi6 (10^-8)\",\"Gammatorquevirus homidi7 (10^-8)\",\"Gammatorquevirus homidi8 (10^-7)\",\"Gammatorquevirus homidi9 (10^-8)\",\"Hepacivirus hominis (10^-8)\",\"Human immunodeficiency virus (10^-8)\",\"Human immunodeficiency virus 1 (10^-7)\",\"Lymphocryptovirus humangamma4 (10^-7)\",\"Human mastadenovirus C (10^-7)\",\"Human mastadenovirus F (10^-7)\",\"Molluscum contagiosum virus (10^-8)\",\"Hepatitis B virus (10^-4)\",\"Orthorubulavirus mammalis (10^-8)\",\"Rhadinovirus humangamma8 (10^-8)\",\"Roseolovirus humanbeta6a (10^-7)\",\"Roseolovirus humanbeta6b (10^-7)\",\"Roseolovirus humanbeta7 (10^-8)\",\"Simplexvirus humanalpha1 (10^-7)\",\"Anelloviridae sp. (10^-7)\",\"Caudovirus D_HF5_3 (10^-8)\",\"Gokushovirus WZ-2015a (10^-8)\",\"Human endogenous retrovirus K (10^-8)\",\"Human gut gokushovirus (10^-8)\",\"Micro Torque teno virus (10^-8)\",\"Microviridae sp. (10^-7)\",\"Microvirus sp. (10^-8)\",\"Small anellovirus (10^-8)\",\"Torque teno virus (10^-7)\",\"Vesiculovirus indiana (10^-8)\"]},\"options\":{\"NodeID\":\"name\",\"NodeGroup\":\"name\",\"LinkGroup\":null,\"colourScale\":\"d3.scaleOrdinal(d3.schemeCategory20);\",\"fontSize\":14,\"fontFamily\":null,\"nodeWidth\":25,\"nodePadding\":10,\"units\":\"\",\"margin\":{\"top\":null,\"right\":null,\"bottom\":null,\"left\":null},\"iterations\":32,\"sinksRight\":true}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/d3-4.5.0/d3.min.js\"></script>\n<script src=\"../site_libs/sankey-1/sankey.js\"></script>\n<script src=\"../site_libs/sankeyNetwork-binding-0.4/sankeyNetwork.js\"></script>\n<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}