{
  "hash": "ada691382d17bb84cd04ae1432143ac8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Workflow of Mengyi et al. (2023)\"\nsubtitle: \"Pooled plasma from China (DNA)\"\nauthor: \"Harmon Bhasin\"\ndate: 2024-07-23\nformat:\n  html:\n    page-layout: full\n    code-fold: true\n    code-tools: true\n    code-link: true\n    df-print: paged\nexecute: \n  freeze: auto\n  cache: true\neditor: visual\ntitle-block-banner: \"#de2d26\"\n---\n\n\n\n\n\n\n\nThis is another potential study of [this series](https://data.securebio.org/harmons-public-notebook/notebooks/2024-07-08_cebria-mendoza.html). In this post, I analyze [Mengyi 2023](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10372899/), a dataset with 200 pooled samples from ~10k samples of blood.\n\n# The raw data\n\n## About\n\n[This dataset](https://bigd.big.ac.cn/gsa/browse/CRA006191) is composed of 200 samples which come from plasma pools of 160 random blood samples from seven different locations in China between 2012-2018. In total, there were 10,720 blood samples (they do not list number of people). They did DNA sequencing for each sample.\n\n### Sample + library preparation\nFrom January 1, 2012, to December 31, 2018, a total of 10,720 blood samples of 10 ml each were randomly selected from voluntary blood donors in 7 regions (the distribution of sampling location and a corresponding number of samples are shown in the Fig. 1). The blood samples taken from various places were mixed in units of 160 (each 100 μl) for ultracentrifugation (32,000 rpm, 120 min, maximum centrifugal radius of 91.9 mm). Afterward, we rinsed and resuspended the precipitate with 500 μl PBS.\n\nThe pooled suspensions were subjected to extraction of total DNA using QIAamp® DNA Blood mini Kit (QIAGEN Cat. NO.160019269, Frankfurt, Germany), DNA concentration was measured by Equalbit® 1 × dsDNA HS Assay Kit (Vazyme Cat. NO. 7E302K9, Nanjing, China).\n\nThe metagenomic library was constructed using KAPA HyperPlus Kit (KAPA Cat. NO. 0000097583, Boston, USA) with dual-indexed Adapters (KAPA Cat. NO. 0000093370, Boston, USA), the DNA was fragmented to 250 bp approximately by the enzyme at 37 °C for 20 min, after end repair and A-tailing, adapter ligation, post-ligation cleanup, library amplification, and post-amplification cleanup, the library was constructed.\n\nAgilent 2100 Bioanalyzer (Agilent Technologies, Beijing, China) was used for library quality control, and qualified DNA library was sent to the Novogene company to sequence in HiSeq 4500.\n\n## Quality control\n\nIn total, these 200 samples contained 3.4B read pairs. The samples had 8.2M - 30.1M (mean 17.1M) read pairs each.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNumber of read pairs, total bases and % of duplicates all look good.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare data\nbasic_stats_raw_metrics <- basic_stats_raw %>%\n  select(library,\n         location,\n         `# Read pairs` = n_read_pairs,\n         `Total base pairs\\n(approx)` = n_bases_approx,\n         `% Duplicates\\n(FASTQC)` = percent_duplicates) %>%\n  pivot_longer(-(library:location), names_to = \"metric\", values_to = \"value\") %>%\n  mutate(metric = fct_inorder(metric)) \n\n# Set up plot templates\n\ng_basic <- ggplot(basic_stats_raw_metrics, aes(x = library, y = value, fill=location)) +\n  geom_col(position = \"dodge\") +\n  scale_x_discrete() +\n  scale_fill_brewer(palette = \"Accent\") +\n  scale_y_continuous(expand = c(0, 0)) +\n  expand_limits(y = c(0, 100)) +\n  facet_grid(metric ~ ., scales = \"free\", space = \"free_x\", switch = \"y\") +\n  theme_kit + theme(\n    axis.title.y = element_blank(),\n    strip.text.y = element_text(face = \"plain\")\n  )\ng_basic\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-basic-stats-1.png){width=1440}\n:::\n:::\n\n\n\n\n\nAdapter content is low. As we'd expect, we see higher quality Q scores near the beginning of the read and a gradual decline towards the end of the read, however all positions seem to have a Q score of 35 which means that our reads are \\~99.97% accurate. When looking at the Q score over all sequences, we can see a sharp peak after 35, which closely follows the previous plot, indicating high read quality.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up plotting templates\ng_qual_raw <- ggplot(mapping=aes(linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters_raw <- g_qual_raw + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats_raw) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,5),\n                     expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0)) +\n  facet_grid(.~adapter)\ng_adapters_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-raw-quality-1.png){width=1440}\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base_raw <- g_qual_raw +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats_raw) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0))\ng_quality_base_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-raw-quality-2.png){width=1440}\n:::\n\n```{.r .cell-code}\ng_quality_seq_raw <- g_qual_raw +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats_raw) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0))\ng_quality_seq_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-raw-quality-3.png){width=1440}\n:::\n:::\n\n\n\n\n\n# Preprocessing\n\n## High-level metrics\n\nThe average fraction of reads at each stage in the preprocessing pipeline is shown in the following table. Reads lost during trimming and filtering approximately matches what we'd expect based on the raw adapter content.  Deduplication loses us about 10% of reads which matched the amount of estimated duplicated reads by QC. Very little ribodepletion was observed which makes sense because this is DNA(?).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# TODO: Group by pool size as well\n# Count read losses\nn_reads_rel <- basic_stats %>% \n  select(sample, stage, percent_duplicates, n_read_pairs) %>%\n  group_by(sample) %>% \n  arrange(sample, stage) %>%\n  mutate(p_reads_retained = n_read_pairs / lag(n_read_pairs),\n         p_reads_lost = 1 - p_reads_retained,\n         p_reads_retained_abs = n_read_pairs / n_read_pairs[1],\n         p_reads_lost_abs = 1-p_reads_retained_abs,\n         p_reads_lost_abs_marginal = p_reads_lost_abs - lag(p_reads_lost_abs))\nn_reads_rel_display <- n_reads_rel %>% \n  rename(Stage=stage) %>% \n  group_by(Stage) %>% \n  summarize(`% Total Reads Lost (Cumulative)` = paste0(round(min(p_reads_lost_abs*100),1), \"-\", round(max(p_reads_lost_abs*100),1), \" (mean \", round(mean(p_reads_lost_abs*100),1), \")\"),\n            `% Total Reads Lost (Marginal)` = paste0(round(min(p_reads_lost_abs_marginal*100),1), \"-\", round(max(p_reads_lost_abs_marginal*100),1), \" (mean \", round(mean(p_reads_lost_abs_marginal*100),1), \")\"), .groups=\"drop\") %>% \n  filter(Stage != \"raw_concat\") %>%\n  mutate(Stage = Stage %>% as.numeric %>% factor(labels=c(\"Trimming & filtering\", \"Deduplication\", \"Initial ribodepletion\", \"Secondary ribodepletion\")))\nn_reads_rel_display\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Stage\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Cumulative)\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Marginal)\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Trimming & filtering\",\"2\":\"0.9-3.4 (mean 1.8)\",\"3\":\"0.9-3.4 (mean 1.8)\"},{\"1\":\"Deduplication\",\"2\":\"10.9-24.5 (mean 15.2)\",\"3\":\"9.3-23.6 (mean 13.5)\"},{\"1\":\"Initial ribodepletion\",\"2\":\"11-24.5 (mean 15.3)\",\"3\":\"0-0.1 (mean 0.1)\"},{\"1\":\"Secondary ribodepletion\",\"2\":\"11-24.5 (mean 15.3)\",\"3\":\"0-0.1 (mean 0)\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\nThese plots below show the trends from above in each sample.\n\nTrimming and cleaning gets rid of Illumnia unviersal adapter as well as polyg. Q score remain the same during read cleaning when looking at the positions, with the end of the read actually improving in score. Q scores across all sequences look pretty much the same throughout cleaning.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_qual <- ggplot(mapping=aes(linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters <- g_qual + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,5),\n                     expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~adapter)\ng_adapters\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-quality-1.png){width=1440}\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base <- g_qual +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~.)\ng_quality_base\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-quality-2.png){width=1440}\n:::\n\n```{.r .cell-code}\ng_quality_seq <- g_qual +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0)) +\n  facet_grid(stage~., scales = \"free_y\")\ng_quality_seq\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-quality-3.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng_stage_trace <- ggplot(basic_stats, aes(x=stage, group=sample)) +\n  theme_kit\n\n# Plot reads over preprocessing\ng_reads_stages <- g_stage_trace +\n  geom_line(aes(y=n_read_pairs)) +\n  scale_y_continuous(\"# Read pairs\", expand=c(0,0), limits=c(0,NA))\ng_reads_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/preproc-figures-1.png){width=1440}\n:::\n\n```{.r .cell-code}\n# Plot relative read losses during preprocessing\ng_reads_rel <- ggplot(n_reads_rel, \n                      aes(x=stage, group=sample)) +\n  geom_line(aes(y=p_reads_lost_abs_marginal)) +\n  scale_y_continuous(\"% Total Reads Lost\", expand=c(0,0), \n                     labels = function(x) x*100) +\n  theme_kit\ng_reads_rel\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/preproc-figures-2.png){width=1440}\n:::\n:::\n\n\n\n\n\nAll samples tend to follow similar trends for deduplication, with a large decrease in read length post adapter trimming.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstage_dup <- basic_stats %>% group_by(stage) %>% \n  summarize(dmin = min(percent_duplicates), dmax=max(percent_duplicates),\n            dmean=mean(percent_duplicates), .groups = \"drop\")\n\ng_dup_stages <- g_stage_trace +\n  geom_line(aes(y=percent_duplicates)) +\n  scale_y_continuous(\"% Duplicates\", limits=c(0,NA), expand=c(0,0))\ng_dup_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/preproc-dedup-1.png){width=1440}\n:::\n\n```{.r .cell-code}\ng_readlen_stages <- g_stage_trace + geom_line(aes(y=mean_seq_len)) +\n  scale_y_continuous(\"Mean read length (nt)\", expand=c(0,0), limits=c(0,NA))\ng_readlen_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/preproc-dedup-2.png){width=1440}\n:::\n:::\n\n\n\n\n\nRibosomal reads were quite low, near 0% for every sample.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate reads lost during ribodepletion (approximation for % ribosomal reads)\nreads_ribo <- n_reads_rel %>% \n  filter(stage %in% c(\"dedup\", \"ribo_secondary\")) %>% \n  group_by(sample) %>% \n  summarize(p_reads_ribo=1-n_read_pairs[2]/n_read_pairs[1], .groups = \"drop\") %>%\n  inner_join(libraries, by = 'sample')\nreads_ribo_summ <- reads_ribo %>%\n  group_by(sample) %>%\n  summarize(min=min(p_reads_ribo), max=max(p_reads_ribo),\n            mean=mean(p_reads_ribo), .groups = \"drop\") %>%\n  inner_join(libraries, by = 'sample')\ng_reads_ribo <- ggplot(reads_ribo, \n                       aes(x=library, y=p_reads_ribo)) +\n  geom_point() + \n  scale_y_continuous(name=\"Approx % ribosomal reads\", limits=c(0,1),\n                     breaks=seq(0,1,0.2), expand=c(0,0), labels = function(y) y*100)+\n  theme_kit\ng_reads_ribo\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/ribo-frac-1.png){width=1440}\n:::\n:::\n\n\n\n\n\n# Taxonomic composition\n\n## High-level composition\n\nTo assess the high-level composition of the reads, I ran the ribodepleted files through Kraken2 and summarized the results with Bracken.\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare plotting templates\ng_comp_base <- ggplot(mapping=aes(x=library, y=p_reads, fill=classification)) +\n  scale_x_discrete(name=\"Plasma pool\") +\n  theme_kit + \n  theme(plot.title = element_text(hjust=0, face=\"plain\", size=rel(1.5)))\nscale_y_pc_reads <- purrr::partial(scale_y_continuous, name = \"% Reads\",\n                                   expand = c(0,0), labels = function(y) y*100)\ngeom_comp <- purrr::partial(geom_col, position = \"stack\", width = 1)\n\n# Plot overall composition\ng_comp <- g_comp_base + geom_comp(data = comp) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_brewer(palette = \"Set1\", name = \"Classification\") +\n  ggtitle(\"Read composition (all reads, all groups)\")\ng_comp\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-composition-all-1.png){width=1440}\n:::\n\n```{.r .cell-code}\n# Repeat for classified reads only\npalette_assigned <- brewer.pal(9, \"Set1\")[5:9]\ng_comp_assigned <- g_comp_base + \n  geom_comp(data = comp_assigned) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_manual(values=palette_assigned, name = \"Classification\") +\n  ggtitle(\"Read composition (assigned reads, all groups)\")\ng_comp_assigned\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-composition-all-2.png){width=1440}\n:::\n\n```{.r .cell-code}\n# Plot composition of minor components\npalette_minor <- brewer.pal(9, \"Set1\")[6:9]\ng_comp_minor <- g_comp_base + \n  geom_comp(data=comp_minor) +\n  scale_y_pc_reads() +\n  scale_fill_manual(values=palette_minor, name = \"Classification\") +\n  ggtitle(\"Read composition (all reads, minor groups)\")\ng_comp_minor\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-composition-all-3.png){width=1440}\n:::\n\n```{.r .cell-code}\ng_comp_assigned_minor <- g_comp_base + \n  geom_comp(data=comp_assigned_minor) +\n  scale_y_pc_reads() +\n  scale_fill_manual(values=palette_minor, name = \"Classification\") +\n  ggtitle(\"Read composition (assigned reads, minor groups)\")\ng_comp_assigned_minor\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/plot-composition-all-4.png){width=1440}\n:::\n:::\n\n\n\n\n\n## Total viral content\n\nTotal viral fraction average $1.03 \\times 10^{-4}$ across samples. As a fraction of assigned (rather than total) reads, this jumped to $1.28 \\times 10^{-4}$:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_reads_viral_all <- comp %>% filter(classification == \"Viral\") %>%\n  mutate(read_group = \"All reads\")\np_reads_viral_assigned <- comp_assigned %>% filter(classification == \"Viral\") %>%\n  mutate(read_group = \"Classified reads\")\np_reads_viral <- bind_rows(p_reads_viral_all, p_reads_viral_assigned)\n\n# Plot\ng_viral <- ggplot(p_reads_viral, aes(x=library, y=p_reads)) +\n  geom_point() +\n  scale_x_discrete(name=\"Plasma pool\") +\n  scale_y_log10(name=\"Viral read fraction\") +\n  facet_grid(.~read_group, scales = \"free\") +\n  guides(color=guide_legend(nrow=2), shape=guide_legend(nrow=2),\n         linetype=guide_legend(nrow=2)) +\n  theme_kit\ng_viral\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Transformation introduced infinite values in continuous y-axis\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/p-viral-1.png){width=1440}\n:::\n:::\n\n\n\n\n\n## Taxonomic composition of viruses\n\nThe one dominant viruses we see is Hepadnaviridae. The threshold for the label \"other\" are the set of families that make up less than 20% composition in all samples (the only reason I did this was because there were too many matches).\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmajor_threshold <- 0.20\n\n# Identify major viral families\nviral_families_major_tab <- viral_families %>% \n  group_by(name, taxid) %>%\n  summarize(p_reads_viral_max = max(p_reads_viral), .groups=\"drop\") %>%\n  filter(p_reads_viral_max >= major_threshold)\nviral_families_major_list <- viral_families_major_tab %>% pull(name)\nviral_families_major <- viral_families %>% \n  filter(name %in% viral_families_major_list) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_minor <- viral_families_major %>% \n  group_by(sample) %>%\n  summarize(p_reads_viral_major = sum(p_reads_viral), .groups = \"drop\") %>%\n  mutate(name = \"Other\", taxid=NA, p_reads_viral = 1-p_reads_viral_major) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_display <- viral_families_major %>% \n  bind_rows(viral_families_minor) %>%\n  arrange(desc(p_reads_viral)) %>% \n  mutate(name = factor(name, levels=c(viral_families_major_list, \"Other\"))) %>%\n  rename(p_reads = p_reads_viral, classification=name) %>%\n  inner_join(libraries, by='sample')\n\n# Create a custom color palette with up to 20 colors\ncustom_palette <- c(\n  brewer.pal(8, \"Set2\"),\n  brewer.pal(8, \"Set1\"),\n  brewer.pal(4, \"Pastel1\")\n)\n\n# Plot\ng_families <- g_comp_base + \n  geom_comp(data=viral_families_display) +\n  scale_y_continuous(name=\"% Viral Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_manual(values = custom_palette)\ng_families\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/viral-family-composition-1.png){width=1440}\n:::\n:::\n\n\n\n\n\n# Human-infecting virus reads\n\n## Overall relative abundance\n\nI calculated the relative abundance of human-infecting viruses in two ways:\n\n-   First, as the total number of deduplicated human-virus reads in each sample, divided by the number of raw reads (\"All reads\").\n\n-   Second, as a fraction of preprocessed (cleaned, deduplicated, computationally ribodepleted) reads (\"Preprocessed reads\").\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get raw read counts\nread_counts_raw <- filter(basic_stats_raw) %>%\n  select(sample, n_reads_raw = n_read_pairs)\nread_counts_preproc <- basic_stats %>% filter(stage == \"ribo_initial\") %>%\n  select(sample, n_reads_preproc = n_read_pairs)\n\n# Get HV read counts\nread_counts_hv <- mrg_hv %>% filter(hv_status) %>% \n  group_by(sample) %>% \n  count(name=\"n_reads_hv\")\nread_counts <- read_counts_raw %>%\n  left_join(read_counts_hv, by=c(\"sample\")) %>%\n  mutate(n_reads_hv = replace_na(n_reads_hv, 0)) %>%\n  left_join(read_counts_preproc, by=c(\"sample\")) %>%\n  inner_join(libraries, by=c(\"sample\")) %>%\n  select(sample, n_reads_raw, n_reads_preproc, n_reads_hv) %>%\n  mutate(n_samples = 1,\n         p_reads_total = n_reads_hv/n_reads_raw,\n         p_reads_preproc = n_reads_hv/n_reads_preproc)\nread_counts_long <- read_counts %>%\n  pivot_longer(starts_with(\"p_reads\"), names_to=\"read_group\", values_to=\"p_reads\") %>%\n  mutate(read_group = ifelse(read_group == \"p_reads_total\", \"All reads\", \"Preprocessed reads\"))\n\n# Combine for display\nread_counts_agg <- read_counts %>%\n  mutate(p_reads_total = n_reads_hv/n_reads_raw,\n         p_reads_preproc = n_reads_hv/n_reads_preproc) %>%\n  inner_join(libraries, by=c(\"sample\"))\nread_counts_agg_long <- read_counts_agg %>%\n  pivot_longer(starts_with(\"p_reads\"), names_to=\"read_group\", values_to=\"p_reads\") %>%\n  mutate(read_group = ifelse(read_group == \"p_reads_total\", \"All reads\", \"Preprocessed reads\")) \n\n# Visualize\ng_read_counts <- ggplot(read_counts_agg_long, aes(x=library, y=p_reads)) +\n  geom_point() +\n  scale_y_log10(name = \"Unique human-viral read fraction\") +\n  facet_grid(.~read_group, scales = \"free\") +\n  theme_kit\ng_read_counts\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/count-hv-reads-1.png){width=1440}\n:::\n:::\n\n\n\n\n\n## Overall taxonomy and composition\n\nComposition of HV reads was changed from when looking at all viral reads. The two dominant viruses we see are Anellovirdae and Hepadnaviridae. The threshold for the label \"other\" are the set of families that make up less than 5% composition in all samples.\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthreshold_major_family <- 0.05\n\n# Count reads for each human-viral family\nhv_family_counts <- hv_reads_family %>% \n  group_by(sample, name, taxid) %>%\n  count(name = \"n_reads_hv\") %>%\n  group_by(sample) %>%\n  mutate(p_reads_hv = n_reads_hv/sum(n_reads_hv))\n\n# Identify high-ranking families and group others\nhv_family_major_tab <- hv_family_counts %>% group_by(name) %>% \n  filter(p_reads_hv == max(p_reads_hv)) %>% filter(row_number() == 1) %>%\n  arrange(desc(p_reads_hv)) %>% filter(p_reads_hv > threshold_major_family)\nhv_family_counts_major <- hv_family_counts %>%\n  mutate(name_display = ifelse(name %in% hv_family_major_tab$name, name, \"Other\")) %>%\n  group_by(sample, name_display) %>%\n  summarize(n_reads_hv = sum(n_reads_hv), p_reads_hv = sum(p_reads_hv), \n            .groups=\"drop\") %>%\n  mutate(name_display = factor(name_display, \n                               levels = c(hv_family_major_tab$name, \"Other\")))\nhv_family_counts_display <- hv_family_counts_major %>%\n  rename(p_reads = p_reads_hv, classification = name_display) %>%\n  inner_join(libraries, by = 'sample')\n\n# Create a custom color palette with up to 20 colors\ncustom_palette <- c(\n  brewer.pal(8, \"Set2\"),\n  brewer.pal(8, \"Set1\"),\n  brewer.pal(4, \"Pastel1\")\n)\n\n# Plot\ng_hv_family <- g_comp_base + \n  geom_col(data=hv_family_counts_display, position = \"stack\", width=1) +\n  scale_y_continuous(name=\"% HV Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_manual(values = custom_palette, name = \"Viral family\") +\n  labs(title=\"Family composition of human-viral reads\") +\n  guides(fill=guide_legend(ncol=4)) +\n  theme(plot.title = element_text(size=rel(1.4), hjust=0, face=\"plain\"))\ng_hv_family\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/hv-family-1.png){width=1440}\n:::\n\n```{.r .cell-code}\n# Get most prominent families for text\nhv_family_collate <- hv_family_counts %>%\n  group_by(name, taxid) %>% \n  summarize(n_reads_tot = sum(n_reads_hv),\n            p_reads_max = max(p_reads_hv), .groups=\"drop\") %>% \n  arrange(desc(n_reads_tot))\nhv_family_collate\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"taxid\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"n_reads_tot\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"p_reads_max\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Hepadnaviridae\",\"2\":\"10404\",\"3\":\"339416\",\"4\":\"1.000000000\"},{\"1\":\"Parvoviridae\",\"2\":\"10780\",\"3\":\"17394\",\"4\":\"0.998330551\"},{\"1\":\"Anelloviridae\",\"2\":\"687329\",\"3\":\"2917\",\"4\":\"1.000000000\"},{\"1\":\"Orthoherpesviridae\",\"2\":\"3044472\",\"3\":\"261\",\"4\":\"0.956521739\"},{\"1\":\"Retroviridae\",\"2\":\"11632\",\"3\":\"112\",\"4\":\"0.535714286\"},{\"1\":\"Microviridae\",\"2\":\"10841\",\"3\":\"59\",\"4\":\"0.151515152\"},{\"1\":\"Adenoviridae\",\"2\":\"10508\",\"3\":\"28\",\"4\":\"0.384615385\"},{\"1\":\"Coronaviridae\",\"2\":\"11118\",\"3\":\"2\",\"4\":\"0.001005025\"},{\"1\":\"Poxviridae\",\"2\":\"10240\",\"3\":\"2\",\"4\":\"0.032258065\"},{\"1\":\"Caudovirus D_HF5_3\",\"2\":\"3071197\",\"3\":\"1\",\"4\":\"0.001246883\"},{\"1\":\"Flaviviridae\",\"2\":\"11050\",\"3\":\"1\",\"4\":\"0.000119460\"},{\"1\":\"Papillomaviridae\",\"2\":\"151340\",\"3\":\"1\",\"4\":\"0.037037037\"},{\"1\":\"Polyomaviridae\",\"2\":\"151341\",\"3\":\"1\",\"4\":\"0.010204082\"},{\"1\":\"Rhabdoviridae\",\"2\":\"11270\",\"3\":\"1\",\"4\":\"0.041666667\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n\n## Species analysis\n\n\n\n\n\n\n\n\n\n\nTo get a good overview of families, genera, and species, we can look at a Sankey plot where the magnitude of relative abundance, averaged over all samples, is shown in parentheses.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to create links\ncreate_links <- function(data) {\n  family_to_genus <- data %>%\n    filter(!is.na(genus)) %>%\n    group_by(family, genus) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = family, target = genus)\n  \n  genus_to_species <- data %>%\n    group_by(genus, species) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = genus, target = species)\n\n  family_to_species <- data %>%\n    filter(is.na(genus)) %>%\n    group_by(family, species) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = family, target = species)\n\n  bind_rows(family_to_genus, genus_to_species, family_to_species) %>%\n    filter(!is.na(source))\n}\n\n# Function to create nodes\ncreate_nodes <- function(links) {\n  data.frame(\n    name = c(links$source, links$target) %>% unique()\n  )\n}\n\n# Function to prepare data for Sankey diagram\nprepare_sankey_data <- function(links, nodes) {\n  links$IDsource <- match(links$source, nodes$name) - 1\n  links$IDtarget <- match(links$target, nodes$name) - 1\n  list(links = links, nodes = nodes)\n}\n\n# Function to create Sankey plot\ncreate_sankey_plot <- function(sankey_data) {\n  sankeyNetwork(\n    Links = sankey_data$links, \n    Nodes = sankey_data$nodes,\n    Source = \"IDsource\", \n    Target = \"IDtarget\",\n    Value = \"value\", \n    NodeID = \"name\",\n    sinksRight = TRUE,\n    nodeWidth = 25,\n    fontSize = 14,\n  )\n}\n\nsave_sankey_as_png <- function(sankey_plot, width = 1000, height = 800) {\n  # Save the plot as an HTML file\n  saveWidget(sankey_plot, sprintf('%s/sankey.html',data_dir))\n}\n\nformat_scientific <- function(x, digits=2) {\n  sapply(x, function(val) {\n    if (is.na(val) || abs(val) < 1e-15) {\n      return(\"0\")\n    } else {\n      exponent <- floor(log10(abs(val)))\n      coef <- val / 10^exponent\n      #return(sprintf(\"%.1f × 10^%d\", round(coef, digits), exponent))\n      # May or may not be smart, just keeping magnitude\n      return(sprintf(\"10^%d\", exponent))\n    }\n  })\n}\n\ndata <- result %>% \n  mutate(across(c(genus_n_reads_tot, genus_ra_reads_tot), ~replace_na(., 0)),\n         genus = ifelse(is.na(genus), \"Unknown Genus\", genus)) %>%\n  mutate(\n  species = paste0(species, sprintf(' (%s)', format_scientific(species_ra_reads_tot))),\n  genus = paste0(genus, sprintf(' (%s)', format_scientific(genus_ra_reads_tot))),\n  family = paste0(family, sprintf(' (%s)', format_scientific(family_ra_reads_tot)))\n)\nlinks <- as.data.frame(create_links(data))\nnodes <- create_nodes(links)\nsankey_data <- prepare_sankey_data(links, nodes)\nsankey <- create_sankey_plot(sankey_data)\n\nsankey\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-84e9e40738aeb93d4fbc\" style=\"width:100%;height:975px;\" class=\"sankeyNetwork html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-84e9e40738aeb93d4fbc\">{\"x\":{\"links\":{\"source\":[0,1,1,1,1,2,3,4,5,6,7,7,7,7,7,8,9,9,10,11,12,12,13,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,17,18,18,18,18,18,19,20,21,21,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,25,25,26,27,27,28,29,30,31,31,31,32,33,33,33,33,33,33,33,33,33,34],\"target\":[27,15,18,23,33,16,24,29,33,33,19,26,30,31,32,14,20,21,17,28,22,25,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],\"value\":[2,22,5,14,4,1,1,1,4,1,1,1,1,3,1,1,1,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},\"nodes\":{\"name\":[\"Adenoviridae (10^-7)\",\"Anelloviridae (10^-6)\",\"Coronaviridae (10^-8)\",\"Flaviviridae (10^-8)\",\"Hepadnaviridae (10^-4)\",\"Microviridae (10^-7)\",\"NA (0)\",\"Orthoherpesviridae (10^-7)\",\"Papillomaviridae (10^-8)\",\"Parvoviridae (10^-5)\",\"Polyomaviridae (10^-8)\",\"Poxviridae (10^-8)\",\"Retroviridae (10^-7)\",\"Rhabdoviridae (10^-8)\",\"Alphapapillomavirus (10^-8)\",\"Alphatorquevirus (10^-7)\",\"Betacoronavirus (10^-8)\",\"Betapolyomavirus (10^-8)\",\"Betatorquevirus (10^-8)\",\"Cytomegalovirus (10^-8)\",\"Dependoparvovirus (10^-8)\",\"Erythroparvovirus (10^-5)\",\"Gammaretrovirus (10^-8)\",\"Gammatorquevirus (10^-7)\",\"Hepacivirus (10^-8)\",\"Lentivirus (10^-7)\",\"Lymphocryptovirus (10^-7)\",\"Mastadenovirus (10^-7)\",\"Molluscipoxvirus (10^-8)\",\"Orthohepadnavirus (10^-4)\",\"Rhadinovirus (10^-8)\",\"Roseolovirus (10^-7)\",\"Simplexvirus (10^-7)\",\"Unknown Genus (0)\",\"Vesiculovirus (10^-8)\",\"Alphapapillomavirus 4 (10^-8)\",\"Alphatorquevirus homin1 (10^-8)\",\"Alphatorquevirus homin10 (10^-7)\",\"Alphatorquevirus homin13 (10^-8)\",\"Alphatorquevirus homin15 (10^-8)\",\"Alphatorquevirus homin17 (10^-8)\",\"Alphatorquevirus homin18 (10^-8)\",\"Alphatorquevirus homin19 (10^-8)\",\"Alphatorquevirus homin20 (10^-8)\",\"Alphatorquevirus homin21 (10^-8)\",\"Alphatorquevirus homin24 (10^-8)\",\"Alphatorquevirus homin29 (10^-8)\",\"Alphatorquevirus homin3 (10^-8)\",\"Alphatorquevirus homin5 (10^-8)\",\"Alphatorquevirus homin7 (10^-8)\",\"Alphatorquevirus homin9 (10^-7)\",\"Torque teno virus 11 (10^-8)\",\"Torque teno virus 12 (10^-8)\",\"Torque teno virus 16 (10^-8)\",\"Torque teno virus 22 (10^-8)\",\"Torque teno virus 27 (10^-8)\",\"Torque teno virus 28 (10^-8)\",\"Torque teno virus 8 (10^-8)\",\"Severe acute respiratory syndrome-related coronavirus (10^-8)\",\"Betapolyomavirus hominis (10^-8)\",\"Betatorquevirus homini1 (10^-8)\",\"Betatorquevirus homini5 (10^-8)\",\"Betatorquevirus homini6 (10^-8)\",\"Betatorquevirus homini7 (10^-8)\",\"TTV-like mini virus (10^-8)\",\"Cytomegalovirus humanbeta5 (10^-8)\",\"Dependoparvovirus primate1 (10^-8)\",\"Erythroparvovirus primate1 (10^-5)\",\"Human erythrovirus V9 (10^-7)\",\"Murine leukemia virus (10^-8)\",\"Murine leukemia-related retroviruses (10^-8)\",\"Gammatorquevirus homidi1 (10^-8)\",\"Gammatorquevirus homidi10 (10^-7)\",\"Gammatorquevirus homidi11 (10^-8)\",\"Gammatorquevirus homidi12 (10^-8)\",\"Gammatorquevirus homidi13 (10^-8)\",\"Gammatorquevirus homidi14 (10^-8)\",\"Gammatorquevirus homidi2 (10^-8)\",\"Gammatorquevirus homidi3 (10^-8)\",\"Gammatorquevirus homidi4 (10^-8)\",\"Gammatorquevirus homidi5 (10^-8)\",\"Gammatorquevirus homidi6 (10^-8)\",\"Gammatorquevirus homidi7 (10^-8)\",\"Gammatorquevirus homidi8 (10^-7)\",\"Gammatorquevirus homidi9 (10^-8)\",\"Hepacivirus hominis (10^-8)\",\"Human immunodeficiency virus (10^-8)\",\"Human immunodeficiency virus 1 (10^-7)\",\"Lymphocryptovirus humangamma4 (10^-7)\",\"Human mastadenovirus C (10^-7)\",\"Human mastadenovirus F (10^-7)\",\"Molluscum contagiosum virus (10^-8)\",\"Hepatitis B virus (10^-4)\",\"Rhadinovirus humangamma8 (10^-8)\",\"Roseolovirus humanbeta6a (10^-7)\",\"Roseolovirus humanbeta6b (10^-7)\",\"Roseolovirus humanbeta7 (10^-8)\",\"Simplexvirus humanalpha1 (10^-7)\",\"Anelloviridae sp. (10^-6)\",\"Caudovirus D_HF5_3 (10^-8)\",\"Gokushovirus WZ-2015a (10^-8)\",\"Human gut gokushovirus (10^-8)\",\"Micro Torque teno virus (10^-8)\",\"Microviridae sp. (10^-7)\",\"Microvirus sp. (10^-8)\",\"Small anellovirus (10^-8)\",\"Torque teno virus (10^-7)\",\"Vesiculovirus indiana (10^-8)\"],\"group\":[\"Adenoviridae (10^-7)\",\"Anelloviridae (10^-6)\",\"Coronaviridae (10^-8)\",\"Flaviviridae (10^-8)\",\"Hepadnaviridae (10^-4)\",\"Microviridae (10^-7)\",\"NA (0)\",\"Orthoherpesviridae (10^-7)\",\"Papillomaviridae (10^-8)\",\"Parvoviridae (10^-5)\",\"Polyomaviridae (10^-8)\",\"Poxviridae (10^-8)\",\"Retroviridae (10^-7)\",\"Rhabdoviridae (10^-8)\",\"Alphapapillomavirus (10^-8)\",\"Alphatorquevirus (10^-7)\",\"Betacoronavirus (10^-8)\",\"Betapolyomavirus (10^-8)\",\"Betatorquevirus (10^-8)\",\"Cytomegalovirus (10^-8)\",\"Dependoparvovirus (10^-8)\",\"Erythroparvovirus (10^-5)\",\"Gammaretrovirus (10^-8)\",\"Gammatorquevirus (10^-7)\",\"Hepacivirus (10^-8)\",\"Lentivirus (10^-7)\",\"Lymphocryptovirus (10^-7)\",\"Mastadenovirus (10^-7)\",\"Molluscipoxvirus (10^-8)\",\"Orthohepadnavirus (10^-4)\",\"Rhadinovirus (10^-8)\",\"Roseolovirus (10^-7)\",\"Simplexvirus (10^-7)\",\"Unknown Genus (0)\",\"Vesiculovirus (10^-8)\",\"Alphapapillomavirus 4 (10^-8)\",\"Alphatorquevirus homin1 (10^-8)\",\"Alphatorquevirus homin10 (10^-7)\",\"Alphatorquevirus homin13 (10^-8)\",\"Alphatorquevirus homin15 (10^-8)\",\"Alphatorquevirus homin17 (10^-8)\",\"Alphatorquevirus homin18 (10^-8)\",\"Alphatorquevirus homin19 (10^-8)\",\"Alphatorquevirus homin20 (10^-8)\",\"Alphatorquevirus homin21 (10^-8)\",\"Alphatorquevirus homin24 (10^-8)\",\"Alphatorquevirus homin29 (10^-8)\",\"Alphatorquevirus homin3 (10^-8)\",\"Alphatorquevirus homin5 (10^-8)\",\"Alphatorquevirus homin7 (10^-8)\",\"Alphatorquevirus homin9 (10^-7)\",\"Torque teno virus 11 (10^-8)\",\"Torque teno virus 12 (10^-8)\",\"Torque teno virus 16 (10^-8)\",\"Torque teno virus 22 (10^-8)\",\"Torque teno virus 27 (10^-8)\",\"Torque teno virus 28 (10^-8)\",\"Torque teno virus 8 (10^-8)\",\"Severe acute respiratory syndrome-related coronavirus (10^-8)\",\"Betapolyomavirus hominis (10^-8)\",\"Betatorquevirus homini1 (10^-8)\",\"Betatorquevirus homini5 (10^-8)\",\"Betatorquevirus homini6 (10^-8)\",\"Betatorquevirus homini7 (10^-8)\",\"TTV-like mini virus (10^-8)\",\"Cytomegalovirus humanbeta5 (10^-8)\",\"Dependoparvovirus primate1 (10^-8)\",\"Erythroparvovirus primate1 (10^-5)\",\"Human erythrovirus V9 (10^-7)\",\"Murine leukemia virus (10^-8)\",\"Murine leukemia-related retroviruses (10^-8)\",\"Gammatorquevirus homidi1 (10^-8)\",\"Gammatorquevirus homidi10 (10^-7)\",\"Gammatorquevirus homidi11 (10^-8)\",\"Gammatorquevirus homidi12 (10^-8)\",\"Gammatorquevirus homidi13 (10^-8)\",\"Gammatorquevirus homidi14 (10^-8)\",\"Gammatorquevirus homidi2 (10^-8)\",\"Gammatorquevirus homidi3 (10^-8)\",\"Gammatorquevirus homidi4 (10^-8)\",\"Gammatorquevirus homidi5 (10^-8)\",\"Gammatorquevirus homidi6 (10^-8)\",\"Gammatorquevirus homidi7 (10^-8)\",\"Gammatorquevirus homidi8 (10^-7)\",\"Gammatorquevirus homidi9 (10^-8)\",\"Hepacivirus hominis (10^-8)\",\"Human immunodeficiency virus (10^-8)\",\"Human immunodeficiency virus 1 (10^-7)\",\"Lymphocryptovirus humangamma4 (10^-7)\",\"Human mastadenovirus C (10^-7)\",\"Human mastadenovirus F (10^-7)\",\"Molluscum contagiosum virus (10^-8)\",\"Hepatitis B virus (10^-4)\",\"Rhadinovirus humangamma8 (10^-8)\",\"Roseolovirus humanbeta6a (10^-7)\",\"Roseolovirus humanbeta6b (10^-7)\",\"Roseolovirus humanbeta7 (10^-8)\",\"Simplexvirus humanalpha1 (10^-7)\",\"Anelloviridae sp. (10^-6)\",\"Caudovirus D_HF5_3 (10^-8)\",\"Gokushovirus WZ-2015a (10^-8)\",\"Human gut gokushovirus (10^-8)\",\"Micro Torque teno virus (10^-8)\",\"Microviridae sp. (10^-7)\",\"Microvirus sp. (10^-8)\",\"Small anellovirus (10^-8)\",\"Torque teno virus (10^-7)\",\"Vesiculovirus indiana (10^-8)\"]},\"options\":{\"NodeID\":\"name\",\"NodeGroup\":\"name\",\"LinkGroup\":null,\"colourScale\":\"d3.scaleOrdinal(d3.schemeCategory20);\",\"fontSize\":14,\"fontFamily\":null,\"nodeWidth\":25,\"nodePadding\":10,\"units\":\"\",\"margin\":{\"top\":null,\"right\":null,\"bottom\":null,\"left\":null},\"iterations\":32,\"sinksRight\":true}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\nTo get a better idea of the relative abundance of species, we can create a dot plot where each dot represents the relative abundance of a particular species in a sample.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_family <- result %>% select(species, family) %>% rename('name' = 'species')\n\nplay <- hv_species_counts %>% \n  ungroup() %>%\n  inner_join(libraries, by = 'sample') %>%\n  inner_join(species_family, by = 'name')\n\nplay$family <- factor(play$family, levels=hv_family_collate %>% pull(family))\nplay <- play %>%\n  arrange(family, name) %>%\n  mutate(name = factor(name, levels = unique(name)))\n#name_order <- play %>% arrange(family) %>% pull(name)\n#play$name <- factor(play$name, levels = name_order)\n\npal <- c(brewer.pal(8, 'Dark2'),brewer.pal(8, 'Accent'))\n\nra_dot <- ggplot(play, aes(x = ra_reads_hv, y=name)) +\n  geom_quasirandom(orientation = 'y', aes(color = family)) +\n  scale_color_manual(values = pal) + \n    scale_x_log10(\n    \"Relative abundance human virus reads\",\n    labels = function(x) parse(text = paste0(\"10^\", round(log10(x)))),\n    limits = c(1e-9, 1),\n    n.breaks = 8\n  ) +\n  labs(y = 'Human virus',\n       color = 'Viral family') + \n  theme_light() + \n    theme(\n    axis.text.y = element_text(size = 8),\n    axis.text.x = element_text(size = 14),\n    axis.ticks.y = element_blank(),axis.line = element_line(colour = \"black\"),\n    axis.title.x = element_text(size = 15),    \n    axis.title.y = element_text(size = 15),  \n    legend.text = element_text(size = 13),\n    legend.title = element_text(size = 16),\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.background = element_blank())\nra_dot\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/hv-species-dot-1.png){width=960}\n:::\n:::\n\n\n\n\n\nWe now exclude Anelloviridae from the plot and add in the locations of the samples in a separate bar plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_subset <- play %>% filter(family != \"Anelloviridae\")\nplay_subset <- play_subset%>%\n  group_by(name) %>%\n  mutate(virus_count = n_distinct(sample),\n         mean_ra = mean(ra_reads_hv)) %>%\n  ungroup() %>%\n  mutate(total_samples = n_distinct(libraries),\n         virus_prevalence = paste0(virus_count, \"/\", total_samples),\n         virus_prevalence_num = virus_count/total_samples,\n            name = paste0(name, ' (', virus_prevalence, ')')) %>% \n  mutate(name = fct_reorder(name, virus_prevalence_num, .desc = TRUE))\n\nplay_subset <- left_join(play_subset, libraries %>% select(sample, location), by = 'sample')\n\n\npal <- c(brewer.pal(8, 'Dark2'),brewer.pal(8, 'Accent'))\n\nra_dot <- ggplot(play_subset, aes(x = ra_reads_hv, y=name)) +\n  geom_quasirandom(orientation = 'y', aes(color = family)) +\n#  geom_point(aes(x = mean_ra), shape = 18, size = 4) + \n  scale_color_manual(values = pal) + \n  scale_x_log10(\n    \"Relative abundance human virus reads\",\n    labels = function(x) parse(text = paste0(\"10^\", round(log10(x)))),\n    limits = c(1e-9, 1),\n    n.breaks = 8\n  ) +\n  labs(y = 'Human virus',\n       color = 'Viral family') +\n  theme_light() + \n  theme(\n    axis.text.y = element_text(size = 8),\n    axis.text.x = element_text(size = 14),\n    axis.ticks.y = element_blank(),axis.line = element_line(colour = \"black\"),\n    axis.title.x = element_text(size = 15),    \n    axis.title.y = element_text(size = 15),  \n    legend.text = element_text(size = 13),\n    legend.title = element_text(size = 16),\n    legend.position = c(1, 1),  # Move legend to top right\n    legend.justification = c(1, 1),  # Align legend to top right\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.background = element_blank())\n\nprevalence_bar <- ggplot(play_subset, aes(x = virus_prevalence_num, y = name, fill = location)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  scale_x_continuous(\n    \"Percent of samples with virus\",\n    labels = scales::percent_format(scale = 1, accuracy = 1)\n  ) +\n  labs(y = 'Human virus',\n       fill = 'Location') +\n  theme_light() + \n  theme(\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size = 14),\n    axis.ticks.y = element_blank(),\n    axis.line = element_line(colour = \"black\"),\n    axis.title.x = element_text(size = 15),    \n    axis.title.y = element_blank(),  \n    legend.text = element_text(size = 13),\n    legend.title = element_text(size = 16),\n    legend.position = c(1, 1),  # Move legend to top right\n    legend.justification = c(1, 1),  # Align legend to top right\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.background = element_blank())\n\n# Combine the plots using ggarrange\ncombined_plot <- ggarrange(ra_dot, prevalence_bar, \n                           ncol = 2, \n                           widths = c(1.2, 1),\n                           common.legend = FALSE,\n                           align = \"h\")\ncombined_plot\n```\n\n::: {.cell-output-display}\n![](2024-07-23-mengyi_files/figure-html/hv-species-wout-anello-1.png){width=1440}\n:::\n:::\n\n\n\n\n\n\nI'd like to BLAST some of these reads against the NCBI nt database to see if we can get some more info on them.\n\n# Conclusion\n\nTBD\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/d3-4.5.0/d3.min.js\"></script>\n<script src=\"../site_libs/sankey-1/sankey.js\"></script>\n<script src=\"../site_libs/sankeyNetwork-binding-0.4/sankeyNetwork.js\"></script>\n<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}