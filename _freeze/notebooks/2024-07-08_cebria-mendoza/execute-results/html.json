{
  "hash": "64cc0e575d3fc36ecd536af9caae464c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Workflow of Cebria-Mendoza et al. (2021)\"\nsubtitle: \"Pooled plasma from Spain (DNA + RNA)\"\nauthor: \"Harmon Bhasin\"\ndate: 2024-07-08\nformat:\n  html:\n    toc: true # table of contents\n    toc-title: \"Table of contents\" # table of contents title\n    number-sections: true # number sections\n    number-depth: 3 # number depth to show in table of contents\n    toc-location: right # table of contents location\n    page-layout: full # full page layout\n    code-fold: true # Keep option to fold code (i.e. show or hide it; default: hide)\n    code-tools: true # Code menu in the header of your document that provides various tools for readers to interact with the source code\n    code-link: true # Enables hyper-linking of functions within code blocks to their online documentation\n    df-print: paged # print data frame\n    fig-format: svg\n    other-links:\n      - text: Paper\n        href: https://doi.org/10.3390/v15071425\n      - text: Data\n        href: https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA983534\n    code-links:\n      - text: Code for this post\n        icon: file-code\n        href: https://github.com/naobservatory/harmons-public-notebook/blob/main/notebooks/2024-07-22-thijssen.qmd\neditor: \n  visual: true\n  render-on-save: true\ncomments:\n  hypothesis: true # hypothesis\nexecute: \n  freeze: auto\ntitle-block-banner: \"#de2d26\"\n---\n\n\n\n\n\n\n\n\nAs a part of my time here, I'm exploring blood-based surveillance for novel viral pathogen detection. We've decided to make three blog posts. The first blog post will cover the physical and biological characteristics of blood, the second blog post will cover the blood sampling strategies, and the last blog post will look at the metagenomic profile of blood (which is what we're doing here, and will do for the next few posts).\n\nThis is the first of many studies that I'll be analyzing. however I don't expect all of them to be used in the last blog post. In this post, I analyze [Cebria-Mendoza 2021](https://doi.org/10.3390/v13112322), a dataset with 60 samples where each sample is a pool of 8-13 unique healthy donors, with a total of \\~600 donors from Spain.\n\n*This notebook uses the MGS Workflow v2.2.1 (note that this is old).*\n\n# The raw data\n\n## About\n\n[This dataset](https://www.ncbi.nlm.nih.gov/bioproject/?term=PRJNA983534) comprises 60 samples from plasma pools of 8-13 people from Spain. In total, 567 healthy individuals contributed to these pools. For each pooled sample, a combined DNA and RNA library preparation was performed, resulting in a single sequencing output that captures both nucleic acid types. This approach provides comprehensive genetic information but precludes separate analysis of DNA and RNA from individual samples.\n\n\n\n\n\n\n\n\n\n### Sample + library preparation \n\nParaphrased from the [paper](https://doi.org/10.3390/v15071425):\n\n> A total of 587 plasma samples from healthy donors were collected from Valencia, Spain from 15 September 2018 to 30 March 2019 and stored at −80 °C until use.\n> \n> Each of the 60 pools (SP1-SP60) was obtained by mixing 1 mL of plasma from a variable number of donors (between 8- and 13-mL total). To assess viral recovery, each pool was spiked with 103 PFU of ϕX174 [Microviridae] and 104 PFU of vesicular stomatitis virus (VSV) [Rhabdoviridae]. Briefly, plasma pools were processed with 1.0 µM filters to remove cells and other non-viral particles and the filtered fractions were subject to high-speed centrifugation (87,000 g, 2 h, 4 °C), washed with PBS 1X (87,000 g, 1 h, 4 °C), and resuspended in 245 µL 1X digestion buffer. Then, 5 µL of Turbo DNase, 2 µL of Benzonase and 2 µL of micrococcal nuclease (NEB) were added to the sample to remove unprotected nucleic acids. After incubation (1 h, 37 °C), 20 µL of stop reagent was added, following the manufacturer’s instructions. Then, 240 µL supernatant was transferred to a new tube and split into two fractions: 200 µL fraction was used for RNA extraction using TRIzol LS reagent, followed by purification with the QIAamp Viral RNA Mini kit and amplification with the QuantiTect Whole Transcriptome kit (Qiagen), and 40 µL fraction was used for DNA extraction with the QIAamp Viral RNA Mini kit and amplification with the TruePrime WGA kit.\n> \n> For each pool, DNA and RNA amplification products were mixed in equimolar concentration before library preparation, which was carried out using Nextera XT DNA library preparation kit with 15 amplification cycles (Illumina, San Diego, USA), and subject to pair-end sequencing in a NextSeq device.\n\n*More details can be found in their [original paper](https://doi.org/10.1038%2Fs41598-021-86427-4) which outlined this protocol.*\n\n## Quality control\n\n\n\n\n\n\n\n\n\nIn total, these 60 samples contained 230M read pairs. The samples had 2.3M - 4.8M (mean 3.8M) read pairs each. \n\nThe number of read pairs and total base pairs looks good, however the duplication rate is quite high (this can be attributed to their sample preparation). Adapter content is low (the upper limit on the plot is 1%). Read quality seems good both over all the positions as well as over the number of sequences.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare data\nbasic_stats_raw_metrics <- basic_stats_raw %>%\n  select(library,\n         pool_size,\n         `# Read pairs` = n_read_pairs,\n         `Total base pairs\\n(approx)` = n_bases_approx,\n         `% Duplicates\\n(FASTQC)` = percent_duplicates) %>%\n  pivot_longer(-(library:pool_size), names_to = \"metric\", values_to = \"value\") %>%\n  mutate(metric = fct_inorder(metric)) \n\n# Set up plot templates\n\ng_basic <- ggplot(basic_stats_raw_metrics, aes(x = library, y = value, fill = pool_size)) +\n  geom_col(position = \"dodge\") +\n  scale_x_discrete() +\n  scale_y_continuous(expand = c(0, 0)) +\n  expand_limits(y = c(0, 100)) +\n  scale_fill_brewer(palette = \"Accent\") + \n  facet_grid(metric ~ ., scales = \"free\", space = \"free_x\", switch = \"y\") +\n  theme_kit + theme(\n    axis.title.y = element_blank(),\n    strip.text.y = element_text(face = \"plain\")\n  )\ng_basic\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-basic-stats-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up plotting templates\ng_qual_raw <- ggplot(mapping=aes(linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters_raw <- g_qual_raw + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats_raw) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,1),\n                     expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0)) +\n  facet_grid(.~adapter)\ng_adapters_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-raw-quality-1.svg)\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base_raw <- g_qual_raw +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats_raw) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0))\ng_quality_base_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-raw-quality-2.svg)\n:::\n\n```{.r .cell-code}\ng_quality_seq_raw <- g_qual_raw +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats_raw) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0))\ng_quality_seq_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-raw-quality-3.svg)\n:::\n:::\n\n\n\n\n# Preprocessing\n\n## High-level metrics\n\nThe average fraction of reads at each stage in the preprocessing pipeline is shown in the following table. On average, cleaning & deduplication removed about 57% of total read pairs, primarily during duplication which makes sense given that the raw metrics show that the samples are quite high in duplication. Ribodepletion removed about 6-8% during each round.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# TODO: Group by pool size as well\n# Count read losses\nn_reads_rel <- basic_stats %>% \n  select(sample, pool_size, stage, percent_duplicates, n_read_pairs) %>%\n  group_by(sample, pool_size) %>% \n  arrange(sample, stage) %>%\n  mutate(p_reads_retained = n_read_pairs / lag(n_read_pairs),\n         p_reads_lost = 1 - p_reads_retained,\n         p_reads_retained_abs = n_read_pairs / n_read_pairs[1],\n         p_reads_lost_abs = 1-p_reads_retained_abs,\n         p_reads_lost_abs_marginal = p_reads_lost_abs - lag(p_reads_lost_abs))\nn_reads_rel_display <- n_reads_rel %>% \n  rename(Stage=stage) %>% \n  group_by(Stage) %>% \n  summarize(`% Total Reads Lost (Cumulative)` = paste0(round(min(p_reads_lost_abs*100),1), \"-\", round(max(p_reads_lost_abs*100),1), \" (mean \", round(mean(p_reads_lost_abs*100),1), \")\"),\n            `% Total Reads Lost (Marginal)` = paste0(round(min(p_reads_lost_abs_marginal*100),1), \"-\", round(max(p_reads_lost_abs_marginal*100),1), \" (mean \", round(mean(p_reads_lost_abs_marginal*100),1), \")\"), .groups=\"drop\") %>% \n  filter(Stage != \"raw_concat\") %>%\n  mutate(Stage = Stage %>% as.numeric %>% factor(labels=c(\"Trimming & filtering\", \"Deduplication\", \"Initial ribodepletion\", \"Secondary ribodepletion\")))\nn_reads_rel_display\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Stage\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Cumulative)\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Marginal)\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Trimming & filtering\",\"2\":\"0-5 (mean 1.4)\",\"3\":\"0-5 (mean 1.4)\"},{\"1\":\"Deduplication\",\"2\":\"44.2-70.6 (mean 55.9)\",\"3\":\"44.2-67.8 (mean 54.5)\"},{\"1\":\"Initial ribodepletion\",\"2\":\"53.9-77.2 (mean 63.8)\",\"3\":\"3.2-15.6 (mean 7.9)\"},{\"1\":\"Secondary ribodepletion\",\"2\":\"57.7-85.7 (mean 70.2)\",\"3\":\"2.2-12.6 (mean 6.4)\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\nAdapter content stays low (it's quite strange that FASTQC shows there being library contamination post ribosomal depletion and not anytime before that, but considering how small it is, I'm inclined to ignore it). Read quality stays pretty similar over the positions, but improves over the number of sequences (predominantly from cleaning) throughout the pipeline. Duplication rates are still quite high which is a bit concerning. Mean read length stays close to expected 150. The % of ribosomal reads vary a good amount, some samples had anywhere as low as 10% ribosomal reads whereas others had up to 60% ribosomal reads. This is probably an indication that I need to do more ribosomal read removal, but I'm going to hold off on doing this.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_qual <- ggplot(mapping=aes(linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters <- g_qual + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,1),\n                     , expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~adapter)\ng_adapters\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-quality-1.svg)\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base <- g_qual +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~.)\ng_quality_base\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-quality-2.svg)\n:::\n\n```{.r .cell-code}\ng_quality_seq <- g_qual +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0)) +\n  facet_grid(stage~., scales = \"free_y\")\ng_quality_seq\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-quality-3.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng_stage_trace <- ggplot(basic_stats, aes(x=stage, group=sample)) +\n  theme_kit\n\n# Plot reads over preprocessing\ng_reads_stages <- g_stage_trace +\n  geom_line(aes(y=n_read_pairs)) +\n  scale_y_continuous(\"# Read pairs\", expand=c(0,0), limits=c(0,NA))\ng_reads_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-figures-1.svg)\n:::\n\n```{.r .cell-code}\n# Plot relative read losses during preprocessing\ng_reads_rel <- ggplot(n_reads_rel, \n                      aes(x=stage, group=sample)) +\n  geom_line(aes(y=p_reads_lost_abs_marginal)) +\n  scale_y_continuous(\"% Total Reads Lost\", expand=c(0,0), \n                     labels = function(x) x*100) +\n  theme_kit\ng_reads_rel\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-figures-2.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstage_dup <- basic_stats %>% group_by(stage) %>% \n  summarize(dmin = min(percent_duplicates), dmax=max(percent_duplicates),\n            dmean=mean(percent_duplicates), .groups = \"drop\")\n\ng_dup_stages <- g_stage_trace +\n  geom_line(aes(y=percent_duplicates)) +\n  scale_y_continuous(\"% Duplicates\", limits=c(0,NA), expand=c(0,0))\ng_dup_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-dedup-1.svg)\n:::\n\n```{.r .cell-code}\ng_readlen_stages <- g_stage_trace + geom_line(aes(y=mean_seq_len)) +\n  scale_y_continuous(\"Mean read length (nt)\", expand=c(0,0), limits=c(0,NA))\ng_readlen_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-dedup-2.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate reads lost during ribodepletion (approximation for % ribosomal reads)\nreads_ribo <- n_reads_rel %>% \n  filter(stage %in% c(\"dedup\", \"ribo_secondary\")) %>% \n  group_by(sample) %>% \n  summarize(p_reads_ribo=1-n_read_pairs[2]/n_read_pairs[1], .groups = \"drop\") %>%\n  inner_join(libraries, by = 'sample')\nreads_ribo_summ <- reads_ribo %>%\n  group_by(sample) %>%\n  summarize(min=min(p_reads_ribo), max=max(p_reads_ribo),\n            mean=mean(p_reads_ribo), .groups = \"drop\") %>%\n  inner_join(libraries, by = 'sample')\ng_reads_ribo <- ggplot(reads_ribo, \n                       aes(x=library, y=p_reads_ribo)) +\n  geom_point() + \n  scale_y_continuous(name=\"Approx % ribosomal reads\", limits=c(0,1),\n                     breaks=seq(0,1,0.2), expand=c(0,0), labels = function(y) y*100)+\n  theme_kit\ng_reads_ribo\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/ribo-frac-1.svg)\n:::\n:::\n\n\n\n\n# Taxonomic composition\n\n## High-level composition\n\nTo assess the high-level composition of the reads, I ran the ribodepleted files through Kraken2 and summarized the results with Bracken.\n\nThe groups listed below were created by Will:\n\n* Filtered (removed during cleaning)\n* Duplicate (removed during deduplication)\n* Ribosomal (removed during ribodepletion)\n* Unassigned (non-ribosomal reads that were not assigned to any taxon by Kraken/Bracken)\n* Bacterial (non-ribosomal reads assigned to the Bacteria domain by Kraken/Bracken)\n* Archaeal (non-ribosomal reads assigned to the Archaea domain by Kraken/Bracken)\n* Viral (non-ribosomal reads assigned to the Viruses domain by Kraken/Bracken)\n* Human (non-ribosomal reads assigned to the Eukarya domain by Kraken/Bracken)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclassifications <- c(\"Filtered\", \"Duplicate\", \"Ribosomal\", \"Unassigned\",\n                     \"Bacterial\", \"Archaeal\", \"Viral\", \"Human\")\n\n# Import composition data\ntax_final_dir <- file.path(results_dir, \"taxonomy_final\")\ncomp_path <- file.path(tax_final_dir, \"taxonomic_composition.tsv.gz\")\ncomp <- read_tsv(comp_path) %>% left_join(libraries, by = \"sample\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 480 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (2): sample, classification\ndbl (2): n_reads, p_reads\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ncomp_minor <- comp %>% \n  filter(classification %in% c(\"Archaeal\", \"Viral\", \"Human\", \"Other\"))\ncomp_assigned <- comp %>%\n  filter(! classification %in% c(\"Filtered\", \"Duplicate\", \n                                 \"Ribosomal\", \"Unassigned\")) %>%\n  group_by(sample) %>%\n  mutate(p_reads = n_reads/sum(n_reads))\ncomp_assigned_minor <- comp_assigned %>% \n  filter(classification %in% c(\"Archaeal\", \"Viral\", \"Human\", \"Other\"))\n\n# Summarize composition\nread_comp_summ <- comp %>% \n  group_by(classification) %>%\n  summarize(n_reads = sum(n_reads), .groups = \"drop_last\") %>%\n  mutate(n_reads = replace_na(n_reads,0),\n         p_reads = n_reads/sum(n_reads),\n         pc_reads = p_reads*100) %>%\n  mutate(classification = factor(classification, levels=classifications)) %>%\n  select(classification, n_reads, pc_reads) %>%\n  rename(`# of reads` = n_reads, \"% of reads\" = pc_reads) %>%\n  mutate(`% of reads` = sprintf(\"%.2f\", `% of reads`))\nread_comp_summ\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"classification\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"# of reads\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"% of reads\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Archaeal\",\"2\":\"23236\",\"3\":\"0.01\"},{\"1\":\"Bacterial\",\"2\":\"35013621\",\"3\":\"15.15\"},{\"1\":\"Duplicate\",\"2\":\"125800100\",\"3\":\"54.45\"},{\"1\":\"Filtered\",\"2\":\"3178616\",\"3\":\"1.38\"},{\"1\":\"Human\",\"2\":\"1352337\",\"3\":\"0.59\"},{\"1\":\"Ribosomal\",\"2\":\"31881359\",\"3\":\"13.80\"},{\"1\":\"Unassigned\",\"2\":\"29589981\",\"3\":\"12.81\"},{\"1\":\"Viral\",\"2\":\"4199802\",\"3\":\"1.82\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare plotting templates\ng_comp_base <- ggplot(mapping=aes(x=library, y=p_reads, fill=classification)) +\n  scale_x_discrete(name=\"Plasma pool\") +\n  theme_kit + \n  theme(plot.title = element_text(hjust=0, face=\"plain\", size=rel(1.5)))\nscale_y_pc_reads <- purrr::partial(scale_y_continuous, name = \"% Reads\",\n                                   expand = c(0,0), labels = function(y) y*100)\ngeom_comp <- purrr::partial(geom_col, position = \"stack\", width = 1)\n\n# Define a color palette for the classification\nclassification_colors <- brewer.pal(8, \"Accent\")\nnames(classification_colors) <- c(\"Filtered\", \"Duplicate\", \"Ribosomal\", \"Unassigned\", \"Bacterial\", \"Archaeal\", \"Viral\", \"Human\")\nscale_fill_classification <- function() {\n  scale_fill_manual(values = classification_colors, name = \"Classification\")\n}\n\n# Plot overall composition\ng_comp <- g_comp_base + geom_comp(data = comp) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_classification() + \n  ggtitle(\"Read composition (all reads, all groups)\")\ng_comp\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-composition-all-1.svg)\n:::\n\n```{.r .cell-code}\ng_comp_assigned <- g_comp_base + \n  geom_comp(data = comp_assigned) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_classification() + \n  ggtitle(\"Read composition (assigned reads, all groups)\")\ng_comp_assigned\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-composition-all-2.svg)\n:::\n:::\n\n\n\n\n## Total viral content\n\nTotal viral fraction average $1.81 \\times 10^{-2}$ across samples. As a fraction of assigned (rather than total) reads, this jumped to $1.60 \\times 10^{-1}$.\n\n\n\n\n\n\n\n\n\n## Taxonomic composition of viruses\n\nThe two dominant viruses we see are Anellovirdae and Rhabdovirdae (spike-in). Followed by these two viral families is Flavivirdae, and lastly, also by a much smaller percent, Microviridae (spike-in). The threshold for the label \"other\" are the set of families that make up less than 1% composition in all samples.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get viral taxonomy\nviral_taxa_path <- file.path(data_dir, \"total-virus-db.tsv.gz\")\nviral_taxa <- read_tsv(viral_taxa_path, show_col_types = FALSE)\n\n# Get Kraken reports\nreports_path <- file.path(tax_final_dir, \"kraken_reports.tsv.gz\")\nreports <- read_tsv(reports_path, show_col_types = FALSE) %>%\n  inner_join(libraries, by=\"sample\") %>% arrange(sample)\n\n# Filter to viral taxa\nkraken_reports_viral <- filter(reports, taxid %in% viral_taxa$taxid) %>%\n  group_by(sample) %>%\n  mutate(p_reads_viral = n_reads_clade/n_reads_clade[1])\nkraken_reports_viral_cleaned <- kraken_reports_viral %>%\n  select(-pc_reads_total, -n_reads_direct, -contains(\"minimizers\")) %>%\n  select(name, taxid, p_reads_viral, n_reads_clade, everything()) %>% ungroup\n\nviral_classes <- kraken_reports_viral_cleaned %>% filter(rank == \"C\")\nviral_families <- kraken_reports_viral_cleaned %>% filter(rank == \"F\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmajor_threshold <- 0.01\n\n# Identify major viral families\nviral_families_major_tab <- viral_families %>% \n  group_by(name, taxid) %>%\n  summarize(p_reads_viral_max = max(p_reads_viral), .groups=\"drop\") %>%\n  filter(p_reads_viral_max >= major_threshold)\nviral_families_major_list <- viral_families_major_tab %>% pull(name)\nviral_families_major <- viral_families %>% \n  filter(name %in% viral_families_major_list) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_minor <- viral_families_major %>% \n  group_by(sample) %>%\n  summarize(p_reads_viral_major = sum(p_reads_viral), .groups = \"drop\") %>%\n  mutate(name = \"Other\", taxid=NA, p_reads_viral = 1-p_reads_viral_major) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_display <- viral_families_major %>% \n  bind_rows(viral_families_minor) %>%\n  arrange(desc(p_reads_viral)) %>% \n  mutate(name = factor(name, levels=c(viral_families_major_list, \"Other\"))) %>%\n  rename(p_reads = p_reads_viral, classification=name) %>%\n  inner_join(libraries, by='sample')\n\n# Plot\ng_families <- g_comp_base + \n  geom_comp(data=viral_families_display) +\n  scale_y_continuous(name=\"% Viral Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_brewer(palette = 'Accent')\ng_families\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/viral-family-composition-1.svg)\n:::\n:::\n\n\n\n\nExcluding *Microviridae* and *Rhabdovirdae* (spike-ins), remaining viral sequences are distributed across a wide variety:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmajor_threshold_adj <- 0.05\n\n# Adjust viral family counts\nviral_families_adj <- viral_families %>%\n  filter(!(name %in% c(\"Rhabdoviridae\",\"Microviridae\"))) %>%\n  group_by(sample) %>%\n  mutate(p_reads_viral = p_reads_viral/sum(p_reads_viral))\n\n# Identify major viral families\nviral_families_major_tab <- viral_families_adj %>% \n  group_by(name, taxid) %>%\n  summarize(p_reads_viral_max = max(p_reads_viral), .groups=\"drop\") %>%\n  filter(p_reads_viral_max >= major_threshold)\nviral_families_major_list <- viral_families_major_tab %>% pull(name)\nviral_families_major <- viral_families_adj %>% \n  filter(name %in% viral_families_major_list) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_minor <- viral_families_major %>% \n  group_by(sample) %>%\n  summarize(p_reads_viral_major = sum(p_reads_viral), .groups = \"drop\") %>%\n  mutate(name = \"Other\", taxid=NA, p_reads_viral = 1-p_reads_viral_major) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_display <- viral_families_major %>% \n  bind_rows(viral_families_minor) %>%\n  arrange(desc(p_reads_viral)) %>% \n  mutate(name = factor(name, levels=c(viral_families_major_list, \"Other\"))) %>%\n  rename(p_reads = p_reads_viral, classification=name) %>%\n  inner_join(libraries, by = 'sample')\n\n# Plot\npalette_viral <- c(brewer.pal(12, \"Set3\"), brewer.pal(8, \"Dark2\"), brewer.pal(9, \"Set1\"))\ng_families_adj <- g_comp_base + \n  geom_comp(data=viral_families_display) +\n  scale_y_continuous(name=\"% Viral Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_manual(values=palette_viral, name = \"Viral class\")\ng_families_adj\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/viral-family-composition-exclusion-1.svg)\n:::\n:::\n\n\n\n\n# Human-infecting virus reads\n\n## Overall relative abundance\n\nI calculated the relative abundance of human-infecting viruses in two ways:\n\n-   First, as the total number of deduplicated human-virus reads in each sample, divided by the number of raw reads (\"All reads\"). This results in a viral fraction of $4.06 \\times 10^{-2}$ across all samples\n\n-   Second, as a fraction of preprocessed (cleaned, deduplicated, computationally ribodepleted) reads (\"Preprocessed reads\"). This results in a viral fraction of $1.11 \\times 10^{-1}$ across all samples.\n\n\n\n\n\n\n\n\n\n\n\n## Overall taxonomy and composition\n\nComposition of HV reads was not greatly changed from when looking at all viral reads. The two dominant viruses we see are Anellovirdae and Rhabdovirdae. Followed by these two viral families is Flavivirdae, and lastly, also by a much smaller percent, Microviridae. The threshold for the label \"other\" are the set of families that make up less than 5% composition in all samples.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthreshold_major_family <- 0.05\n\n# Count reads for each human-viral family\nhv_family_counts <- hv_reads_family %>% \n  group_by(sample, name, taxid) %>%\n  count(name = \"n_reads_hv\") %>%\n  group_by(sample) %>%\n  mutate(p_reads_hv = n_reads_hv/sum(n_reads_hv))\n\n# Identify high-ranking families and group others\nhv_family_major_tab <- hv_family_counts %>% group_by(name) %>% \n  filter(p_reads_hv == max(p_reads_hv)) %>% filter(row_number() == 1) %>%\n  arrange(desc(p_reads_hv)) %>% filter(p_reads_hv > threshold_major_family)\nhv_family_counts_major <- hv_family_counts %>%\n  mutate(name_display = ifelse(name %in% hv_family_major_tab$name, name, \"Other\")) %>%\n  group_by(sample, name_display) %>%\n  summarize(n_reads_hv = sum(n_reads_hv), p_reads_hv = sum(p_reads_hv), \n            .groups=\"drop\") %>%\n  mutate(name_display = factor(name_display, \n                               levels = c(hv_family_major_tab$name, \"Other\")))\nhv_family_counts_display <- hv_family_counts_major %>%\n  rename(p_reads = p_reads_hv, classification = name_display) %>%\n  inner_join(libraries, by = 'sample')\n\n# Plot\ng_hv_family <- g_comp_base + \n  geom_col(data=hv_family_counts_display, position = \"stack\", width=1) +\n  scale_y_continuous(name=\"% HV Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_brewer(palette = 'Accent', name = \"Viral family\") +\n  labs(title=\"Family composition of human-viral reads\") +\n  guides(fill=guide_legend(ncol=4)) +\n  theme(plot.title = element_text(size=rel(1.4), hjust=0, face=\"plain\"))\ng_hv_family\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/hv-family-1.svg)\n:::\n\n```{.r .cell-code}\n# Get most prominent families for text\nhv_family_collate <- hv_family_counts %>%\n  group_by(name, taxid) %>% \n  summarize(n_reads_tot = sum(n_reads_hv),\n            p_reads_max = max(p_reads_hv), .groups=\"drop\") %>% \n  arrange(desc(n_reads_tot))\nhv_family_collate %>%\n select(name,taxid, n_reads_tot) %>%\n rename(\n  'family' = 'name',\n  '# of total reads' = 'n_reads_tot',\n)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"family\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"taxid\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"# of total reads\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Anelloviridae\",\"2\":\"687329\",\"3\":\"8323297\"},{\"1\":\"Rhabdoviridae\",\"2\":\"11270\",\"3\":\"935461\"},{\"1\":\"Flaviviridae\",\"2\":\"11050\",\"3\":\"94741\"},{\"1\":\"Microviridae\",\"2\":\"10841\",\"3\":\"81660\"},{\"1\":\"Hepeviridae\",\"2\":\"3079366\",\"3\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Analyzing specific families\n\nWe now investigate the composition of specific families that had more than 5 viral reads. In investigating individual viral families, to avoid distortions from a few rare reads, I restricted myself to samples where that family made up at least 1% of human-viral reads:\n\n\n\n\n\n\n\n\n\n### Anelloviridae (Number of reads: 8,323,297)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Anelloviridae\nplot_viral_family_histogram(taxid_chosen=687329)\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-anelloviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Anelloviridae\nplot_viral_family_composition(taxid_chosen=687329, threshold_major_species = 0.1)\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-anelloviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n\n### Rhabdoviridae (Number of reads: 935,461) [SPIKE-IN]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_viral_family_histogram(taxid_chosen=11270)\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-rhabdoviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_viral_family_composition(taxid_chosen=11270, threshold_major_species = 0.1)\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-rhabdoviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n### Flaviviridae (Number of reads: 94,741)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_viral_family_histogram(taxid_chosen=11050)\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-flavi-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_viral_family_composition(taxid_chosen=11050, threshold_major_species = 0.1)\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-flavi-composition-1.svg)\n:::\n:::\n\n\n\n\n### Microviridae (Number of reads: 10,841) [SPIKE-IN]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_viral_family_histogram(taxid_chosen=10841)\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-microviridae-histogram-1.svg)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_viral_family_composition(taxid_chosen=10841, threshold_major_species = 0.1)\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-microviridae-composition-1.svg)\n:::\n:::\n\n\n\n\n\n## Relative abundance of pathogenic viruses of interest\n\n\n\n\n\n\n\n\n\n\n\nEach dot represents a sample, colored by viral family. The x-axis shows the relative abundance of human-infecting viruses, and the y-axis shows the species. I've removed the species relating to the spiked-in family (Microviridae and Rhabdoviridae).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_family <- result %>% select(species, family) %>% rename('name' = 'species')\n\nplay <- hv_species_counts %>% \n  ungroup() %>%\n  inner_join(libraries, by = 'sample') %>%\n  inner_join(species_family, by = 'name') %>%\n  filter(!(family %in% c(\"Microviridae\", \"Rhabdoviridae\"))) \n\nadjusted_play <- play %>% \n  group_by(name) %>%\n  mutate(virus_prevalence_num = n_distinct(sample)/n_distinct(libraries),\n         total_reads_hv = sum(n_reads_hv)) %>%\n  ungroup() %>%\n  mutate(name = fct_reorder(name, virus_prevalence_num, .desc=TRUE)) %>% \n  select(name, ra_reads_hv, family, virus_prevalence_num, total_reads_hv, n_reads_hv)\n\npal <- c(brewer.pal(8, 'Dark2'),brewer.pal(8, 'Accent'))\n\n#, labels = label_log(digits=2)\n\nra_dot <- ggplot(adjusted_play, aes(x = ra_reads_hv, y=name)) +\n  geom_quasirandom(orientation = 'y', aes(color = family)) +\n  scale_color_manual(values = pal) + \n    scale_x_log10(\n    \"Relative abundance human virus reads\",\n    labels=label_log(digits=3)\n  ) +\n  labs(y =  \"\",\n       color = 'Viral family') + \n  guides(color = guide_legend(ncol=2)) +\n  theme_light() + \n    theme(\n    axis.text.y = element_text(size = 10),\n    axis.text.x = element_text(size = 12),\n    axis.ticks.y = element_blank(),axis.line = element_line(colour = \"black\"),\n    axis.title.x = element_text(size = 14),    \n    legend.text = element_text(size = 10),\n    legend.title = element_text(size = 10, face=\"bold\"),\n    #legend.position = 'bottom',\n    legend.position = c(1, 1),  # Move legend to top right\n    legend.justification = c(1, 1),  # Align legend to top right\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.background = element_blank())\nra_dot\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-pathogenic-viruses-1.svg)\n:::\n:::\n\n\n\n\nAll of the viruses found above are known to be non-pathogenic in healthy humans.\n\n## Relative abundance assuming perfect human read removal\n\n\n\n\n\n\n\n\nAssuming we're able to perfectly remove all human reads, the average relative abundance of known human infecting virus is $4.08 \\times 10^{-2}$ pre-viral spike removal and $3.64 \\times 10^{-2}$ post-viral spike removal.\n\n# Conclusion\n\nOverall, we found a lot of anelloviridae, which makes sense given that this paper is about discovering new species of anelloviridae in blood.\n\nThere were some interesting takeways from this analysis:\n\n1. Sample processing specifically enhancing for viruses can increase the viral relative abundance substantially. In this study, we saw viral RA as high as $10^{-2}$ to $10^{-1}$ whereas in prior studies [(1)](https://data.securebio.org/harmons-public-notebook/notebooks/2024-07-23-mengyi.html) [(2)](https://data.securebio.org/harmons-public-notebook/notebooks/2024-07-22-thijssen.html) we saw viral RA around the $10^{-4}$ to $10^{-3}$ range.\n2. A lot of the Anelloviridae are largely uncharacterized (denoted by the family name followed by the abbreviation \"sp.\").\n3. In small sample populations, it's unlikely for us to see [well-known blood viruses](https://virology.ws/2017/03/23/the-viruses-in-your-blood/).\n\n\n# Appendix\n\n## Human-infecting virus families, genera, and species\n\nTo get a good overview of families, genera, and species, we can look at a Sankey plot where the magnitude of relative abundance, averaged over all samples, is shown in parentheses.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to create links\ncreate_links <- function(data) {\n  family_to_genus <- data %>%\n    filter(!is.na(genus)) %>%\n    group_by(family, genus) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = family, target = genus)\n  \n  genus_to_species <- data %>%\n    group_by(genus, species) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = genus, target = species)\n\n  family_to_species <- data %>%\n    filter(is.na(genus)) %>%\n    group_by(family, species) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = family, target = species)\n\n  bind_rows(family_to_genus, genus_to_species, family_to_species) %>%\n    filter(!is.na(source))\n}\n\n# Function to create nodes\ncreate_nodes <- function(links) {\n  data.frame(\n    name = c(links$source, links$target) %>% unique()\n  )\n}\n\n# Function to prepare data for Sankey diagram\nprepare_sankey_data <- function(links, nodes) {\n  links$IDsource <- match(links$source, nodes$name) - 1\n  links$IDtarget <- match(links$target, nodes$name) - 1\n  list(links = links, nodes = nodes)\n}\n\n# Function to create Sankey plot\ncreate_sankey_plot <- function(sankey_data) {\n  sankeyNetwork(\n    Links = sankey_data$links, \n    Nodes = sankey_data$nodes,\n    Source = \"IDsource\", \n    Target = \"IDtarget\",\n    Value = \"value\", \n    NodeID = \"name\",\n    sinksRight = TRUE,\n    nodeWidth = 25,\n    fontSize = 14,\n  )\n}\n\nsave_sankey_as_png <- function(sankey_plot, width = 1000, height = 800) {\n  # Save the plot as an HTML file\n  saveWidget(sankey_plot, sprintf('%s/sankey.html',data_dir))\n}\n\nformat_scientific <- function(x, digits=2) {\n  sapply(x, function(val) {\n    if (is.na(val) || abs(val) < 1e-15) {\n      return(\"0\")\n    } else {\n      exponent <- floor(log10(abs(val)))\n      coef <- val / 10^exponent\n      #return(sprintf(\"%.1f × 10^%d\", round(coef, digits), exponent))\n      # May or may not be smart, just keeping magnitude\n      return(sprintf(\"10^%d\", exponent))\n    }\n  })\n}\n\ndata <- result %>% \n  mutate(across(c(genus_n_reads_tot, genus_ra_reads_tot), ~replace_na(., 0)),\n         genus = ifelse(is.na(genus), \"Unknown Genus\", genus)) %>%\n  mutate(\n  species = paste0(species, sprintf(' (%s)', format_scientific(species_ra_reads_tot))),\n  genus = paste0(genus, sprintf(' (%s)', format_scientific(genus_ra_reads_tot))),\n  family = paste0(family, sprintf(' (%s)', format_scientific(family_ra_reads_tot)))\n)\nlinks <- as.data.frame(create_links(data))\nnodes <- create_nodes(links)\nsankey_data <- prepare_sankey_data(links, nodes)\nsankey <- create_sankey_plot(sankey_data)\n\nsankey\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-1ddacc645b381077ba05\" style=\"width:100%;height:1462px;\" class=\"sankeyNetwork html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-1ddacc645b381077ba05\">{\"x\":{\"links\":{\"source\":[0,0,0,0,1,2,3,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,9,10,11,11,11,11,11,11,12,12,12],\"target\":[5,6,7,11,10,9,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],\"value\":[23,16,14,4,1,1,2,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},\"nodes\":{\"name\":[\"Anelloviridae (10^-2)\",\"Flaviviridae (10^-3)\",\"Hepeviridae (10^-7)\",\"Microviridae (10^-3)\",\"Rhabdoviridae (10^-3)\",\"Alphatorquevirus (10^-4)\",\"Betatorquevirus (10^-3)\",\"Gammatorquevirus (10^-5)\",\"Ledantevirus (10^-7)\",\"Paslahepevirus (10^-7)\",\"Pegivirus (10^-3)\",\"Unknown Genus (0)\",\"Vesiculovirus (10^-3)\",\"Alphatorquevirus homin1 (10^-5)\",\"Alphatorquevirus homin10 (10^-6)\",\"Alphatorquevirus homin13 (10^-6)\",\"Alphatorquevirus homin15 (10^-4)\",\"Alphatorquevirus homin17 (10^-6)\",\"Alphatorquevirus homin18 (10^-6)\",\"Alphatorquevirus homin19 (10^-6)\",\"Alphatorquevirus homin20 (10^-6)\",\"Alphatorquevirus homin21 (10^-6)\",\"Alphatorquevirus homin24 (10^-5)\",\"Alphatorquevirus homin29 (10^-5)\",\"Alphatorquevirus homin3 (10^-6)\",\"Alphatorquevirus homin5 (10^-6)\",\"Alphatorquevirus homin6 (10^-5)\",\"Alphatorquevirus homin7 (10^-6)\",\"Alphatorquevirus homin9 (10^-6)\",\"Torque teno virus 11 (10^-5)\",\"Torque teno virus 12 (10^-6)\",\"Torque teno virus 16 (10^-5)\",\"Torque teno virus 22 (10^-5)\",\"Torque teno virus 27 (10^-7)\",\"Torque teno virus 28 (10^-5)\",\"Torque teno virus 8 (10^-6)\",\"Betatorquevirus homini1 (10^-4)\",\"Betatorquevirus homini10 (10^-5)\",\"Betatorquevirus homini11 (10^-4)\",\"Betatorquevirus homini12 (10^-3)\",\"Betatorquevirus homini16 (10^-5)\",\"Betatorquevirus homini18 (10^-4)\",\"Betatorquevirus homini2 (10^-5)\",\"Betatorquevirus homini26 (10^-5)\",\"Betatorquevirus homini27 (10^-5)\",\"Betatorquevirus homini3 (10^-5)\",\"Betatorquevirus homini5 (10^-5)\",\"Betatorquevirus homini6 (10^-6)\",\"Betatorquevirus homini7 (10^-4)\",\"Betatorquevirus homini8 (10^-5)\",\"Betatorquevirus homini9 (10^-4)\",\"TTV-like mini virus (10^-4)\",\"Gammatorquevirus homidi1 (10^-6)\",\"Gammatorquevirus homidi10 (10^-6)\",\"Gammatorquevirus homidi11 (10^-6)\",\"Gammatorquevirus homidi12 (10^-6)\",\"Gammatorquevirus homidi13 (10^-6)\",\"Gammatorquevirus homidi14 (10^-6)\",\"Gammatorquevirus homidi2 (10^-6)\",\"Gammatorquevirus homidi3 (10^-6)\",\"Gammatorquevirus homidi4 (10^-6)\",\"Gammatorquevirus homidi5 (10^-6)\",\"Gammatorquevirus homidi6 (10^-6)\",\"Gammatorquevirus homidi7 (10^-5)\",\"Gammatorquevirus homidi8 (10^-5)\",\"Gammatorquevirus homidi9 (10^-7)\",\"Ledantevirus ledantec (10^-7)\",\"Paslahepevirus balayani (10^-7)\",\"Pegivirus hominis (10^-3)\",\"Anelloviridae sp. (10^-2)\",\"Micro Torque teno virus (10^-4)\",\"Microviridae sp. (10^-3)\",\"Microvirus sp. (10^-5)\",\"Small anellovirus (10^-6)\",\"Torque teno virus (10^-5)\",\"Vesiculovirus indiana (10^-3)\",\"Vesiculovirus isfahan (10^-7)\",\"Vesiculovirus maraba (10^-7)\"],\"group\":[\"Anelloviridae (10^-2)\",\"Flaviviridae (10^-3)\",\"Hepeviridae (10^-7)\",\"Microviridae (10^-3)\",\"Rhabdoviridae (10^-3)\",\"Alphatorquevirus (10^-4)\",\"Betatorquevirus (10^-3)\",\"Gammatorquevirus (10^-5)\",\"Ledantevirus (10^-7)\",\"Paslahepevirus (10^-7)\",\"Pegivirus (10^-3)\",\"Unknown Genus (0)\",\"Vesiculovirus (10^-3)\",\"Alphatorquevirus homin1 (10^-5)\",\"Alphatorquevirus homin10 (10^-6)\",\"Alphatorquevirus homin13 (10^-6)\",\"Alphatorquevirus homin15 (10^-4)\",\"Alphatorquevirus homin17 (10^-6)\",\"Alphatorquevirus homin18 (10^-6)\",\"Alphatorquevirus homin19 (10^-6)\",\"Alphatorquevirus homin20 (10^-6)\",\"Alphatorquevirus homin21 (10^-6)\",\"Alphatorquevirus homin24 (10^-5)\",\"Alphatorquevirus homin29 (10^-5)\",\"Alphatorquevirus homin3 (10^-6)\",\"Alphatorquevirus homin5 (10^-6)\",\"Alphatorquevirus homin6 (10^-5)\",\"Alphatorquevirus homin7 (10^-6)\",\"Alphatorquevirus homin9 (10^-6)\",\"Torque teno virus 11 (10^-5)\",\"Torque teno virus 12 (10^-6)\",\"Torque teno virus 16 (10^-5)\",\"Torque teno virus 22 (10^-5)\",\"Torque teno virus 27 (10^-7)\",\"Torque teno virus 28 (10^-5)\",\"Torque teno virus 8 (10^-6)\",\"Betatorquevirus homini1 (10^-4)\",\"Betatorquevirus homini10 (10^-5)\",\"Betatorquevirus homini11 (10^-4)\",\"Betatorquevirus homini12 (10^-3)\",\"Betatorquevirus homini16 (10^-5)\",\"Betatorquevirus homini18 (10^-4)\",\"Betatorquevirus homini2 (10^-5)\",\"Betatorquevirus homini26 (10^-5)\",\"Betatorquevirus homini27 (10^-5)\",\"Betatorquevirus homini3 (10^-5)\",\"Betatorquevirus homini5 (10^-5)\",\"Betatorquevirus homini6 (10^-6)\",\"Betatorquevirus homini7 (10^-4)\",\"Betatorquevirus homini8 (10^-5)\",\"Betatorquevirus homini9 (10^-4)\",\"TTV-like mini virus (10^-4)\",\"Gammatorquevirus homidi1 (10^-6)\",\"Gammatorquevirus homidi10 (10^-6)\",\"Gammatorquevirus homidi11 (10^-6)\",\"Gammatorquevirus homidi12 (10^-6)\",\"Gammatorquevirus homidi13 (10^-6)\",\"Gammatorquevirus homidi14 (10^-6)\",\"Gammatorquevirus homidi2 (10^-6)\",\"Gammatorquevirus homidi3 (10^-6)\",\"Gammatorquevirus homidi4 (10^-6)\",\"Gammatorquevirus homidi5 (10^-6)\",\"Gammatorquevirus homidi6 (10^-6)\",\"Gammatorquevirus homidi7 (10^-5)\",\"Gammatorquevirus homidi8 (10^-5)\",\"Gammatorquevirus homidi9 (10^-7)\",\"Ledantevirus ledantec (10^-7)\",\"Paslahepevirus balayani (10^-7)\",\"Pegivirus hominis (10^-3)\",\"Anelloviridae sp. (10^-2)\",\"Micro Torque teno virus (10^-4)\",\"Microviridae sp. (10^-3)\",\"Microvirus sp. (10^-5)\",\"Small anellovirus (10^-6)\",\"Torque teno virus (10^-5)\",\"Vesiculovirus indiana (10^-3)\",\"Vesiculovirus isfahan (10^-7)\",\"Vesiculovirus maraba (10^-7)\"]},\"options\":{\"NodeID\":\"name\",\"NodeGroup\":\"name\",\"LinkGroup\":null,\"colourScale\":\"d3.scaleOrdinal(d3.schemeCategory20);\",\"fontSize\":14,\"fontFamily\":null,\"nodeWidth\":25,\"nodePadding\":10,\"units\":\"\",\"margin\":{\"top\":null,\"right\":null,\"bottom\":null,\"left\":null},\"iterations\":32,\"sinksRight\":true}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/d3-4.5.0/d3.min.js\"></script>\n<script src=\"../site_libs/sankey-1/sankey.js\"></script>\n<script src=\"../site_libs/sankeyNetwork-binding-0.4/sankeyNetwork.js\"></script>\n<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}