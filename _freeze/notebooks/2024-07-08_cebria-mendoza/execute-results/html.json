{
  "hash": "f4349048ba03ea8d546aabdf79e5ab40",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Workflow of Cebria-Mendoza et al. (2021)\"\nsubtitle: \"Pooled plasma from Spain\"\nauthor: \"Harmon Bhasin\"\ndate: 2024-07-08\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n    code-link: true\n    df-print: paged\nexecute: \n  freeze: auto\neditor: visual\ntitle-block-banner: \"#de2d26\"\n---\n\n\n\n\n\n\nTHIS IS CURRENTLY A WORK IN PROGRESS!\n\nAs a part of my time here, I'm exploring blood surveillance for a potential option for the NAO to pursue. Instead of writing a manuscript, we've decided to make three blog posts. The first blog post will cover why we're considering blood, the second blog post will cover the blood industry, and the last blog post will look at the composition of blood.\n\nAfter exhaustively looking at a bunch of studies, we've decided upon two. This is the analysis of the first study. One of the steps in doing so is analyzing relative abundance data in the healthy population. In this post, I analyze [Cebria-Mendoza 2021](https://doi.org/10.3390/v13112322), a dataset with 60 samples from \\~600 healthy blood donors in Spain.\n\n# The raw data\n\nThis dataset is composed of 60 samples which come from plasma pools of anywhere from 8-13 people from Spain. In total, there were 567 healthy individuals that have contributed to this pool. The demographic information that I have for each pool is the gender and age of the donor as well as the number that has contributed to each pool. They did DNA+RNA sampling for each pool, but the reads were not separately sequenced (so we cannot separate them?).\n\nIn total, these 60 samples contained 230M read pairs. The samples had 2.3M - 4.8M (mean 3.8M) read pairs each.\n\nRead and base counts of the raw data were consistent with the previous pipeline version, as were read qualities, adapter content, and measured duplication levels.\n\n\n\n\n\n\n\n\n\nRead quality in all the samples look quite good/consistent.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare data\nbasic_stats_raw_metrics <- basic_stats_raw %>%\n  select(library,\n         pool_size,\n         `# Read pairs` = n_read_pairs,\n         `Total base pairs\\n(approx)` = n_bases_approx,\n         `% Duplicates\\n(FASTQC)` = percent_duplicates) %>%\n  pivot_longer(-(library:pool_size), names_to = \"metric\", values_to = \"value\") %>%\n  mutate(metric = fct_inorder(metric)) \n\n# Set up plot templates\n\ng_basic <- ggplot(basic_stats_raw_metrics, aes(x = library, y = value, fill = pool_size)) +\n  geom_col(position = \"dodge\") +\n  scale_x_discrete() +\n  scale_y_continuous(expand = c(0, 0)) +\n  expand_limits(y = c(0, 100)) +\n  scale_fill_brewer(palette = \"Accent\") + \n  facet_grid(metric ~ ., scales = \"free\", space = \"free_x\", switch = \"y\") +\n  theme_kit + theme(\n    axis.title.y = element_blank(),\n    strip.text.y = element_text(face = \"plain\")\n  )\ng_basic\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-basic-stats-1.png){width=864}\n:::\n:::\n\n\n\n\nTODO interpret the below plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up plotting templates\ng_qual_raw <- ggplot(mapping=aes(linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters_raw <- g_qual_raw + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats_raw) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,NA),\n                     breaks = seq(0,100,10), expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0)) +\n  facet_grid(.~adapter)\ng_adapters_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-raw-quality-1.png){width=768}\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base_raw <- g_qual_raw +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats_raw) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0))\ng_quality_base_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-raw-quality-2.png){width=768}\n:::\n\n```{.r .cell-code}\ng_quality_seq_raw <- g_qual_raw +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats_raw) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0))\ng_quality_seq_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-raw-quality-3.png){width=768}\n:::\n:::\n\n\n\n\n# Preprocessing\n\n## High-level metrics\n\nThe average fraction of reads at each stage in the preprocessing pipeline is shown in the following table. On average, cleaning & deduplication removed about 57% of total read pairs, primarily during duplication. Ribodepletion removed about 6-8% during each round.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# TODO: Group by pool size as well\n# Count read losses\nn_reads_rel <- basic_stats %>% \n  select(sample, pool_size, stage, percent_duplicates, n_read_pairs) %>%\n  group_by(sample, pool_size) %>% \n  arrange(sample, stage) %>%\n  mutate(p_reads_retained = n_read_pairs / lag(n_read_pairs),\n         p_reads_lost = 1 - p_reads_retained,\n         p_reads_retained_abs = n_read_pairs / n_read_pairs[1],\n         p_reads_lost_abs = 1-p_reads_retained_abs,\n         p_reads_lost_abs_marginal = p_reads_lost_abs - lag(p_reads_lost_abs))\nn_reads_rel_display <- n_reads_rel %>% \n  rename(Stage=stage) %>% \n  group_by(Stage) %>% \n  summarize(`% Total Reads Lost (Cumulative)` = paste0(round(min(p_reads_lost_abs*100),1), \"-\", round(max(p_reads_lost_abs*100),1), \" (mean \", round(mean(p_reads_lost_abs*100),1), \")\"),\n            `% Total Reads Lost (Marginal)` = paste0(round(min(p_reads_lost_abs_marginal*100),1), \"-\", round(max(p_reads_lost_abs_marginal*100),1), \" (mean \", round(mean(p_reads_lost_abs_marginal*100),1), \")\"), .groups=\"drop\") %>% \n  filter(Stage != \"raw_concat\") %>%\n  mutate(Stage = Stage %>% as.numeric %>% factor(labels=c(\"Trimming & filtering\", \"Deduplication\", \"Initial ribodepletion\", \"Secondary ribodepletion\")))\nn_reads_rel_display\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Stage\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Cumulative)\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Marginal)\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Trimming & filtering\",\"2\":\"0-5 (mean 1.4)\",\"3\":\"0-5 (mean 1.4)\"},{\"1\":\"Deduplication\",\"2\":\"44.2-70.6 (mean 55.9)\",\"3\":\"44.2-67.8 (mean 54.5)\"},{\"1\":\"Initial ribodepletion\",\"2\":\"53.9-77.2 (mean 63.8)\",\"3\":\"3.2-15.6 (mean 7.9)\"},{\"1\":\"Secondary ribodepletion\",\"2\":\"57.7-85.7 (mean 70.2)\",\"3\":\"2.2-12.6 (mean 6.4)\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng_stage_trace <- ggplot(basic_stats, aes(x=stage, group=sample)) +\n  theme_kit\n\n# Plot reads over preprocessing\ng_reads_stages <- g_stage_trace +\n  geom_line(aes(y=n_read_pairs)) +\n  scale_y_continuous(\"# Read pairs\", expand=c(0,0), limits=c(0,NA))\ng_reads_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-figures-1.png){width=576}\n:::\n\n```{.r .cell-code}\n# Plot relative read losses during preprocessing\ng_reads_rel <- ggplot(n_reads_rel, \n                      aes(x=stage, group=sample)) +\n  geom_line(aes(y=p_reads_lost_abs_marginal)) +\n  scale_y_continuous(\"% Total Reads Lost\", expand=c(0,0), \n                     labels = function(x) x*100) +\n  theme_kit\ng_reads_rel\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-figures-2.png){width=576}\n:::\n:::\n\n\n\n\nTODO interpret the below plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_qual <- ggplot(mapping=aes(linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters <- g_qual + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,20),\n                     breaks = seq(0,50,10), expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~adapter)\ng_adapters\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-quality-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base <- g_qual +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~.)\ng_quality_base\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-quality-2.png){width=672}\n:::\n\n```{.r .cell-code}\ng_quality_seq <- g_qual +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0)) +\n  facet_grid(stage~., scales = \"free_y\")\ng_quality_seq\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-quality-3.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstage_dup <- basic_stats %>% group_by(stage) %>% \n  summarize(dmin = min(percent_duplicates), dmax=max(percent_duplicates),\n            dmean=mean(percent_duplicates), .groups = \"drop\")\n\ng_dup_stages <- g_stage_trace +\n  geom_line(aes(y=percent_duplicates)) +\n  scale_y_continuous(\"% Duplicates\", limits=c(0,NA), expand=c(0,0))\ng_dup_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-dedup-1.png){width=576}\n:::\n\n```{.r .cell-code}\ng_readlen_stages <- g_stage_trace + geom_line(aes(y=mean_seq_len)) +\n  scale_y_continuous(\"Mean read length (nt)\", expand=c(0,0), limits=c(0,NA))\ng_readlen_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-dedup-2.png){width=576}\n:::\n:::\n\n\n\n\n## Effectiveness of ribodepletion\n\nSome samples had anywhere as low as 10% all the way up to 60% ribosomal reads.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate reads lost during ribodepletion (approximation for % ribosomal reads)\nreads_ribo <- n_reads_rel %>% \n  filter(stage %in% c(\"dedup\", \"ribo_secondary\")) %>% \n  group_by(sample) %>% \n  summarize(p_reads_ribo=1-n_read_pairs[2]/n_read_pairs[1], .groups = \"drop\") %>%\n  inner_join(libraries, by = 'sample')\nreads_ribo_summ <- reads_ribo %>%\n  group_by(sample) %>%\n  summarize(min=min(p_reads_ribo), max=max(p_reads_ribo),\n            mean=mean(p_reads_ribo), .groups = \"drop\") %>%\n  inner_join(libraries, by = 'sample')\ng_reads_ribo <- ggplot(reads_ribo, \n                       aes(x=library, y=p_reads_ribo)) +\n  geom_point() + \n  scale_y_continuous(name=\"Approx % ribosomal reads\", limits=c(0,1),\n                     breaks=seq(0,1,0.2), expand=c(0,0), labels = function(y) y*100)+\n  theme_kit\ng_reads_ribo\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/ribo-frac-1.png){width=576}\n:::\n:::\n\n\n\n\n# Taxonomic composition\n\n## High-level composition\n\nAs before, to assess the high-level composition of the reads, I ran the ribodepleted files through Kraken2 and summarized the results with Bracken. This time, however, I used the full Standard database instead of Standard-16, and I also used a newer iteration of the database.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare plotting templates\ng_comp_base <- ggplot(mapping=aes(x=library, y=p_reads, fill=classification)) +\n  scale_x_discrete(name=\"Plasma pool\") +\n  theme_kit + \n  theme(plot.title = element_text(hjust=0, face=\"plain\", size=rel(1.5)))\nscale_y_pc_reads <- purrr::partial(scale_y_continuous, name = \"% Reads\",\n                                   expand = c(0,0), labels = function(y) y*100)\ngeom_comp <- purrr::partial(geom_col, position = \"stack\", width = 1)\n\n# Plot overall composition\ng_comp <- g_comp_base + geom_comp(data = comp) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_brewer(palette = \"Set1\", name = \"Classification\") +\n  ggtitle(\"Read composition (all reads, all groups)\")\ng_comp\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-composition-all-1.png){width=768}\n:::\n\n```{.r .cell-code}\n# Repeat for classified reads only\npalette_assigned <- brewer.pal(9, \"Set1\")[5:9]\ng_comp_assigned <- g_comp_base + \n  geom_comp(data = comp_assigned) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_manual(values=palette_assigned, name = \"Classification\") +\n  ggtitle(\"Read composition (assigned reads, all groups)\")\ng_comp_assigned\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-composition-all-2.png){width=768}\n:::\n\n```{.r .cell-code}\n# Plot composition of minor components\npalette_minor <- brewer.pal(9, \"Set1\")[6:9]\ng_comp_minor <- g_comp_base + \n  geom_comp(data=comp_minor) +\n  scale_y_pc_reads() +\n  scale_fill_manual(values=palette_minor, name = \"Classification\") +\n  ggtitle(\"Read composition (all reads, minor groups)\")\ng_comp_minor\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-composition-all-3.png){width=768}\n:::\n\n```{.r .cell-code}\ng_comp_assigned_minor <- g_comp_base + \n  geom_comp(data=comp_assigned_minor) +\n  scale_y_pc_reads() +\n  scale_fill_manual(values=palette_minor, name = \"Classification\") +\n  ggtitle(\"Read composition (assigned reads, minor groups)\")\ng_comp_assigned_minor\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-composition-all-4.png){width=768}\n:::\n:::\n\n\n\n\nTODO analyze this above\n\n## Total viral content\n\nTotal viral fraction average $1.81 \\times 10^{-2}$ across samples. As a fraction of assigned (rather than total) reads, this jumped to $1.60 \\times {-1}$:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_reads_viral_all <- comp %>% filter(classification == \"Viral\") %>%\n  mutate(read_group = \"All reads\")\np_reads_viral_assigned <- comp_assigned %>% filter(classification == \"Viral\") %>%\n  mutate(read_group = \"Classified reads\")\np_reads_viral <- bind_rows(p_reads_viral_all, p_reads_viral_assigned)\n\n# Plot\ng_viral <- ggplot(p_reads_viral, aes(x=library, y=p_reads)) +\n  geom_point() +\n  scale_x_discrete(name=\"Plasma pool\") +\n  scale_y_log10(name=\"Viral read fraction\") +\n  facet_grid(.~read_group, scales = \"free\") +\n  guides(color=guide_legend(nrow=2), shape=guide_legend(nrow=2),\n         linetype=guide_legend(nrow=2)) +\n  theme_kit\ng_viral\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/p-viral-1.png){width=672}\n:::\n:::\n\n\n\n\n## Taxonomic composition of viruses\n\nThe two dominant viruses we see are Anellovirdae and Rhabdovirdae. Followed by these two viral families is Flavivirdae, and lastly, also by a much smaller percent, Microviridae.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get viral taxonomy\nviral_taxa_path <- file.path(data_dir, \"total-virus-db.tsv.gz\")\nviral_taxa <- read_tsv(viral_taxa_path, show_col_types = FALSE)\n\n# Get Kraken reports\nreports_path <- file.path(tax_final_dir, \"kraken_reports.tsv.gz\")\nreports <- read_tsv(reports_path, show_col_types = FALSE) %>%\n  inner_join(libraries, by=\"sample\") %>% arrange(sample)\n\n# Filter to viral taxa\nkraken_reports_viral <- filter(reports, taxid %in% viral_taxa$taxid) %>%\n  group_by(sample) %>%\n  mutate(p_reads_viral = n_reads_clade/n_reads_clade[1])\nkraken_reports_viral_cleaned <- kraken_reports_viral %>%\n  select(-pc_reads_total, -n_reads_direct, -contains(\"minimizers\")) %>%\n  select(name, taxid, p_reads_viral, n_reads_clade, everything()) %>% ungroup\n\nviral_classes <- kraken_reports_viral_cleaned %>% filter(rank == \"C\")\nviral_families <- kraken_reports_viral_cleaned %>% filter(rank == \"F\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmajor_threshold <- 0.01\n\n# Identify major viral families\nviral_families_major_tab <- viral_families %>% \n  group_by(name, taxid) %>%\n  summarize(p_reads_viral_max = max(p_reads_viral), .groups=\"drop\") %>%\n  filter(p_reads_viral_max >= major_threshold)\nviral_families_major_list <- viral_families_major_tab %>% pull(name)\nviral_families_major <- viral_families %>% \n  filter(name %in% viral_families_major_list) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_minor <- viral_families_major %>% \n  group_by(sample) %>%\n  summarize(p_reads_viral_major = sum(p_reads_viral), .groups = \"drop\") %>%\n  mutate(name = \"Other\", taxid=NA, p_reads_viral = 1-p_reads_viral_major) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_display <- viral_families_major %>% \n  bind_rows(viral_families_minor) %>%\n  arrange(desc(p_reads_viral)) %>% \n  mutate(name = factor(name, levels=c(viral_families_major_list, \"Other\"))) %>%\n  rename(p_reads = p_reads_viral, classification=name) %>%\n  inner_join(libraries, by='sample')\n\n# Plot\ng_families <- g_comp_base + \n  geom_comp(data=viral_families_display) +\n  scale_y_continuous(name=\"% Viral Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_brewer(palette = 'Accent')\ng_families\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/viral-family-composition-1.png){width=768}\n:::\n:::\n\n\n\n\nExcluding *Anellovirdae* and *Rhabdovirdae*, remaining viral sequences are distributed across a wide variety:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmajor_threshold_adj <- 0.05\n\n# Adjust viral family counts\nviral_families_adj <- viral_families %>%\n  filter(!(name %in% c(\"Rhabdoviridae\",\"Anelloviridae\"))) %>%\n  group_by(sample) %>%\n  mutate(p_reads_viral = p_reads_viral/sum(p_reads_viral))\n\n# Identify major viral families\nviral_families_major_tab <- viral_families_adj %>% \n  group_by(name, taxid) %>%\n  summarize(p_reads_viral_max = max(p_reads_viral), .groups=\"drop\") %>%\n  filter(p_reads_viral_max >= major_threshold)\nviral_families_major_list <- viral_families_major_tab %>% pull(name)\nviral_families_major <- viral_families_adj %>% \n  filter(name %in% viral_families_major_list) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_minor <- viral_families_major %>% \n  group_by(sample) %>%\n  summarize(p_reads_viral_major = sum(p_reads_viral), .groups = \"drop\") %>%\n  mutate(name = \"Other\", taxid=NA, p_reads_viral = 1-p_reads_viral_major) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_display <- viral_families_major %>% \n  bind_rows(viral_families_minor) %>%\n  arrange(desc(p_reads_viral)) %>% \n  mutate(name = factor(name, levels=c(viral_families_major_list, \"Other\"))) %>%\n  rename(p_reads = p_reads_viral, classification=name) %>%\n  inner_join(libraries, by = 'sample')\n\n# Plot\npalette_viral <- c(brewer.pal(12, \"Set3\"), brewer.pal(8, \"Dark2\"), brewer.pal(9, \"Set1\"))\ng_families_adj <- g_comp_base + \n  geom_comp(data=viral_families_display) +\n  scale_y_continuous(name=\"% Viral Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_manual(values=palette_viral, name = \"Viral class\")\ng_families_adj\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/viral-family-composition-exclusion-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get viral taxonomy\nviral_taxa_path <- file.path(data_dir, \"total-virus-db.tsv.gz\")\nviral_taxa <- read_tsv(viral_taxa_path, show_col_types = FALSE)\n\n# Get Kraken reports\nreports_path <- file.path(tax_final_dir, \"kraken_reports.tsv.gz\")\nreports <- read_tsv(reports_path, show_col_types = FALSE) %>%\n  inner_join(libraries, by=\"sample\") %>% arrange(sample)\n\n# Filter to viral taxa\nkraken_reports_viral <- filter(reports, taxid %in% viral_taxa$taxid) %>%\n  group_by(sample) %>%\n  mutate(p_reads_viral = n_reads_clade/n_reads_clade[1])\nkraken_reports_viral_cleaned <- kraken_reports_viral %>%\n  select(-pc_reads_total, -n_reads_direct, -contains(\"minimizers\")) %>%\n  select(name, taxid, p_reads_viral, n_reads_clade, everything()) %>% \n  rename(old_rank=rank) %>% ungroup\n\nmajor_threshold <- 0.01\n\n# Identify major viral families\nall_virus_name <- kraken_reports_viral_cleaned %>% \n  group_by(name, taxid) %>%\n  summarize(p_reads_viral_max = max(p_reads_viral), .groups=\"drop\") %>%\n  filter(p_reads_viral_max >= major_threshold) %>%\n  pull(name)\n\nkraken_reports_viral_cleaned <- kraken_reports_viral_cleaned %>% \n  filter(name %in% all_virus_name) %>%\n  select(name, taxid, sample, p_reads_viral, n_reads_clade)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nranks_of_interest <- c('family','genus', 'species')\n\n# Filter the ranks we're interested in\nfiltered_taxa <- viral_taxa %>%\n  filter(rank %in% ranks_of_interest)\n\n# Join the datasets and create the links dataframe\nlinks <- kraken_reports_viral_cleaned %>%\n  inner_join(filtered_taxa, by = c(\"taxid\", \"name\")) %>%\n  inner_join(filtered_taxa, by = c(\"parent_taxid\" = \"taxid\"), suffix = c(\"\", \"_parent\")) %>%\n  #filter(rank != rank_parent) %>%  # Ensure source and target are not in the same rank\n  select(source = name_parent, target = name, value = p_reads_viral)\n\n# Create nodes dataframe from unique names in links\nnodes <- data.frame(\n  name = c(links$source, links$target) %>% unique()\n) %>%\n  mutate(node = row_number() - 1)  # zero-indexed for networkD3\n\n# Join rank information to nodes\nnodes <- nodes %>%\n  left_join(filtered_taxa, by = c(\"name\")) %>%\n  select(name, node, rank)\n\n# Add IDs to links dataframe\nlinks <- links %>%\n  left_join(nodes, by = c(\"source\" = \"name\")) %>%\n  rename(IDsource = node) %>%\n  left_join(nodes, by = c(\"target\" = \"name\")) %>%\n  rename(IDtarget = node)\n\n# Aggregate link values\nlinks_aggregated <- links %>%\n  group_by(IDsource, IDtarget, source, target) %>%\n  summarise(value = sum(value), .groups = \"drop\")\n\n# Get rid of some warnings\nlinks_aggregated <- as.data.frame(links_aggregated)\nnodes <- as.data.frame(nodes)\n\n# Create Sankey diagram\nsankey_diagram <- sankeyNetwork(Links = links_aggregated, \n                                Nodes = nodes,\n                                Source = \"IDsource\", \n                                Target = \"IDtarget\",\n                                Value = \"value\", \n                                NodeID = \"name\",\n                                fontSize = 12,\n                                NodeGroup = \"rank\",\n                                nodeWidth = 30,\n                                height = 800,\n                                width = 1000,\n                                sinksRight = FALSE)\n\n# Display the diagram\nsankey_diagram\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-76a43412dfd86c563e3a\" style=\"width:100%;height:520px;\" class=\"sankeyNetwork html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-76a43412dfd86c563e3a\">{\"x\":{\"links\":{\"source\":[0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,7,8],\"target\":[9,2,3,4,10,11,12,13,14,15,16,17,18,19,20,21,34,35,36,37,38,39,40,41,42,43,55,63,64,22,23,24,25,26,27,28,52,53,54,62,65,66,29,30,31,44,45,46,47,48,49,50,51,57,58,59,60,61,32,33,8,56],\"value\":[22.99411757092694,11.31556291961527,3.731586761885968,10.17137446032396,0.8670464032319602,0.3947440474166882,0.3655028735121646,0.3672069923363891,0.4783774246590781,0.4653328728487668,0.1122209964432014,0.5221695357961852,2.059172702894463,0.4364136182696154,0.2649441124656995,0.2157910421225193,1.203141753873413,0.02100275137620387,0.2322299083336878,0.479498734890951,0.159006893952541,0.1514991760010667,0.09066336143662954,0.1664376632638623,0.0236564417495965,0.1833070137127741,0.7428908356661834,0.09344472630096157,0.742415116964228,0.1950285648271113,0.1634817374147788,0.3053986571136666,0.06523648595399491,0.3030387966708352,0.5522714851894654,0.1800403416643682,0.7864220869230775,0.1270636665237107,0.0349446583322232,0.07762566428050152,0.0678762579632244,0.2729489024370041,0.3122070657294552,1.107241602267409,0.3093341320951626,0.5272312815035179,0.1291096631592203,0.388269147451955,0.1757135414674187,0.2392645815521054,0.7432270752169252,0.1414767420797091,0.431471427611955,0.04589634769317037,0.3072817811722484,0.3392103490695165,0.04607180236600805,1.460735167107232,0.1592497858879885,0.1872844721450714,1.581227289204769,1.579920234718376]},\"nodes\":{\"name\":[\"Vesiculovirus\",\"Anelloviridae\",\"Alphatorquevirus\",\"Gammatorquevirus\",\"Betatorquevirus\",\"Gequatrovirus\",\"Alphatrevirus\",\"Flaviviridae\",\"Pegivirus\",\"Vesiculovirus indiana\",\"Alphatorquevirus homin18\",\"Alphatorquevirus homin19\",\"Torque teno virus 12\",\"Alphatorquevirus homin10\",\"Torque teno virus 22\",\"Alphatorquevirus homin13\",\"Alphatorquevirus homin20\",\"Alphatorquevirus homin15\",\"Torque teno virus 16\",\"Alphatorquevirus homin29\",\"Torque teno virus 8\",\"Alphatorquevirus homin6\",\"Gammatorquevirus homidi9\",\"Gammatorquevirus homidi14\",\"Gammatorquevirus homidi6\",\"Gammatorquevirus homidi15\",\"Gammatorquevirus homidi5\",\"Gammatorquevirus homidi12\",\"Gammatorquevirus homidi10\",\"Betatorquevirus homini8\",\"Betatorquevirus homini1\",\"Betatorquevirus homini11\",\"Gequatrovirus talmos\",\"Alphatrevirus ID62\",\"Alphatorquevirus homin24\",\"Torque teno virus 23\",\"Alphatorquevirus homin3\",\"Torque teno virus 11\",\"Alphatorquevirus homin5\",\"Torque teno virus 27\",\"Alphatorquevirus homin7\",\"Alphatorquevirus homin21\",\"Alphatorquevirus homin17\",\"Alphatorquevirus homin4\",\"Betatorquevirus homini7\",\"Betatorquevirus homini3\",\"Betatorquevirus homini6\",\"Betatorquevirus homini9\",\"Betatorquevirus homini5\",\"Betatorquevirus homini12\",\"Betatorquevirus homini26\",\"Betatorquevirus homini10\",\"Gammatorquevirus homidi8\",\"Gammatorquevirus homidi7\",\"Gammatorquevirus homidi2\",\"Torque teno virus 28\",\"Pegivirus hominis\",\"Betatorquevirus homini2\",\"Betatorquevirus homini16\",\"Betatorquevirus homini4\",\"Betatorquevirus homini27\",\"Betatorquevirus homini18\",\"Gammatorquevirus homidi1\",\"Alphatorquevirus homin9\",\"Alphatorquevirus homin1\",\"Gammatorquevirus homidi11\",\"Gammatorquevirus homidi4\"],\"group\":[\"genus\",\"family\",\"genus\",\"genus\",\"genus\",\"genus\",\"genus\",\"family\",\"genus\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\",\"species\"]},\"options\":{\"NodeID\":\"name\",\"NodeGroup\":\"rank\",\"LinkGroup\":null,\"colourScale\":\"d3.scaleOrdinal(d3.schemeCategory20);\",\"fontSize\":12,\"fontFamily\":null,\"nodeWidth\":30,\"nodePadding\":10,\"units\":\"\",\"margin\":{\"top\":null,\"right\":null,\"bottom\":null,\"left\":null},\"iterations\":32,\"sinksRight\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n## Number of reads for viruses of interest\n\n\n\n\n\n\n\n\n\nWe're particulary interested in the following viruses:\n\n1.  Hepatitis B\n    -   Family: Hepadnaviridae\n    -   Genus: Orthohepadnavirus\n    -   Species: Hepatitis B virus\n2.  Hepatitis C\n    -   Family: Flaviviridae\n    -   Genus: Hepacivirus\n    -   Species: Hepatitis C virus\n3.  EBV (Epstein-Barr virus)\n    -   Family: Herpesviridae\n    -   Genus: Lymphocryptovirus\n    -   Species: Human gammaherpesvirus 4\n4.  CMV (Cytomegalovirus)\n    -   Family: Herpesviridae\n    -   Genus: Cytomegalovirus\n    -   Species: Human betaherpesvirus 5\n5.  HIV-1 (Human Immunodeficiency Virus type 1)\n    -   Family: Retroviridae\n    -   Genus: Lentivirus\n    -   Species: Human immunodeficiency virus 1\n6.  Anelloviridae\n    -   Family: Anelloviridae\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#reads_post_process <- basic_stats %>% filter(stage == 'ribo_secondary') %>% \n  #select(sample, n_read_pairs)\n\nviral_families_interest <- viral_families %>% filter(name == \"Hepadnaviridae\" | \n    name ==  \"Flaviviridae\" | \n    name ==  \"Orthoherpesviridae\" |\n    name ==  \"Herpesviridae\" |\n    name ==  \"Retroviridae\" |\n    name == \"Anelloviridae\") %>% group_by(name) %>% summarize(sum=sum(n_reads_clade))\n\nviral_families_interest\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"sum\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Anelloviridae\",\"2\":\"2738610\"},{\"1\":\"Flaviviridae\",\"2\":\"73065\"},{\"1\":\"Orthoherpesviridae\",\"2\":\"2\"},{\"1\":\"Retroviridae\",\"2\":\"15\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Species\n# Hepatitis B virus <- 10407\n# Hepatitis C virus <- 10407\n# HIV - 1 <- 11676\n\n# viral_taxa %>% filter(str_detect(tolower(name),'hepatitis') | str_detect(tolower(name),'human immunodeficiency virus') | str_detect(tolower(name),'gammaherpesvirus') | str_detect(tolower(name),'betaherpesvirus'))\n\nviral_genus_interest <- kraken_reports_viral_cleaned %>% filter(str_detect(tolower(name),'orthohepadnavirus') | str_detect(tolower(name),'hepacivirus') | str_detect(tolower(name),'lymphocryptovirus') | str_detect(tolower(name),'cytomegalovirus') | str_detect(tolower(name), 'lentivirus')) %>% group_by(name) %>% summarize(sum=sum(n_reads_clade))\n\nviral_genus_interest\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"sum\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Species\n# Hepatitis B virus <- 10407\n# Hepatitis C virus <- 10407\n# HIV - 1 <- 11676\n\n# viral_taxa %>% filter(str_detect(tolower(name),'hepatitis') | str_detect(tolower(name),'human immunodeficiency virus') | str_detect(tolower(name),'gammaherpesvirus') | str_detect(tolower(name),'betaherpesvirus'))\n\nviral_species_interest <- kraken_reports_viral_cleaned %>% filter(str_detect(tolower(name),'hepatitis') | str_detect(tolower(name),'human immunodeficiency virus') | str_detect(tolower(name),'gammaherpesvirus') | str_detect(tolower(name),'betaherpesvirus')) %>% group_by(name) %>% summarize(sum=sum(n_reads_clade))\n\nviral_species_interest\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"sum\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Murid gammaherpesvirus 7\",\"2\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n# Human-infecting virus reads\n\n## Overall relative abundance\n\nI calculated the relative abundance of human-infecting viruses in two ways:\n\n-   First, as the total number of deduplicated human-virus reads in each sample, divided by the number of raw reads (\"All reads\").\n\n-   Second, as a fraction of preprocessed (cleaned, deduplicated, computationally ribodepleted) reads (\"Preprocessed reads\").\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import and format reads\nhv_reads_path <- file.path(hv_dir, \"hv_hits_putative_collapsed.tsv.gz\")\nmrg_hv <- read_tsv(hv_reads_path, show_col_types = FALSE) %>%\n  inner_join(libraries, by=\"sample\") %>% arrange(sample) %>%\n  mutate(kraken_label = ifelse(assigned_hv, \"Kraken2 HV assignment\",\n                               \"No Kraken2 assignment\")) %>%\n  mutate(adj_score_max = pmax(adj_score_fwd, adj_score_rev),\n         highscore = adj_score_max >= 20,\n         hv_status = assigned_hv | highscore) %>%\n  rename(taxid_all = taxid, taxid = taxid_best)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get raw read counts\nread_counts_raw <- filter(basic_stats_raw) %>%\n  select(sample, n_reads_raw = n_read_pairs)\nread_counts_preproc <- basic_stats %>% filter(stage == \"ribo_initial\") %>%\n  select(sample, n_reads_preproc = n_read_pairs)\n\n# Get HV read counts\nread_counts_hv <- mrg_hv %>% filter(hv_status) %>% \n  group_by(sample) %>% \n  count(name=\"n_reads_hv\")\nread_counts <- read_counts_raw %>%\n  left_join(read_counts_hv, by=c(\"sample\")) %>%\n  mutate(n_reads_hv = replace_na(n_reads_hv, 0)) %>%\n  left_join(read_counts_preproc, by=c(\"sample\")) %>%\n  inner_join(libraries, by=c(\"sample\")) %>%\n  select(sample, n_reads_raw, n_reads_preproc, n_reads_hv) %>%\n  mutate(n_samples = 1,\n         p_reads_total = n_reads_hv/n_reads_raw,\n         p_reads_preproc = n_reads_hv/n_reads_preproc)\nread_counts_long <- read_counts %>%\n  pivot_longer(starts_with(\"p_reads\"), names_to=\"read_group\", values_to=\"p_reads\") %>%\n  mutate(read_group = ifelse(read_group == \"p_reads_total\", \"All reads\", \"Preprocessed reads\"))\n\n# Combine for display\nread_counts_agg <- read_counts %>%\n  mutate(p_reads_total = n_reads_hv/n_reads_raw,\n         p_reads_preproc = n_reads_hv/n_reads_preproc) %>%\n  inner_join(libraries, by=c(\"sample\"))\nread_counts_agg_long <- read_counts_agg %>%\n  pivot_longer(starts_with(\"p_reads\"), names_to=\"read_group\", values_to=\"p_reads\") %>%\n  mutate(read_group = ifelse(read_group == \"p_reads_total\", \"All reads\", \"Preprocessed reads\")) \n\n# Visualize\ng_read_counts <- ggplot(read_counts_agg_long, aes(x=library, y=p_reads)) +\n  geom_point() +\n  scale_y_log10(name = \"Unique human-viral read fraction\") +\n  facet_grid(.~read_group, scales = \"free\") +\n  theme_kit\ng_read_counts\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/count-hv-reads-1.png){width=768}\n:::\n:::\n\n\n\n\nTODO do analysis above.\n\n## Overall taxonomy and composition\n\nComposition of HV reads was not greatly changed from when looking at all viral reads. The two dominant viruses we see are Anellovirdae and Rhabdovirdae. Followed by these two viral families is Flavivirdae, and lastly, also by a much smaller percent, Microviridae.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter samples and add viral taxa information\nsamples_keep <- read_counts %>% filter(n_reads_hv > 5) %>% pull(sample)\nmrg_hv_named <- mrg_hv %>% filter(sample %in% samples_keep, hv_status) %>% left_join(viral_taxa, by=\"taxid\") \n\n# Discover viral species & genera for HV reads\nraise_rank <- function(read_db, taxid_db, out_rank = \"species\", verbose = FALSE){\n  # Get higher ranks than search rank\n  ranks <- c(\"subspecies\", \"species\", \"subgenus\", \"genus\", \"subfamily\", \"family\", \"suborder\", \"order\", \"class\", \"subphylum\", \"phylum\", \"kingdom\", \"superkingdom\")\n  rank_match <- which.max(ranks == out_rank)\n  high_ranks <- ranks[rank_match:length(ranks)]\n  # Merge read DB and taxid DB\n  reads <- read_db %>% select(-parent_taxid, -rank, -name) %>%\n    left_join(taxid_db, by=\"taxid\")\n  # Extract sequences that are already at appropriate rank\n  reads_rank <- filter(reads, rank == out_rank)\n  # Drop sequences at a higher rank and return unclassified sequences\n  reads_norank <- reads %>% filter(rank != out_rank, !rank %in% high_ranks, !is.na(taxid))\n  while(nrow(reads_norank) > 0){ # As long as there are unclassified sequences...\n    # Promote read taxids and re-merge with taxid DB, then re-classify and filter\n    reads_remaining <- reads_norank %>% mutate(taxid = parent_taxid) %>%\n      select(-parent_taxid, -rank, -name) %>%\n      left_join(taxid_db, by=\"taxid\")\n    reads_rank <- reads_remaining %>% filter(rank == out_rank) %>%\n      bind_rows(reads_rank)\n    reads_norank <- reads_remaining %>%\n      filter(rank != out_rank, !rank %in% high_ranks, !is.na(taxid))\n  }\n  # Finally, extract and append reads that were excluded during the process\n  reads_dropped <- reads %>% filter(!seq_id %in% reads_rank$seq_id)\n  reads_out <- reads_rank %>% bind_rows(reads_dropped) %>%\n    select(-parent_taxid, -rank, -name) %>%\n    left_join(taxid_db, by=\"taxid\")\n  return(reads_out)\n}\nhv_reads_species <- raise_rank(mrg_hv_named, viral_taxa, \"species\")\nhv_reads_genus <- raise_rank(mrg_hv_named, viral_taxa, \"genus\")\nhv_reads_family <- raise_rank(mrg_hv_named, viral_taxa, \"family\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthreshold_major_family <- 0.05\n\n# Count reads for each human-viral family\nhv_family_counts <- hv_reads_family %>% \n  group_by(sample, name, taxid) %>%\n  count(name = \"n_reads_hv\") %>%\n  group_by(sample) %>%\n  mutate(p_reads_hv = n_reads_hv/sum(n_reads_hv))\n\n# Identify high-ranking families and group others\nhv_family_major_tab <- hv_family_counts %>% group_by(name) %>% \n  filter(p_reads_hv == max(p_reads_hv)) %>% filter(row_number() == 1) %>%\n  arrange(desc(p_reads_hv)) %>% filter(p_reads_hv > threshold_major_family)\nhv_family_counts_major <- hv_family_counts %>%\n  mutate(name_display = ifelse(name %in% hv_family_major_tab$name, name, \"Other\")) %>%\n  group_by(sample, name_display) %>%\n  summarize(n_reads_hv = sum(n_reads_hv), p_reads_hv = sum(p_reads_hv), \n            .groups=\"drop\") %>%\n  mutate(name_display = factor(name_display, \n                               levels = c(hv_family_major_tab$name, \"Other\")))\nhv_family_counts_display <- hv_family_counts_major %>%\n  rename(p_reads = p_reads_hv, classification = name_display) %>%\n  inner_join(libraries, by = 'sample')\n\n# Plot\ng_hv_family <- g_comp_base + \n  geom_col(data=hv_family_counts_display, position = \"stack\", width=1) +\n  scale_y_continuous(name=\"% HV Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_brewer(palette = 'Accent', name = \"Viral family\") +\n  labs(title=\"Family composition of human-viral reads\") +\n  guides(fill=guide_legend(ncol=4)) +\n  theme(plot.title = element_text(size=rel(1.4), hjust=0, face=\"plain\"))\ng_hv_family\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/hv-family-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Get most prominent families for text\nhv_family_collate <- hv_family_counts %>%\n  group_by(name, taxid) %>% \n  summarize(n_reads_tot = sum(n_reads_hv),\n            p_reads_max = max(p_reads_hv), .groups=\"drop\") %>% \n  arrange(desc(n_reads_tot))\n#hv_family_collate\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthreshold_major_family <- 0.05\n\n# Count reads for each human-viral family\nhv_family_counts <- hv_reads_family %>% \n  filter(!(name %in% c(\"Anelloviridae\", \"Rhabdoviridae\"))) %>%\n  group_by(sample, name, taxid) %>%\n  count(name = \"n_reads_hv\") %>%\n  group_by(sample) %>%\n  mutate(p_reads_hv = n_reads_hv/sum(n_reads_hv))\n\n# Identify high-ranking families and group others\nhv_family_major_tab <- hv_family_counts %>% group_by(name) %>% \n  filter(p_reads_hv == max(p_reads_hv)) %>% filter(row_number() == 1) %>%\n  arrange(desc(p_reads_hv)) %>% filter(p_reads_hv > threshold_major_family)\nhv_family_counts_major <- hv_family_counts %>%\n  mutate(name_display = ifelse(name %in% hv_family_major_tab$name, name, \"Other\")) %>%\n  group_by(sample, name_display) %>%\n  summarize(n_reads_hv = sum(n_reads_hv), p_reads_hv = sum(p_reads_hv), \n            .groups=\"drop\") %>%\n  mutate(name_display = factor(name_display, \n                               levels = c(hv_family_major_tab$name, \"Other\")))\nhv_family_counts_display <- hv_family_counts_major %>%\n  rename(p_reads = p_reads_hv, classification = name_display) %>%\n  inner_join(libraries, by = 'sample')\n\n# Plot\ng_hv_family <- g_comp_base + \n  geom_col(data=hv_family_counts_display, position = \"stack\", width=1) +\n  scale_y_continuous(name=\"% HV Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_brewer(palette = 'Accent', name = \"Viral family\") +\n  labs(title=\"Family composition of human-viral reads\") +\n  guides(fill=guide_legend(ncol=4)) +\n  theme(plot.title = element_text(size=rel(1.4), hjust=0, face=\"plain\"))\ng_hv_family\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/hv-filter-family-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Get most prominent families for text\nhv_family_collate <- hv_family_counts %>%\n  group_by(name, taxid) %>% \n  summarize(n_reads_tot = sum(n_reads_hv),\n            p_reads_max = max(p_reads_hv), .groups=\"drop\") %>% \n  arrange(desc(n_reads_tot))\nhv_family_collate\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"taxid\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"n_reads_tot\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"p_reads_max\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Flaviviridae\",\"2\":\"11050\",\"3\":\"94741\",\"4\":\"1.0000000\"},{\"1\":\"Microviridae\",\"2\":\"10841\",\"3\":\"81660\",\"4\":\"1.0000000\"},{\"1\":\"Hepeviridae\",\"2\":\"3079366\",\"3\":\"1\",\"4\":\"0.1666667\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#test <- hv_reads_family %>% filter(hit_hv == 1 & name %in% c('Anelloviridae', 'Flaviviridae', 'Hepeviridae', 'Microviridae', 'Rhabdoviridae')) %>% select(name, assigned_name) %>% distinct()\n#hv_reads_family %>% filter(hit_hv == 1 & name %in% c('Flaviviridae', 'Hepeviridae', 'Microviridae', 'Rhabdoviridae')) %>% select(name, assigned_name) %>% distinct()\n\n#hv_reads_family %>% filter(hit_hv == 1) %>% select(name, assigned_name) %>% distinct() %>% filter(!str_detect(tolower(assigned_name), \"torque teno\"))\ntotal <- basic_stats_raw %>% select(sample, n_read_pairs)\n\nhv_family_counts <- hv_reads_family %>% \n  group_by(sample, name, taxid) %>%\n  count(name = \"n_reads_hv\") %>%\n  inner_join(total, by='sample') %>%\n  group_by(sample) %>%\n  mutate(ra_reads_hv = n_reads_hv/n_read_pairs)\n\nhv_family_collate <- hv_family_counts %>%\n  group_by(name, taxid) %>% \n  summarize(n_reads_tot = sum(n_reads_hv),\n            ra_reads_tot = mean(ra_reads_hv), .groups=\"drop\") %>% \n  arrange(desc(n_reads_tot))\n\nhv_family_collate <- hv_family_collate %>% \nrename(\n'family' = 'name',\n'family_n_reads_tot' = 'n_reads_tot',\n'family_ra_reads_tot' = 'ra_reads_tot',\n)\n\nhv_genus_counts <- hv_reads_genus %>% \n  group_by(sample, name, taxid) %>%\n  count(name = \"n_reads_hv\") %>%\n  inner_join(total, by='sample') %>%\n  group_by(sample) %>%\n  mutate(ra_reads_hv = n_reads_hv/n_read_pairs)\n\nhv_genus_collate <- hv_genus_counts %>%\n  group_by(name, taxid) %>% \n  summarize(n_reads_tot = sum(n_reads_hv),\n            ra_reads_tot = mean(ra_reads_hv), .groups=\"drop\") %>% \n  arrange(desc(n_reads_tot))\n\nhv_genus_collate <- hv_genus_collate %>% \nrename(\n'genus' = 'name',\n'genus_n_reads_tot' = 'n_reads_tot',\n'genus_ra_reads_tot' = 'ra_reads_tot',\n)\n\nhv_species_counts <- hv_reads_species %>% \n  group_by(sample, name, taxid) %>%\n  count(name = \"n_reads_hv\") %>%\n  inner_join(total, by='sample') %>%\n  group_by(sample) %>%\n  mutate(ra_reads_hv = n_reads_hv/n_read_pairs)\n\nhv_species_collate <- hv_species_counts %>%\n  group_by(name, taxid) %>% \n  summarize(n_reads_tot = sum(n_reads_hv),\n            ra_reads_tot = mean(ra_reads_hv), .groups=\"drop\") %>% \n  arrange(desc(n_reads_tot))\n\nhv_species_collate <- hv_species_collate %>% \nrename(\n'species' = 'name',\n'species_n_reads_tot' = 'n_reads_tot',\n'species_ra_reads_tot' = 'ra_reads_tot',\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assuming the data is already loaded into tibbles:\n#hv_family_collate\n#hv_genus_collate\n#hv_species_collate\n#viral_taxa\n\n# Function to find parent taxa recursively\nfind_parent_taxa <- function(taxid, target_ranks, taxa_data) {\n current_taxid <- taxid\n  result <- setNames(vector(\"list\", length(target_ranks)), target_ranks)\n  while (TRUE) {\n    row <- taxa_data %>% filter(taxid == current_taxid) %>% slice(1)\n    if (nrow(row) == 0) break  # If no matching taxid is found, break the loop\n    if (row$rank %in% target_ranks) {\n      result[[row$rank]] <- list(taxid = row$taxid, name = row$name)\n      if (all(!sapply(result, is.null))) {\n        break  # If all target ranks are found, break the loop\n      }\n    }\n    if (row$taxid == row$parent_taxid) {\n      break  # Avoid infinite loop at root\n    }\n    current_taxid <- row$parent_taxid\n  }\n  # Replace NULL with NA for any unfound ranks\n  result <- lapply(result, function(x) if (is.null(x)) list(taxid = NA, name = NA) else x)\n  return(result)\n}\n\n# Find all relevant parent taxa for each species\nresult <- hv_species_collate %>%\n  mutate(\n    parent_info = map(taxid, ~find_parent_taxa(.x, c(\"species\",\"subgenus\", \"genus\", \"subfamily\", \"family\"), viral_taxa)),\n    genus_taxid = map_dbl(parent_info, ~.x$genus$taxid),\n    genus = map_chr(parent_info, ~.x$genus$name),\n    family_taxid = map_dbl(parent_info, ~.x$family$taxid),\n    family = map_chr(parent_info, ~.x$family$name)\n  ) %>%\n  select(-parent_info)\n\n# Join with genus counts\nresult <- result %>%\n  left_join(\n    hv_genus_collate %>% select(taxid, genus_n_reads_tot, genus_ra_reads_tot),\n    by = c(\"genus_taxid\" = \"taxid\")\n  )\n\n# Join with family counts\nresult <- result %>%\n  left_join(\n    hv_family_collate %>% select(taxid, family_n_reads_tot, family_ra_reads_tot),\n    by = c(\"family_taxid\" = \"taxid\")\n  )\n\n# Clean up\nresult <- result %>%\n  select(-ends_with(\"_taxid\"))\n\n#result\n```\n:::\n\n::: {.cell width='10' height='10'}\n\n```{.r .cell-code}\n# Function to create links\ncreate_links <- function(data) {\n  family_to_genus <- data %>%\n    filter(!is.na(genus)) %>%\n    group_by(family, genus) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = family, target = genus)\n  \n  genus_to_species <- data %>%\n    group_by(genus, species) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = genus, target = species)\n\n  family_to_species <- data %>%\n    filter(is.na(genus)) %>%\n    group_by(family, species) %>%\n    summarise(value = n(), .groups = \"drop\") %>%\n    mutate(source = family, target = species)\n\n  bind_rows(family_to_genus, genus_to_species, family_to_species) %>%\n    filter(!is.na(source))\n}\n\n# Function to create nodes\ncreate_nodes <- function(links) {\n  data.frame(\n    name = c(links$source, links$target) %>% unique()\n  )\n}\n\n# Function to prepare data for Sankey diagram\nprepare_sankey_data <- function(links, nodes) {\n  links$IDsource <- match(links$source, nodes$name) - 1\n  links$IDtarget <- match(links$target, nodes$name) - 1\n  list(links = links, nodes = nodes)\n}\n\n# Function to create Sankey plot\ncreate_sankey_plot <- function(sankey_data) {\n  sankeyNetwork(\n    Links = sankey_data$links, \n    Nodes = sankey_data$nodes,\n    Source = \"IDsource\", \n    Target = \"IDtarget\",\n    Value = \"value\", \n    NodeID = \"name\",\n    sinksRight = TRUE,\n    nodeWidth = 50,\n    fontSize = 14,\n    height = 800,\n    width = 1000\n  )\n}\n\nsave_sankey_as_png <- function(sankey_plot, width = 1000, height = 800) {\n  # Save the plot as an HTML file\n  saveWidget(sankey_plot, sprintf('%s/sankey.html',image_dir))\n}\n\nformat_scientific <- function(x, digits=2) {\n  sapply(x, function(val) {\n    if (is.na(val) || abs(val) < 1e-15) {\n      return(\"0\")\n    } else {\n      exponent <- floor(log10(abs(val)))\n      coef <- val / 10^exponent\n      return(sprintf(\"%.1f × 10^%d\", round(coef, digits), exponent))\n    }\n  })\n}\n\ndata <- result %>% \n  mutate(across(c(genus_n_reads_tot, genus_ra_reads_tot), ~replace_na(., 0)),\n         genus = ifelse(is.na(genus), \"Unknown Genus\", genus)) %>%\n  mutate(\n  species = paste0(species, sprintf(' (%s)', format_scientific(species_ra_reads_tot))),\n  genus = paste0(genus, sprintf(' (%s)', format_scientific(genus_ra_reads_tot))),\n  family = paste0(family, sprintf(' (%s)', format_scientific(family_ra_reads_tot)))\n)\nlinks <- as.data.frame(create_links(data))\nnodes <- create_nodes(links)\nsankey_data <- prepare_sankey_data(links, nodes)\nsankey <- create_sankey_plot(sankey_data)\n\nsankey\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"htmlwidget-f50aeb3067110d3aaea0\" style=\"width:100%;height:520px;\" class=\"sankeyNetwork html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f50aeb3067110d3aaea0\">{\"x\":{\"links\":{\"source\":[0,0,0,0,1,2,3,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,9,10,11,11,11,11,11,11,12,12,12],\"target\":[5,6,7,11,10,9,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],\"value\":[23,16,14,4,1,1,2,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},\"nodes\":{\"name\":[\"Anelloviridae (3.6 <U+00D7> 10^-2)\",\"Flaviviridae (1.5 <U+00D7> 10^-3)\",\"Hepeviridae (3.4 <U+00D7> 10^-7)\",\"Microviridae (1.1 <U+00D7> 10^-3)\",\"Rhabdoviridae (4.1 <U+00D7> 10^-3)\",\"Alphatorquevirus (1.9 <U+00D7> 10^-4)\",\"Betatorquevirus (1.9 <U+00D7> 10^-3)\",\"Gammatorquevirus (2.5 <U+00D7> 10^-5)\",\"Ledantevirus (3.0 <U+00D7> 10^-7)\",\"Paslahepevirus (3.4 <U+00D7> 10^-7)\",\"Pegivirus (1.5 <U+00D7> 10^-3)\",\"Unknown Genus (0)\",\"Vesiculovirus (4.1 <U+00D7> 10^-3)\",\"Alphatorquevirus homin1 (5.8 <U+00D7> 10^-5)\",\"Alphatorquevirus homin10 (8.6 <U+00D7> 10^-6)\",\"Alphatorquevirus homin13 (4.9 <U+00D7> 10^-6)\",\"Alphatorquevirus homin15 (2.0 <U+00D7> 10^-4)\",\"Alphatorquevirus homin17 (1.1 <U+00D7> 10^-6)\",\"Alphatorquevirus homin18 (4.8 <U+00D7> 10^-6)\",\"Alphatorquevirus homin19 (3.4 <U+00D7> 10^-6)\",\"Alphatorquevirus homin20 (1.2 <U+00D7> 10^-6)\",\"Alphatorquevirus homin21 (9.6 <U+00D7> 10^-6)\",\"Alphatorquevirus homin24 (8.0 <U+00D7> 10^-5)\",\"Alphatorquevirus homin29 (2.9 <U+00D7> 10^-5)\",\"Alphatorquevirus homin3 (6.0 <U+00D7> 10^-6)\",\"Alphatorquevirus homin5 (6.6 <U+00D7> 10^-6)\",\"Alphatorquevirus homin6 (3.3 <U+00D7> 10^-5)\",\"Alphatorquevirus homin7 (1.3 <U+00D7> 10^-6)\",\"Alphatorquevirus homin9 (1.7 <U+00D7> 10^-6)\",\"Torque teno virus 11 (5.8 <U+00D7> 10^-5)\",\"Torque teno virus 12 (1.7 <U+00D7> 10^-6)\",\"Torque teno virus 16 (2.0 <U+00D7> 10^-5)\",\"Torque teno virus 22 (8.9 <U+00D7> 10^-5)\",\"Torque teno virus 27 (9.1 <U+00D7> 10^-7)\",\"Torque teno virus 28 (3.1 <U+00D7> 10^-5)\",\"Torque teno virus 8 (6.4 <U+00D7> 10^-6)\",\"Betatorquevirus homini1 (5.5 <U+00D7> 10^-4)\",\"Betatorquevirus homini10 (3.6 <U+00D7> 10^-5)\",\"Betatorquevirus homini11 (7.1 <U+00D7> 10^-4)\",\"Betatorquevirus homini12 (1.2 <U+00D7> 10^-3)\",\"Betatorquevirus homini16 (3.4 <U+00D7> 10^-5)\",\"Betatorquevirus homini18 (1.1 <U+00D7> 10^-4)\",\"Betatorquevirus homini2 (2.7 <U+00D7> 10^-5)\",\"Betatorquevirus homini26 (7.7 <U+00D7> 10^-5)\",\"Betatorquevirus homini27 (6.4 <U+00D7> 10^-5)\",\"Betatorquevirus homini3 (4.3 <U+00D7> 10^-5)\",\"Betatorquevirus homini5 (5.7 <U+00D7> 10^-5)\",\"Betatorquevirus homini6 (5.7 <U+00D7> 10^-6)\",\"Betatorquevirus homini7 (3.4 <U+00D7> 10^-4)\",\"Betatorquevirus homini8 (1.5 <U+00D7> 10^-5)\",\"Betatorquevirus homini9 (1.3 <U+00D7> 10^-4)\",\"TTV-like mini virus (4.8 <U+00D7> 10^-4)\",\"Gammatorquevirus homidi1 (1.5 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi10 (4.0 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi11 (1.0 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi12 (1.3 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi13 (1.8 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi14 (2.3 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi2 (2.6 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi3 (4.7 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi4 (3.1 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi5 (3.7 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi6 (2.2 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi7 (1.5 <U+00D7> 10^-5)\",\"Gammatorquevirus homidi8 (1.2 <U+00D7> 10^-5)\",\"Gammatorquevirus homidi9 (7.1 <U+00D7> 10^-7)\",\"Ledantevirus ledantec (3.0 <U+00D7> 10^-7)\",\"Paslahepevirus balayani (3.4 <U+00D7> 10^-7)\",\"Pegivirus hominis (1.5 <U+00D7> 10^-3)\",\"Anelloviridae sp. (3.5 <U+00D7> 10^-2)\",\"Micro Torque teno virus (1.2 <U+00D7> 10^-4)\",\"Microviridae sp. (1.2 <U+00D7> 10^-3)\",\"Microvirus sp. (2.7 <U+00D7> 10^-5)\",\"Small anellovirus (9.9 <U+00D7> 10^-6)\",\"Torque teno virus (8.5 <U+00D7> 10^-5)\",\"Vesiculovirus indiana (4.1 <U+00D7> 10^-3)\",\"Vesiculovirus isfahan (2.9 <U+00D7> 10^-7)\",\"Vesiculovirus maraba (7.7 <U+00D7> 10^-7)\"],\"group\":[\"Anelloviridae (3.6 <U+00D7> 10^-2)\",\"Flaviviridae (1.5 <U+00D7> 10^-3)\",\"Hepeviridae (3.4 <U+00D7> 10^-7)\",\"Microviridae (1.1 <U+00D7> 10^-3)\",\"Rhabdoviridae (4.1 <U+00D7> 10^-3)\",\"Alphatorquevirus (1.9 <U+00D7> 10^-4)\",\"Betatorquevirus (1.9 <U+00D7> 10^-3)\",\"Gammatorquevirus (2.5 <U+00D7> 10^-5)\",\"Ledantevirus (3.0 <U+00D7> 10^-7)\",\"Paslahepevirus (3.4 <U+00D7> 10^-7)\",\"Pegivirus (1.5 <U+00D7> 10^-3)\",\"Unknown Genus (0)\",\"Vesiculovirus (4.1 <U+00D7> 10^-3)\",\"Alphatorquevirus homin1 (5.8 <U+00D7> 10^-5)\",\"Alphatorquevirus homin10 (8.6 <U+00D7> 10^-6)\",\"Alphatorquevirus homin13 (4.9 <U+00D7> 10^-6)\",\"Alphatorquevirus homin15 (2.0 <U+00D7> 10^-4)\",\"Alphatorquevirus homin17 (1.1 <U+00D7> 10^-6)\",\"Alphatorquevirus homin18 (4.8 <U+00D7> 10^-6)\",\"Alphatorquevirus homin19 (3.4 <U+00D7> 10^-6)\",\"Alphatorquevirus homin20 (1.2 <U+00D7> 10^-6)\",\"Alphatorquevirus homin21 (9.6 <U+00D7> 10^-6)\",\"Alphatorquevirus homin24 (8.0 <U+00D7> 10^-5)\",\"Alphatorquevirus homin29 (2.9 <U+00D7> 10^-5)\",\"Alphatorquevirus homin3 (6.0 <U+00D7> 10^-6)\",\"Alphatorquevirus homin5 (6.6 <U+00D7> 10^-6)\",\"Alphatorquevirus homin6 (3.3 <U+00D7> 10^-5)\",\"Alphatorquevirus homin7 (1.3 <U+00D7> 10^-6)\",\"Alphatorquevirus homin9 (1.7 <U+00D7> 10^-6)\",\"Torque teno virus 11 (5.8 <U+00D7> 10^-5)\",\"Torque teno virus 12 (1.7 <U+00D7> 10^-6)\",\"Torque teno virus 16 (2.0 <U+00D7> 10^-5)\",\"Torque teno virus 22 (8.9 <U+00D7> 10^-5)\",\"Torque teno virus 27 (9.1 <U+00D7> 10^-7)\",\"Torque teno virus 28 (3.1 <U+00D7> 10^-5)\",\"Torque teno virus 8 (6.4 <U+00D7> 10^-6)\",\"Betatorquevirus homini1 (5.5 <U+00D7> 10^-4)\",\"Betatorquevirus homini10 (3.6 <U+00D7> 10^-5)\",\"Betatorquevirus homini11 (7.1 <U+00D7> 10^-4)\",\"Betatorquevirus homini12 (1.2 <U+00D7> 10^-3)\",\"Betatorquevirus homini16 (3.4 <U+00D7> 10^-5)\",\"Betatorquevirus homini18 (1.1 <U+00D7> 10^-4)\",\"Betatorquevirus homini2 (2.7 <U+00D7> 10^-5)\",\"Betatorquevirus homini26 (7.7 <U+00D7> 10^-5)\",\"Betatorquevirus homini27 (6.4 <U+00D7> 10^-5)\",\"Betatorquevirus homini3 (4.3 <U+00D7> 10^-5)\",\"Betatorquevirus homini5 (5.7 <U+00D7> 10^-5)\",\"Betatorquevirus homini6 (5.7 <U+00D7> 10^-6)\",\"Betatorquevirus homini7 (3.4 <U+00D7> 10^-4)\",\"Betatorquevirus homini8 (1.5 <U+00D7> 10^-5)\",\"Betatorquevirus homini9 (1.3 <U+00D7> 10^-4)\",\"TTV-like mini virus (4.8 <U+00D7> 10^-4)\",\"Gammatorquevirus homidi1 (1.5 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi10 (4.0 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi11 (1.0 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi12 (1.3 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi13 (1.8 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi14 (2.3 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi2 (2.6 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi3 (4.7 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi4 (3.1 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi5 (3.7 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi6 (2.2 <U+00D7> 10^-6)\",\"Gammatorquevirus homidi7 (1.5 <U+00D7> 10^-5)\",\"Gammatorquevirus homidi8 (1.2 <U+00D7> 10^-5)\",\"Gammatorquevirus homidi9 (7.1 <U+00D7> 10^-7)\",\"Ledantevirus ledantec (3.0 <U+00D7> 10^-7)\",\"Paslahepevirus balayani (3.4 <U+00D7> 10^-7)\",\"Pegivirus hominis (1.5 <U+00D7> 10^-3)\",\"Anelloviridae sp. (3.5 <U+00D7> 10^-2)\",\"Micro Torque teno virus (1.2 <U+00D7> 10^-4)\",\"Microviridae sp. (1.2 <U+00D7> 10^-3)\",\"Microvirus sp. (2.7 <U+00D7> 10^-5)\",\"Small anellovirus (9.9 <U+00D7> 10^-6)\",\"Torque teno virus (8.5 <U+00D7> 10^-5)\",\"Vesiculovirus indiana (4.1 <U+00D7> 10^-3)\",\"Vesiculovirus isfahan (2.9 <U+00D7> 10^-7)\",\"Vesiculovirus maraba (7.7 <U+00D7> 10^-7)\"]},\"options\":{\"NodeID\":\"name\",\"NodeGroup\":\"name\",\"LinkGroup\":null,\"colourScale\":\"d3.scaleOrdinal(d3.schemeCategory20);\",\"fontSize\":14,\"fontFamily\":null,\"nodeWidth\":50,\"nodePadding\":10,\"units\":\"\",\"margin\":{\"top\":null,\"right\":null,\"bottom\":null,\"left\":null},\"iterations\":32,\"sinksRight\":true}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n\n```{.r .cell-code}\n#save_sankey_as_png(sankey)\n```\n:::\n\n::: {.cell width='20' height='10'}\n\n```{.r .cell-code}\nspecies_family <- result %>% select(species, family) %>% rename('name' = 'species')\n\nplay <- hv_species_counts %>% \n  ungroup() %>%\n  inner_join(libraries, by = 'sample') %>%\n  inner_join(species_family, by = 'name')\n\nplay$family <- factor(play$family, levels=hv_family_collate %>% pull(family))\nplay <- play %>%\n  arrange(family, name) %>%\n  mutate(name = factor(name, levels = unique(name)))\n#name_order <- play %>% arrange(family) %>% pull(name)\n#play$name <- factor(play$name, levels = name_order)\n\nra_dot <- ggplot(play, aes(x = ra_reads_hv, y=name)) +\n  geom_quasirandom(orientation = 'y', aes(color = family)) +\n   scale_color_brewer(palette = \"Accent\") +\n    scale_x_log10(\n    \"Relative abundance human virus reads\",\n    labels = function(x) parse(text = paste0(\"10^\", round(log10(x)))),\n    limits = c(1e-7, 1),\n    n.breaks = 8\n  ) +\n  labs(y = 'Human virus',\n       color = 'Viral family') + \n  theme_light() + \n    theme(\n    axis.text.y = element_text(size = 8),\n    axis.text.x = element_text(size = 14),\n    axis.ticks.y = element_blank(),axis.line = element_line(colour = \"black\"),\n    axis.title.x = element_text(size = 15),    \n    axis.title.y = element_text(size = 15),  \n    legend.text = element_text(size = 13),\n    legend.title = element_text(size = 16),\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.background = element_blank())\nra_dot\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/hv-species-dot-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#ggsave(sprintf('%s/ra_viral_dot.jpg',image_dir), ra_dot, height = 8 ,width = 12)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall <- hv_family_counts %>% \n#  inner_join(basic_stats_raw, by = c('sample')) %>%\n  group_by(sample) %>%\n  summarize(sum_reads=sum(n_reads_hv), n_read_pairs=first(n_read_pairs)) %>%\n  mutate(ra = sum_reads/n_read_pairs) %>% \n  pull(ra) %>% mean()\n\nprop_non <- hv_family_counts %>%  \n  filter(name %in% c('Rhabdoviridae','Microviridae')) %>%\n  group_by(sample) %>%\n  summarize(sum_reads_spiked = sum(n_reads_hv)) %>%\n  select(sample,sum_reads_spiked)\n\nnon_spiked <- hv_family_counts %>% \n  group_by(sample) %>%\n  summarize(sum_reads=sum(n_reads_hv), n_read_pairs=first(n_read_pairs)) %>% \n  inner_join(prop_non, by = c('sample')) %>%\n  mutate(ra_non_spiked = (sum_reads-sum_reads_spiked)/(n_read_pairs-sum_reads_spiked)) %>%\n  pull(ra_non_spiked) %>% mean()\nall\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0405766\n```\n\n\n:::\n\n```{.r .cell-code}\nnon_spiked\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.03623882\n```\n\n\n:::\n:::\n\n\n\n\nUnsurprisingly we get a lot of Anello virus, specifically torque teno virus. Once I filter those out we get a few interesting viruses: - Rhabdovirus - [Vesiculovirus](https://en.wikipedia.org/wiki/Vesiculovirus) - [Vesicular stomatitis Indiana virus](https://en.wikipedia.org/wiki/Indiana_vesiculovirus) - [Maraba virus](https://en.wikipedia.org/wiki/Oncolytic_virus) - Flavivirus - Pegivirus - [GB virus C](https://en.wikipedia.org/wiki/GB_virus_C)\n\nTODO look in to this.\n\n# Swab sampling esk analysis\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stats)\n\nsimon <- hv_family_counts %>% \n  filter(name == 'Anelloviridae') %>% \n  ungroup() %>%\n  mutate(dataset='Cebria-Mendoza', ra=ra_reads_hv) %>%\n  select(ra_reads_hv, dataset)  %>% pull(ra_reads_hv)\n\nget_logit_normal_samples <- function(ras) {\n  ra_values <- ras %>% pull(1)  # Assuming the values are in the first column\n  zero_share <- mean(ra_values == 0)\n  ra_values <- ra_values[ra_values != 0]\n  \n  logit_ra_values <- qlogis(ra_values)\n  mean_val <- mean(logit_ra_values)\n  std_val <- sd(logit_ra_values)\n  \n  non_zero_samples <- rnorm(n = floor(100000 * (1 - zero_share)), mean = mean_val, sd = std_val)\n  samples <- plogis(non_zero_samples)\n  \n  zero_samples <- rep(0, floor(100000 * zero_share))\n  all_samples <- c(samples, zero_samples)\n  \n  tibble(samples = sample(all_samples))\n}\n\nsimulate_p2ra <- function(sample_pop, ra_lists, prevalence) {\n  n_sick <- rpois(1, sample_pop * prevalence)\n  if (n_sick == 0) {\n    return(0)\n  }\n  \n  cumulative_ra_sick <- sum(sample(unlist(ra_lists), size = n_sick, replace = TRUE))\n  individual_ra_sick <- cumulative_ra_sick / n_sick\n  relative_abundance <- n_sick / sample_pop * individual_ra_sick\n  \n  return(relative_abundance)\n}\n\nsimulate_p2ra_many <- function(ra_lists, sample_populations, n_simulations) {\n  prevalence <- get_prevalence()  # Assuming this function exists in your R environment\n  \n  results <- sample_populations %>%\n    set_names() %>%\n    map(~ replicate(n_simulations, simulate_p2ra(.x, ra_lists, prevalence))) %>%\n    map(sort)\n  \n  as_tibble(results)\n}\n\nget_prevalence <- function(){\n  prevelance = 0.01\n}\n\nget_swab_p2ra <- function(subset_titles, ra_lists, swab_sample_sizes = DEFAULT_SWAB_SAMPLE_SIZES) {\n  df_swab <- subset_titles %>%\n    set_names() %>%\n    map2_dfr(ra_lists, function(subset, ras) {\n      samples <- get_logit_normal_samples(tibble(ras))\n      \n      simulate_p2ra_many(samples$samples, swab_sample_sizes, n_simulations = 10000) %>%\n        mutate(Subset = subset) %>%\n        pivot_longer(\n          cols = -Subset,\n          names_to = \"Sample Size\",\n          values_to = \"Relative Abundance\"\n        )\n    })\n  \n  return(df_swab)\n}\n\nDEFAULT_SWAB_SAMPLE_SIZES <- subset_titles <- c(\"Cebria-Mendoza\")\nra_lists <- list(simon)\nDEFAULT_SWAB_SAMPLE_SIZES <- c(100, 200, 400)\n\nresult <- get_swab_p2ra(subset_titles, ra_lists)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forcats)\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'scales'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:purrr':\n\n    discard\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n\n\n:::\n\n```{.r .cell-code}\nresult$`Sample Size` <- factor(result$`Sample Size`, levels=c('100','200','400'))\ndf_swab <- result %>%\n    filter(`Relative Abundance` > 0) %>%\n    mutate(Subset = fct_reorder(Subset, `Relative Abundance`, .fun = median))\n  \n  # Create the plot\nggplot(df_swab, aes(x = `Relative Abundance`, y = Subset, fill = `Sample Size`)) +\n  geom_violin(scale = \"width\", trim = FALSE, alpha = 0.7, draw_quantiles = c(0.5)) +\n  scale_x_log10(\"Relative abundance\") +\n  scale_fill_brewer(palette = \"Blues\") +\n  theme_light() +\n  labs(\n  title = \"Expected relative abundance at 1% prevelance of Anelloviridae\",\n  x = \"Relative Abundance\",\n  y = \"\"\n  ) \n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n\n# Conclusion\n\nOverall, nothing dangerous was found in the blood, which is totally expected.\n\nMy biggest concern is that I'm incompetent and don't know how to analyze the data at this point which is expected. Let me try uploading this to my notebook and then reevaluate from there.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/d3-4.5.0/d3.min.js\"></script>\n<script src=\"../site_libs/sankey-1/sankey.js\"></script>\n<script src=\"../site_libs/sankeyNetwork-binding-0.4/sankeyNetwork.js\"></script>\n<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}