{
  "hash": "fc86e48a36154c334caa232711508649",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Workflow of Cebria-Mendoza et al. (2021)\"\nsubtitle: \"Pooled plasma from Spain\"\nauthor: \"Harmon Bhasin\"\ndate: 2024-07-08\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n    code-link: true\n    df-print: paged\neditor: visual\ntitle-block-banner: \"#de2d26\"\n---\n\n\n\n\n\n\nTHIS IS CURRENTLY A WORK IN PROGRESS!\n\nAs a part of my time here, I'm exploring blood surveillance for a potential option for the NAO to pursue. Instead of writing a manuscript, we've decided to make three blog posts. The first blog post will cover why we're considering blood, the second blog post will cover the blood industry, and the last blog post will look at the composition of blood.\n\nAfter exhaustively looking at a bunch of studies, we've decided upon two. This is the analysis of the first study. One of the steps in doing so is analyzing relative abundance data in the healthy population. In this post, I analyze [Cebria-Mendoza 2021](https://doi.org/10.3390/v13112322), a dataset with 60 samples from \\~600 healthy blood donors in Spain.\n\n# The raw data\n\nThis dataset is composed of 60 samples which come from plasma pools of anywhere from 8-13 people from Spain. In total, there were 567 healthy individuals that have contributed to this pool. The demographic information that I have for each pool is the gender and age of the donor as well as the number that has contributed to each pool. They did DNA+RNA sampling for each pool, but the reads were not separately sequenced (so we cannot separate them?).\n\nIn total, these 60 samples contained 230M read pairs. The samples had 2.3M - 4.8M (mean 3.8M) read pairs each.\n\nRead and base counts of the raw data were consistent with the previous pipeline version, as were read qualities, adapter content, and measured duplication levels.\n\n\n\n\n\n\n\n\n\nRead quality in all the samples look quite good/consistent.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare data\nbasic_stats_raw_metrics <- basic_stats_raw %>%\n  select(library,\n         `# Read pairs` = n_read_pairs,\n         `Total base pairs\\n(approx)` = n_bases_approx,\n         `% Duplicates\\n(FASTQC)` = percent_duplicates) %>%\n  pivot_longer(-library, names_to = \"metric\", values_to = \"value\") %>%\n  mutate(metric = fct_inorder(metric))\n\n# Set up plot templates\n\ng_basic <- ggplot(basic_stats_raw_metrics, aes(x=library, y=value)) +\n  geom_col(position = \"dodge\") +\n  scale_x_discrete() +\n  scale_y_continuous(expand=c(0,0)) +\n  expand_limits(y=c(0,100)) +\n  facet_grid(metric~., scales = \"free\", space=\"free_x\", switch=\"y\") +\n  theme_kit + theme(\n    axis.title.y = element_blank(),\n    strip.text.y = element_text(face=\"plain\")\n  )\ng_basic\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-basic-stats-1.png){width=864}\n:::\n:::\n\n\n\n\nTODO interpret the below plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set up plotting templates\ng_qual_raw <- ggplot(mapping=aes(linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters_raw <- g_qual_raw + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats_raw) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,NA),\n                     breaks = seq(0,100,10), expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0)) +\n  facet_grid(.~adapter)\ng_adapters_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-raw-quality-1.png){width=768}\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base_raw <- g_qual_raw +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats_raw) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,500,20), expand=c(0,0))\ng_quality_base_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-raw-quality-2.png){width=768}\n:::\n\n```{.r .cell-code}\ng_quality_seq_raw <- g_qual_raw +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats_raw) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0))\ng_quality_seq_raw\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-raw-quality-3.png){width=768}\n:::\n:::\n\n\n\n\n# Preprocessing\n\n## High-level metrics\n\nThe average fraction of reads at each stage in the preprocessing pipeline is shown in the following table. On average, cleaning & deduplication removed about 57% of total read pairs, primarily during duplication. Ribodepletion removed about 6-8% during each round.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count read losses\nn_reads_rel <- basic_stats %>% \n  select(sample, stage, percent_duplicates, n_read_pairs) %>%\n  group_by(sample) %>% \n  arrange(sample, stage) %>%\n  mutate(p_reads_retained = n_read_pairs / lag(n_read_pairs),\n         p_reads_lost = 1 - p_reads_retained,\n         p_reads_retained_abs = n_read_pairs / n_read_pairs[1],\n         p_reads_lost_abs = 1-p_reads_retained_abs,\n         p_reads_lost_abs_marginal = p_reads_lost_abs - lag(p_reads_lost_abs))\nn_reads_rel_display <- n_reads_rel %>% \n  rename(Stage=stage) %>% \n  group_by(Stage) %>% \n  summarize(`% Total Reads Lost (Cumulative)` = paste0(round(min(p_reads_lost_abs*100),1), \"-\", round(max(p_reads_lost_abs*100),1), \" (mean \", round(mean(p_reads_lost_abs*100),1), \")\"),\n            `% Total Reads Lost (Marginal)` = paste0(round(min(p_reads_lost_abs_marginal*100),1), \"-\", round(max(p_reads_lost_abs_marginal*100),1), \" (mean \", round(mean(p_reads_lost_abs_marginal*100),1), \")\"), .groups=\"drop\") %>% \n  filter(Stage != \"raw_concat\") %>%\n  mutate(Stage = Stage %>% as.numeric %>% factor(labels=c(\"Trimming & filtering\", \"Deduplication\", \"Initial ribodepletion\", \"Secondary ribodepletion\")))\nn_reads_rel_display\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Stage\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Cumulative)\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"% Total Reads Lost (Marginal)\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Trimming & filtering\",\"2\":\"0-5 (mean 1.4)\",\"3\":\"0-5 (mean 1.4)\"},{\"1\":\"Deduplication\",\"2\":\"44.2-70.6 (mean 55.9)\",\"3\":\"44.2-67.8 (mean 54.5)\"},{\"1\":\"Initial ribodepletion\",\"2\":\"53.9-77.2 (mean 63.8)\",\"3\":\"3.2-15.6 (mean 7.9)\"},{\"1\":\"Secondary ribodepletion\",\"2\":\"57.7-85.7 (mean 70.2)\",\"3\":\"2.2-12.6 (mean 6.4)\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ng_stage_trace <- ggplot(basic_stats, aes(x=stage, group=sample)) +\n  theme_kit\n\n# Plot reads over preprocessing\ng_reads_stages <- g_stage_trace +\n  geom_line(aes(y=n_read_pairs)) +\n  scale_y_continuous(\"# Read pairs\", expand=c(0,0), limits=c(0,NA))\ng_reads_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-figures-1.png){width=576}\n:::\n\n```{.r .cell-code}\n# Plot relative read losses during preprocessing\ng_reads_rel <- ggplot(n_reads_rel, \n                      aes(x=stage, group=sample)) +\n  geom_line(aes(y=p_reads_lost_abs_marginal)) +\n  scale_y_continuous(\"% Total Reads Lost\", expand=c(0,0), \n                     labels = function(x) x*100) +\n  theme_kit\ng_reads_rel\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-figures-2.png){width=576}\n:::\n:::\n\n\n\n\nTODO interpret the below plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_qual <- ggplot(mapping=aes(linetype=read_pair, group=interaction(sample,read_pair))) + \n  scale_linetype_discrete(name = \"Read Pair\") +\n  guides(color=guide_legend(nrow=2,byrow=TRUE),\n         linetype = guide_legend(nrow=2,byrow=TRUE)) +\n  theme_base\n\n# Visualize adapters\ng_adapters <- g_qual + \n  geom_line(aes(x=position, y=pc_adapters), data=adapter_stats) +\n  scale_y_continuous(name=\"% Adapters\", limits=c(0,20),\n                     breaks = seq(0,50,10), expand=c(0,0)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~adapter)\ng_adapters\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-quality-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Visualize quality\ng_quality_base <- g_qual +\n  geom_hline(yintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_hline(yintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=position, y=mean_phred_score), data=quality_base_stats) +\n  scale_y_continuous(name=\"Mean Phred score\", expand=c(0,0), limits=c(10,45)) +\n  scale_x_continuous(name=\"Position\", limits=c(0,NA),\n                     breaks=seq(0,140,20), expand=c(0,0)) +\n  facet_grid(stage~.)\ng_quality_base\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-quality-2.png){width=672}\n:::\n\n```{.r .cell-code}\ng_quality_seq <- g_qual +\n  geom_vline(xintercept=25, linetype=\"dashed\", color=\"red\") +\n  geom_vline(xintercept=30, linetype=\"dashed\", color=\"red\") +\n  geom_line(aes(x=mean_phred_score, y=n_sequences), data=quality_seq_stats) +\n  scale_x_continuous(name=\"Mean Phred score\", expand=c(0,0)) +\n  scale_y_continuous(name=\"# Sequences\", expand=c(0,0)) +\n  facet_grid(stage~., scales = \"free_y\")\ng_quality_seq\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-quality-3.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstage_dup <- basic_stats %>% group_by(stage) %>% \n  summarize(dmin = min(percent_duplicates), dmax=max(percent_duplicates),\n            dmean=mean(percent_duplicates), .groups = \"drop\")\n\ng_dup_stages <- g_stage_trace +\n  geom_line(aes(y=percent_duplicates)) +\n  scale_y_continuous(\"% Duplicates\", limits=c(0,NA), expand=c(0,0))\ng_dup_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-dedup-1.png){width=576}\n:::\n\n```{.r .cell-code}\ng_readlen_stages <- g_stage_trace + geom_line(aes(y=mean_seq_len)) +\n  scale_y_continuous(\"Mean read length (nt)\", expand=c(0,0), limits=c(0,NA))\ng_readlen_stages\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/preproc-dedup-2.png){width=576}\n:::\n:::\n\n\n\n\n## Effectiveness of ribodepletion\n\nSome samples had anywhere as low as 10% all the way up to 60% ribosomal reads.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate reads lost during ribodepletion (approximation for % ribosomal reads)\nreads_ribo <- n_reads_rel %>% \n  filter(stage %in% c(\"dedup\", \"ribo_secondary\")) %>% \n  group_by(sample) %>% \n  summarize(p_reads_ribo=1-n_read_pairs[2]/n_read_pairs[1], .groups = \"drop\") %>%\n  inner_join(libraries)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(sample)`\n```\n\n\n:::\n\n```{.r .cell-code}\nreads_ribo_summ <- reads_ribo %>%\n  group_by(sample) %>%\n  summarize(min=min(p_reads_ribo), max=max(p_reads_ribo),\n            mean=mean(p_reads_ribo), .groups = \"drop\") %>%\n  inner_join(libraries)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(sample)`\n```\n\n\n:::\n\n```{.r .cell-code}\ng_reads_ribo <- ggplot(reads_ribo, \n                       aes(x=library, y=p_reads_ribo)) +\n  geom_point() + \n  scale_y_continuous(name=\"Approx % ribosomal reads\", limits=c(0,1),\n                     breaks=seq(0,1,0.2), expand=c(0,0), labels = function(y) y*100)+\n  theme_kit\ng_reads_ribo\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/ribo-frac-1.png){width=576}\n:::\n:::\n\n\n\n\n# Taxonomic composition\n\n## High-level composition\n\nAs before, to assess the high-level composition of the reads, I ran the ribodepleted files through Kraken2 and summarized the results with Bracken. This time, however, I used the full Standard database instead of Standard-16, and I also used a newer iteration of the database.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclassifications <- c(\"Filtered\", \"Duplicate\", \"Ribosomal\", \"Unassigned\",\n                     \"Bacterial\", \"Archaeal\", \"Viral\", \"Human\")\n\n# Import composition data\ntax_final_dir <- file.path(results_dir, \"taxonomy_final\")\ncomp_path <- file.path(tax_final_dir, \"taxonomic_composition.tsv.gz\")\ncomp <- read_tsv(comp_path) %>% left_join(libraries) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 480 Columns: 4\n-- Column specification --------------------------------------------------------\nDelimiter: \"\\t\"\nchr (2): sample, classification\ndbl (2): n_reads, p_reads\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\nJoining with `by = join_by(sample)`\n```\n\n\n:::\n\n```{.r .cell-code}\ncomp_minor <- comp %>% \n  filter(classification %in% c(\"Archaeal\", \"Viral\", \"Human\", \"Other\"))\ncomp_assigned <- comp %>%\n  filter(! classification %in% c(\"Filtered\", \"Duplicate\", \n                                 \"Ribosomal\", \"Unassigned\")) %>%\n  group_by(sample) %>%\n  mutate(p_reads = n_reads/sum(n_reads))\ncomp_assigned_minor <- comp_assigned %>% \n  filter(classification %in% c(\"Archaeal\", \"Viral\", \"Human\", \"Other\"))\n\n# Summarize composition\nread_comp_summ <- comp %>% \n  group_by(classification) %>%\n  summarize(n_reads = sum(n_reads), .groups = \"drop_last\") %>%\n  mutate(n_reads = replace_na(n_reads,0),\n         p_reads = n_reads/sum(n_reads),\n         pc_reads = p_reads*100)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare plotting templates\ng_comp_base <- ggplot(mapping=aes(x=library, y=p_reads, fill=classification)) +\n  scale_x_discrete(name=\"Plasma pool\") +\n  theme_kit + \n  theme(plot.title = element_text(hjust=0, face=\"plain\", size=rel(1.5)))\nscale_y_pc_reads <- purrr::partial(scale_y_continuous, name = \"% Reads\",\n                                   expand = c(0,0), labels = function(y) y*100)\ngeom_comp <- purrr::partial(geom_col, position = \"stack\", width = 1)\n\n# Plot overall composition\ng_comp <- g_comp_base + geom_comp(data = comp) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_brewer(palette = \"Set1\", name = \"Classification\") +\n  ggtitle(\"Read composition (all reads, all groups)\")\ng_comp\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-composition-all-1.png){width=768}\n:::\n\n```{.r .cell-code}\n# Repeat for classified reads only\npalette_assigned <- brewer.pal(9, \"Set1\")[5:9]\ng_comp_assigned <- g_comp_base + \n  geom_comp(data = comp_assigned) +\n  scale_y_pc_reads(limits = c(0,1.01), breaks = seq(0,1,0.2)) +\n  scale_fill_manual(values=palette_assigned, name = \"Classification\") +\n  ggtitle(\"Read composition (assigned reads, all groups)\")\ng_comp_assigned\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-composition-all-2.png){width=768}\n:::\n\n```{.r .cell-code}\n# Plot composition of minor components\npalette_minor <- brewer.pal(9, \"Set1\")[6:9]\ng_comp_minor <- g_comp_base + \n  geom_comp(data=comp_minor) +\n  scale_y_pc_reads() +\n  scale_fill_manual(values=palette_minor, name = \"Classification\") +\n  ggtitle(\"Read composition (all reads, minor groups)\")\ng_comp_minor\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-composition-all-3.png){width=768}\n:::\n\n```{.r .cell-code}\ng_comp_assigned_minor <- g_comp_base + \n  geom_comp(data=comp_assigned_minor) +\n  scale_y_pc_reads() +\n  scale_fill_manual(values=palette_minor, name = \"Classification\") +\n  ggtitle(\"Read composition (assigned reads, minor groups)\")\ng_comp_assigned_minor\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/plot-composition-all-4.png){width=768}\n:::\n:::\n\n\n\n\nTODO analyze this above\n\n## Total viral content\n\nTotal viral fraction average $1.81 \\times 10^{-2}$ across samples. As a fraction of assigned (rather than total) reads, this jumped to $1.60 \\times {-1}$:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_reads_viral_all <- comp %>% filter(classification == \"Viral\") %>%\n  mutate(read_group = \"All reads\")\np_reads_viral_assigned <- comp_assigned %>% filter(classification == \"Viral\") %>%\n  mutate(read_group = \"Classified reads\")\np_reads_viral <- bind_rows(p_reads_viral_all, p_reads_viral_assigned)\n\n# Plot\ng_viral <- ggplot(p_reads_viral, aes(x=library, y=p_reads)) +\n  geom_point() +\n  scale_x_discrete(name=\"Plasma pool\") +\n  scale_y_log10(name=\"Viral read fraction\") +\n  facet_grid(.~read_group, scales = \"free\") +\n  guides(color=guide_legend(nrow=2), shape=guide_legend(nrow=2),\n         linetype=guide_legend(nrow=2)) +\n  theme_kit\ng_viral\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/p-viral-1.png){width=672}\n:::\n:::\n\n\n\n\n## Taxonomic composition of viruses\n\nThe two dominant viruses we see are Anellovirdae and Rhabdovirdae. Followed by these two viral families is Flavivirdae, and lastly, also by a much smaller percent, Microviridae.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get viral taxonomy\nviral_taxa_path <- file.path(data_dir, \"total-virus-db.tsv.gz\")\nviral_taxa <- read_tsv(viral_taxa_path, show_col_types = FALSE)\n\n# Get Kraken reports\nreports_path <- file.path(tax_final_dir, \"kraken_reports.tsv.gz\")\nreports <- read_tsv(reports_path, show_col_types = FALSE) %>%\n  inner_join(libraries, by=\"sample\") %>% arrange(sample)\n\n# Filter to viral taxa\nkraken_reports_viral <- filter(reports, taxid %in% viral_taxa$taxid) %>%\n  group_by(sample) %>%\n  mutate(p_reads_viral = n_reads_clade/n_reads_clade[1])\nkraken_reports_viral_cleaned <- kraken_reports_viral %>%\n  select(-pc_reads_total, -n_reads_direct, -contains(\"minimizers\")) %>%\n  select(name, taxid, p_reads_viral, n_reads_clade, everything()) %>% ungroup\n\nviral_classes <- kraken_reports_viral_cleaned %>% filter(rank == \"C\")\nviral_families <- kraken_reports_viral_cleaned %>% filter(rank == \"F\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmajor_threshold <- 0.01\n\n# Identify major viral families\nviral_families_major_tab <- viral_families %>% \n  group_by(name, taxid) %>%\n  summarize(p_reads_viral_max = max(p_reads_viral), .groups=\"drop\") %>%\n  filter(p_reads_viral_max >= major_threshold)\nviral_families_major_list <- viral_families_major_tab %>% pull(name)\nviral_families_major <- viral_families %>% \n  filter(name %in% viral_families_major_list) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_minor <- viral_families_major %>% \n  group_by(sample) %>%\n  summarize(p_reads_viral_major = sum(p_reads_viral), .groups = \"drop\") %>%\n  mutate(name = \"Other\", taxid=NA, p_reads_viral = 1-p_reads_viral_major) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_display <- viral_families_major %>% \n  bind_rows(viral_families_minor) %>%\n  arrange(desc(p_reads_viral)) %>% \n  mutate(name = factor(name, levels=c(viral_families_major_list, \"Other\"))) %>%\n  rename(p_reads = p_reads_viral, classification=name) %>%\n  inner_join(libraries)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(sample)`\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot\ng_families <- g_comp_base + \n  geom_comp(data=viral_families_display) +\n  scale_y_continuous(name=\"% Viral Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_brewer(palette = 'Accent')\ng_families\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/viral-family-composition-1.png){width=768}\n:::\n:::\n\n\n\n\nExcluding *Anellovirdae* and *Rhabdovirdae*, remaining viral sequences are distributed across a wide variety:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmajor_threshold_adj <- 0.05\n\n# Adjust viral family counts\nviral_families_adj <- viral_families %>%\n  filter(!(name %in% c(\"Rhabdoviridae\",\"Anelloviridae\"))) %>%\n  group_by(sample) %>%\n  mutate(p_reads_viral = p_reads_viral/sum(p_reads_viral))\n\n# Identify major viral families\nviral_families_major_tab <- viral_families_adj %>% \n  group_by(name, taxid) %>%\n  summarize(p_reads_viral_max = max(p_reads_viral), .groups=\"drop\") %>%\n  filter(p_reads_viral_max >= major_threshold)\nviral_families_major_list <- viral_families_major_tab %>% pull(name)\nviral_families_major <- viral_families_adj %>% \n  filter(name %in% viral_families_major_list) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_minor <- viral_families_major %>% \n  group_by(sample) %>%\n  summarize(p_reads_viral_major = sum(p_reads_viral), .groups = \"drop\") %>%\n  mutate(name = \"Other\", taxid=NA, p_reads_viral = 1-p_reads_viral_major) %>%\n  select(name, taxid, sample, p_reads_viral)\nviral_families_display <- viral_families_major %>% \n  bind_rows(viral_families_minor) %>%\n  arrange(desc(p_reads_viral)) %>% \n  mutate(name = factor(name, levels=c(viral_families_major_list, \"Other\"))) %>%\n  rename(p_reads = p_reads_viral, classification=name) %>%\n  inner_join(libraries)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(sample)`\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot\npalette_viral <- c(brewer.pal(12, \"Set3\"), brewer.pal(8, \"Dark2\"), brewer.pal(9, \"Set1\"))\ng_families_adj <- g_comp_base + \n  geom_comp(data=viral_families_display) +\n  scale_y_continuous(name=\"% Viral Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_manual(values=palette_viral, name = \"Viral class\")\ng_families_adj\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/viral-family-composition-exclusion-1.png){width=768}\n:::\n:::\n\n\n\n\n# Human-infecting virus reads\n\n## Overall relative abundance\n\nI calculated the relative abundance of human-infecting viruses in two ways:\n\n-   First, as the total number of deduplicated human-virus reads in each sample, divided by the number of raw reads (\"All reads\").\n\n-   Second, as a fraction of preprocessed (cleaned, deduplicated, computationally ribodepleted) reads (\"Preprocessed reads\").\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import and format reads\nhv_reads_path <- file.path(hv_dir, \"hv_hits_putative_collapsed.tsv.gz\")\nmrg_hv <- read_tsv(hv_reads_path, show_col_types = FALSE) %>%\n  inner_join(libraries, by=\"sample\") %>% arrange(sample) %>%\n  mutate(kraken_label = ifelse(assigned_hv, \"Kraken2 HV assignment\",\n                               \"No Kraken2 assignment\")) %>%\n  mutate(adj_score_max = pmax(adj_score_fwd, adj_score_rev),\n         highscore = adj_score_max >= 20,\n         hv_status = assigned_hv | highscore) %>%\n  rename(taxid_all = taxid, taxid = taxid_best)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat <- vroom(...)\n  problems(dat)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get raw read counts\nread_counts_raw <- filter(basic_stats_raw) %>%\n  select(sample, n_reads_raw = n_read_pairs)\nread_counts_preproc <- basic_stats %>% filter(stage == \"ribo_initial\") %>%\n  select(sample, n_reads_preproc = n_read_pairs)\n\n# Get HV read counts\nread_counts_hv <- mrg_hv %>% filter(hv_status) %>% \n  group_by(sample) %>% \n  count(name=\"n_reads_hv\")\nread_counts <- read_counts_raw %>%\n  left_join(read_counts_hv, by=c(\"sample\")) %>%\n  mutate(n_reads_hv = replace_na(n_reads_hv, 0)) %>%\n  left_join(read_counts_preproc, by=c(\"sample\")) %>%\n  inner_join(libraries, by=c(\"sample\")) %>%\n  select(sample, n_reads_raw, n_reads_preproc, n_reads_hv) %>%\n  mutate(n_samples = 1,\n         p_reads_total = n_reads_hv/n_reads_raw,\n         p_reads_preproc = n_reads_hv/n_reads_preproc)\nread_counts_long <- read_counts %>%\n  pivot_longer(starts_with(\"p_reads\"), names_to=\"read_group\", values_to=\"p_reads\") %>%\n  mutate(read_group = ifelse(read_group == \"p_reads_total\", \"All reads\", \"Preprocessed reads\"))\n\n# Combine for display\nread_counts_agg <- read_counts %>%\n  mutate(p_reads_total = n_reads_hv/n_reads_raw,\n         p_reads_preproc = n_reads_hv/n_reads_preproc) %>%\n  inner_join(libraries)\nread_counts_agg_long <- read_counts_agg %>%\n  pivot_longer(starts_with(\"p_reads\"), names_to=\"read_group\", values_to=\"p_reads\") %>%\n  mutate(read_group = ifelse(read_group == \"p_reads_total\", \"All reads\", \"Preprocessed reads\"))%>%\n  inner_join(libraries)\n\n# Visualize\ng_read_counts <- ggplot(read_counts_agg_long, aes(x=library, y=p_reads)) +\n  geom_point() +\n  scale_y_log10(name = \"Unique human-viral read fraction\") +\n  facet_grid(.~read_group, scales = \"free\") +\n  theme_kit\ng_read_counts\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/count-hv-reads-1.png){width=768}\n:::\n:::\n\n\n\n\nTODO do analysis above.\n\n## Overall taxonomy and composition\n\nComposition of HV reads was not greatly changed from when looking at all viral reads. The two dominant viruses we see are Anellovirdae and Rhabdovirdae. Followed by these two viral families is Flavivirdae, and lastly, also by a much smaller percent, Microviridae.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter samples and add viral taxa information\nsamples_keep <- read_counts %>% filter(n_reads_hv > 5) %>% pull(sample)\nmrg_hv_named <- mrg_hv %>% filter(sample %in% samples_keep, hv_status) %>% left_join(viral_taxa, by=\"taxid\") \n\n# Discover viral species & genera for HV reads\nraise_rank <- function(read_db, taxid_db, out_rank = \"species\", verbose = FALSE){\n  # Get higher ranks than search rank\n  ranks <- c(\"subspecies\", \"species\", \"subgenus\", \"genus\", \"subfamily\", \"family\", \"suborder\", \"order\", \"class\", \"subphylum\", \"phylum\", \"kingdom\", \"superkingdom\")\n  rank_match <- which.max(ranks == out_rank)\n  high_ranks <- ranks[rank_match:length(ranks)]\n  # Merge read DB and taxid DB\n  reads <- read_db %>% select(-parent_taxid, -rank, -name) %>%\n    left_join(taxid_db, by=\"taxid\")\n  # Extract sequences that are already at appropriate rank\n  reads_rank <- filter(reads, rank == out_rank)\n  # Drop sequences at a higher rank and return unclassified sequences\n  reads_norank <- reads %>% filter(rank != out_rank, !rank %in% high_ranks, !is.na(taxid))\n  while(nrow(reads_norank) > 0){ # As long as there are unclassified sequences...\n    # Promote read taxids and re-merge with taxid DB, then re-classify and filter\n    reads_remaining <- reads_norank %>% mutate(taxid = parent_taxid) %>%\n      select(-parent_taxid, -rank, -name) %>%\n      left_join(taxid_db, by=\"taxid\")\n    reads_rank <- reads_remaining %>% filter(rank == out_rank) %>%\n      bind_rows(reads_rank)\n    reads_norank <- reads_remaining %>%\n      filter(rank != out_rank, !rank %in% high_ranks, !is.na(taxid))\n  }\n  # Finally, extract and append reads that were excluded during the process\n  reads_dropped <- reads %>% filter(!seq_id %in% reads_rank$seq_id)\n  reads_out <- reads_rank %>% bind_rows(reads_dropped) %>%\n    select(-parent_taxid, -rank, -name) %>%\n    left_join(taxid_db, by=\"taxid\")\n  return(reads_out)\n}\nhv_reads_species <- raise_rank(mrg_hv_named, viral_taxa, \"species\")\nhv_reads_genus <- raise_rank(mrg_hv_named, viral_taxa, \"genus\")\nhv_reads_family <- raise_rank(mrg_hv_named, viral_taxa, \"family\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthreshold_major_family <- 0.05\n\n# Count reads for each human-viral family\nhv_family_counts <- hv_reads_family %>% \n  group_by(sample, name, taxid) %>%\n  count(name = \"n_reads_hv\") %>%\n  group_by(sample) %>%\n  mutate(p_reads_hv = n_reads_hv/sum(n_reads_hv))\n\n# Identify high-ranking families and group others\nhv_family_major_tab <- hv_family_counts %>% group_by(name) %>% \n  filter(p_reads_hv == max(p_reads_hv)) %>% filter(row_number() == 1) %>%\n  arrange(desc(p_reads_hv)) %>% filter(p_reads_hv > threshold_major_family)\nhv_family_counts_major <- hv_family_counts %>%\n  mutate(name_display = ifelse(name %in% hv_family_major_tab$name, name, \"Other\")) %>%\n  group_by(sample, name_display) %>%\n  summarize(n_reads_hv = sum(n_reads_hv), p_reads_hv = sum(p_reads_hv), \n            .groups=\"drop\") %>%\n  mutate(name_display = factor(name_display, \n                               levels = c(hv_family_major_tab$name, \"Other\")))\nhv_family_counts_display <- hv_family_counts_major %>%\n  rename(p_reads = p_reads_hv, classification = name_display) %>%\n  inner_join(libraries)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(sample)`\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot\ng_hv_family <- g_comp_base + \n  geom_col(data=hv_family_counts_display, position = \"stack\", width=1) +\n  scale_y_continuous(name=\"% HV Reads\", limits=c(0,1.01), \n                     breaks = seq(0,1,0.2),\n                     expand=c(0,0), labels = function(y) y*100) +\n  scale_fill_brewer(palette = 'Accent', name = \"Viral family\") +\n  labs(title=\"Family composition of human-viral reads\") +\n  guides(fill=guide_legend(ncol=4)) +\n  theme(plot.title = element_text(size=rel(1.4), hjust=0, face=\"plain\"))\ng_hv_family\n```\n\n::: {.cell-output-display}\n![](2024-07-08_cebria-mendoza_files/figure-html/hv-family-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Get most prominent families for text\nhv_family_collate <- hv_family_counts %>%\n  group_by(name, taxid) %>% \n  summarize(n_reads_tot = sum(n_reads_hv),\n            p_reads_max = max(p_reads_hv), .groups=\"drop\") %>% \n  arrange(desc(n_reads_tot))\nhv_family_collate\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"taxid\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"n_reads_tot\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"p_reads_max\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Anelloviridae\",\"2\":\"687329\",\"3\":\"8323297\",\"4\":\"9.997320e-01\"},{\"1\":\"Rhabdoviridae\",\"2\":\"11270\",\"3\":\"935461\",\"4\":\"1.000000e+00\"},{\"1\":\"Flaviviridae\",\"2\":\"11050\",\"3\":\"94741\",\"4\":\"2.869864e-01\"},{\"1\":\"Microviridae\",\"2\":\"10841\",\"3\":\"81660\",\"4\":\"3.136919e-01\"},{\"1\":\"Hepeviridae\",\"2\":\"3079366\",\"3\":\"1\",\"4\":\"5.509642e-06\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#test <- hv_reads_family %>% filter(hit_hv == 1 & name %in% c('Anelloviridae', 'Flaviviridae', 'Hepeviridae', 'Microviridae', 'Rhabdoviridae')) %>% select(name, assigned_name) %>% distinct()\n#hv_reads_family %>% filter(hit_hv == 1 & name %in% c('Flaviviridae', 'Hepeviridae', 'Microviridae', 'Rhabdoviridae')) %>% select(name, assigned_name) %>% distinct()\n\n#hv_reads_family %>% filter(hit_hv == 1) %>% select(name, assigned_name) %>% distinct() %>% filter(!str_detect(tolower(assigned_name), \"torque teno\"))\nhv_reads_family %>% select(name, assigned_name) %>% distinct() %>% filter(!str_detect(tolower(assigned_name), \"torque teno\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"assigned_name\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Rhabdoviridae\",\"2\":\"Vesicular stomatitis Indiana virus\"},{\"1\":\"Rhabdoviridae\",\"2\":\"unclassified\"},{\"1\":\"Anelloviridae\",\"2\":\"Anelloviridae sp.\"},{\"1\":\"Anelloviridae\",\"2\":\"unclassified\"},{\"1\":\"Anelloviridae\",\"2\":\"TTV-like mini virus\"},{\"1\":\"Rhabdoviridae\",\"2\":\"Maraba virus\"},{\"1\":\"Hepeviridae\",\"2\":\"unclassified\"},{\"1\":\"Flaviviridae\",\"2\":\"GB virus C\"},{\"1\":\"Flaviviridae\",\"2\":\"unclassified\"},{\"1\":\"Anelloviridae\",\"2\":\"Small anellovirus 1\"},{\"1\":\"Anelloviridae\",\"2\":\"Vesicular stomatitis Indiana virus\"},{\"1\":\"Flaviviridae\",\"2\":\"Vesicular stomatitis Indiana virus\"},{\"1\":\"Anelloviridae\",\"2\":\"Small anellovirus 2\"},{\"1\":\"Microviridae\",\"2\":\"unclassified\"},{\"1\":\"Microviridae\",\"2\":\"Anelloviridae sp.\"},{\"1\":\"Anelloviridae\",\"2\":\"GB virus C\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nhv_reads_family %>% select(assigned_name) %>% distinct() %>% filter(!str_detect(tolower(assigned_name), \"torque teno\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"assigned_name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Vesicular stomatitis Indiana virus\"},{\"1\":\"unclassified\"},{\"1\":\"Anelloviridae sp.\"},{\"1\":\"TTV-like mini virus\"},{\"1\":\"Maraba virus\"},{\"1\":\"GB virus C\"},{\"1\":\"Small anellovirus 1\"},{\"1\":\"Small anellovirus 2\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nhv_reads_genus %>% select(name) %>% distinct() %>% filter(!str_detect(tolower(name), \"torque teno\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Betatorquevirus\"},{\"1\":\"Vesiculovirus\"},{\"1\":\"Alphatorquevirus\"},{\"1\":\"Gammatorquevirus\"},{\"1\":\"Pegivirus\"},{\"1\":\"Ledantevirus\"},{\"1\":\"Paslahepevirus\"},{\"1\":\"Anelloviridae sp.\"},{\"1\":\"TT virus cya/2019\"},{\"1\":\"TT virus cyb/2019\"},{\"1\":\"TT virus sle1957\"},{\"1\":\"TT virus sle1932\"},{\"1\":\"TT virus sle2058\"},{\"1\":\"TT virus sle2072\"},{\"1\":\"TT virus sle2065\"},{\"1\":\"TT virus sle2061\"},{\"1\":\"TT virus sle2057\"},{\"1\":\"TT virus sle1931\"},{\"1\":\"Microvirus sp.\"},{\"1\":\"Microviridae sp.\"},{\"1\":\"TT virus cyc/2019\"},{\"1\":\"Small anellovirus 2\"},{\"1\":\"Small anellovirus 1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\nUnsurprisingly we get a lot of Anello virus, specifically torque teno virus. Once I filter those out we get a few interesting viruses: - Rhabdovirus - [Vesiculovirus](https://en.wikipedia.org/wiki/Vesiculovirus) - [Vesicular stomatitis Indiana virus](https://en.wikipedia.org/wiki/Indiana_vesiculovirus) - [Maraba virus](https://en.wikipedia.org/wiki/Oncolytic_virus) - Flavivirus - Pegivirus - [GB virus C](https://en.wikipedia.org/wiki/GB_virus_C)\n\nTODO look in to this.\n\n# Conclusion\n\nOverall, nothing dangerous was found in the blood, which is totally expected.\n\nMy biggest concern is that I'm incompetent and don't know how to analyze the data at this point which is expected. Let me try uploading this to my notebook and then reevaluate from there.\n",
    "supporting": [
      "2024-07-08_cebria-mendoza_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}